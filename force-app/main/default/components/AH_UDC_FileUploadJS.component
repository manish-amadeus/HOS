<apex:component >
<<<<<<< HEAD
   <script type="text/javascript">
=======
   <apex:attribute name="attributeWorkbook" description="Current Workbook" type="AH_UDC_CommunityWorkbook" required="true" />
   <script type="text/javascript">
      function consolelog(message)
      {
         if (DisplayConsoleLogMessages) console.log(message);
      }
>>>>>>> be8f81a97d079e6e4c45f805d88969f9bcae9d8a
      var fileIdToDelete = null;
      var validFileCount = 0;
      $(document).ready(function () {
         try {
<<<<<<< HEAD
=======
            if (isSent.toUpperCase() == 'FALSE'){
               $('#addFiles').prop('disabled', true);
            }
            var maxFileUploadCount = parseInt({!attributeWorkbook.currentStep.fileUploadInfo.maxFileUploadCount});
            var arrayOfFileExtension = '{!attributeWorkbook.currentStep.fileUploadInfo.fileUploadExtension}'.toLowerCase().replace(/\s*\,\s*/g, ",").trim().split(",");
            var acceptFileExtension = arrayOfFileExtension.map(function (value) { return " ." + value; }).toString();
>>>>>>> be8f81a97d079e6e4c45f805d88969f9bcae9d8a
            document.getElementById("FileUploadList").accept = acceptFileExtension;
            $('[id$="btnFileUpload"]').prop('disabled', true);
            $('#addFiles').on('click', function () {
               if (blockNavigation == true) return; //If server action is in progress then don't allow to select files
               $('#FileUploadList').click();
               return false;
            });
            var $table = $("table.slds-table");
            if ($table.length > 0) {
               var rows = $($table).find('tr');
               $(rows).each(function () {
                  var updloadedDateText = $(this).find('td').eq(1).text();
                  var uplodedDate = new Date(Date.parse(updloadedDateText));
                  var arr = uplodedDate.toLocaleString('en-US', {
                     year: 'numeric', // numeric, 2-digit
                     month: 'short', // numeric, 2-digit, long, short, narrow
                     day: 'numeric', // numeric, 2-digit
                     hour: 'numeric', // numeric, 2-digit
                     minute: 'numeric', // numeric, 2-digit
                     second: 'numeric', // numeric, 2-digit
                  }).replace(/,/g, '').split(' ');
                  //arr -> Feb 16 2022 2:55:23 AM
                  $(this).find('td').eq(1).text(arr[2] + '-' + arr[0] + '-' + arr[1] + ' ' + arr[3] + ' ' + arr[4]);
               });
            }

            $('input[type="file"]').change(function (e) {
               var uploadFileList = e.target.files;
               if (uploadFileList.length > 0) {
                  $('[id$="btnFileUpload"]').prop('disabled', false);
                  var fileNames = [];
                  var isFileUpload = false;
                  var isAnyMaxFileSize = false;
                  var isAnyUnsupportedFile = false;
                  validFileCount = 0;
                  $('#file-upload-maxfilesizefilename').html('');
                  $('#file-upload-notsupportedfilename').html('');
                  $('#file-upload-filename').html('');
                  $('#file-upload-header').html('');
                  $('#file-upload-sizeheader').html('');
                  $('#file-upload-extensionheader').html('');

                  for (var i = 0; i < uploadFileList.length; ++i) {
                     var isFileSupported = true;
                     var isFileMaxSize = false;
                     $('#file-upload-filename').show();
                     var fileElement = document.getElementById("FileUploadList");
                     var fileExtension = "";
                     const fileSize = uploadFileList[i].size;

<<<<<<< HEAD
                     if (fileSize > (fileUploadMaxSize * 1024 * 1024)) {
=======
                     if (fileSize > (parseInt({!attributeWorkbook.currentStep.fileUploadInfo.fileUploadMaximumSize}) * 1024 * 1024)) {
>>>>>>> be8f81a97d079e6e4c45f805d88969f9bcae9d8a
                        $('#file-upload-maxfilesizefilename').show();
                        fileNames.push(uploadFileList[i].name);
                        $('#file-upload-maxfilesizefilename').append('<br/> ' + fileNames[i].toString() + '<br/>');
                        isFileMaxSize = true;
                        isAnyMaxFileSize = true;
                     }

                     if (fileElement.value.lastIndexOf(".") > 0 && isFileMaxSize == false) {
                        fileExtension = uploadFileList[i].name.substring(uploadFileList[i].name.lastIndexOf(".") + 1, uploadFileList[i].name.length);
                        fileExtension = fileExtension.toLowerCase();
                        if (!arrayOfFileExtension.includes(fileExtension)) {
                           $('#file-upload-notsupportedfilename').show();
                           fileNames.push(uploadFileList[i].name);
                           $('#file-upload-notsupportedfilename').append('<br/> ' + fileNames[i].toString() + '<br/>');
                           isFileSupported = false;
                           isAnyUnsupportedFile = true;
                        }
                     }

<<<<<<< HEAD
                     if (isFileMaxSize == false && isFileSupported == true)
                     {
=======
                     if (isFileMaxSize == false && isFileSupported == true){
>>>>>>> be8f81a97d079e6e4c45f805d88969f9bcae9d8a
                        fileNames.push(uploadFileList[i].name);
                        $('#file-upload-filename').append('<br/> ' + fileNames[i].toString() + '<br/> ');
                        isFileUpload = true;
                        validFileCount = validFileCount + 1;
<<<<<<< HEAD
                        if (validFileCount > maxFileUploadCount) {
=======
                        if (validFileCount > parseInt({!attributeWorkbook.currentStep.fileUploadInfo.maxFileUploadCount})) {
>>>>>>> be8f81a97d079e6e4c45f805d88969f9bcae9d8a
                           $('#file-upload-notsupportedfilename').hide();
                           $('#file-upload-maxfilesizefilename').hide();
                           $('#file-upload-filename').hide();
                           $('[id$="btnFileUpload"]').prop('disabled', true);
<<<<<<< HEAD
                           var maxFileCountStringMessage = LABEL_MaxFileUploadCountMessage.replace('{0}', maxFileUploadCount);
=======
                           var maxFileCountStringMessage = '{!$Label.AH_UDC_MaxFileUploadCountMessage}'.replace('{0}', maxFileUploadCount);
>>>>>>> be8f81a97d079e6e4c45f805d88969f9bcae9d8a
                           showNotifications(maxFileCountStringMessage);
                           return;
                        }
                     } else {
                        if (isFileUpload == false) // If one valid file in list then no need to run
                        {
                           $('#file-upload-filename').hide();
                           $('[id$="btnFileUpload"]').prop('disabled', true);
                           continue;
                        }
                     }
                  }
                  if (isFileUpload == true) {
<<<<<<< HEAD
                     $('#file-upload-header').html(LABEL_SelectedFileMessage);
                  }
                  if (isAnyMaxFileSize == true) {
                     var maximumFileUploadSize = LABEL_MaxFileUploadSizeMessage.replace('{0}', fileUploadMaxSize);
                     $('#file-upload-sizeheader').html('<br/> ' + maximumFileUploadSize);
                  }
                  if (isAnyUnsupportedFile == true) {
                     $('#file-upload-extensionheader').html('<br/> ' + LABEL_ValidFileExtensionMessage);
=======
                     $('#file-upload-header').html('{!$Label.AH_UDC_SelectedFileMessage}');
                  }
                  if (isAnyMaxFileSize == true) {
                     var maximumFileUploadSize = '{!$Label.AH_UDC_MaxFileUploadSizeMessage}'.replace('{0}', {!attributeWorkbook.currentStep.fileUploadInfo.fileUploadMaximumSize});
                     $('#file-upload-sizeheader').html('<br/> ' + maximumFileUploadSize);
                  }
                  if (isAnyUnsupportedFile == true) {
                     $('#file-upload-extensionheader').html('<br/> {!$Label.AH_UDC_ValidFileExtensionMessage}');
                  }
                  if(validFileCount > 0) {
                     disableButtons();
                     $('[id$="btnFileUpload"]').prop('disabled', false);
>>>>>>> be8f81a97d079e6e4c45f805d88969f9bcae9d8a
                  }
               } else {
                  $('[id$="btnFileUpload"]').prop('disabled', true);
                  $('#file-upload-maxfilesizefilename').html('');
                  $('#file-upload-notsupportedfilename').html('');
                  $('#file-upload-filename').html('');
                  $('#file-upload-header').html('');
                  $('#file-upload-sizeheader').html('');
                  $('#file-upload-extensionheader').html('');
               }
            });
         } catch (ex) {
            handleJSError('Document.Ready', typeof(ex) == 'string' ? ex : ex.stack);
         }
      });

<<<<<<< HEAD
=======
      function doUpload(reader, fileName, i, totalFileCount, arrErrorMsgs){
         var filebase64encodedstring = reader.result.toString().replace(/^data:(.*,)?/, '');
         var requestBody = '{"Token" : "' + securityToken + '","fileName":"' + fileName + '","fileContentBase64String":"' + filebase64encodedstring + '"}';
         $.ajax({
            type: "POST",
            async: true,
            crossDomain: true,
            contentType: 'application/json',
            dataType: "json",
            url: apiUrl,
            data: requestBody,
            success: function (data) {
               const nextFileNumber = i + 1;
               // base case
               if (nextFileNumber < totalFileCount) {
                  uploadFilesUsingApi(file, nextFileNumber, totalFileCount, arrErrorMsgs);
                  if (data.statusCode == '200') {
                     consolelog('Uploaded 200: ' + fileName);
                     var sucessfileList = $('#file-upload-filename').html();
                     $('#file-upload-filename').html(sucessfileList.replace(fileName + '<span class="uploading"> - {!$Label.AH_UDC_FileUploadStatusUploading} </span>', fileName + '<span class="success"> - {!$Label.AH_UDC_FileUploadStatusFailedtoUpload} </span>'));
                  } else {
                     showFileUploadFailNotification(fileName);
                  }
               } else {
                  if(arrErrorMsgs.length > 0) //If last file then log error messages
                     logFailedFilesErrorMessage('uploadFilesUsingApi', arrErrorMsgs);

                  if (data.statusCode == '200') {
                     hideNotifications();
                     showNotifications('{!$Label.AH_UDC_FileUploadSuccessMessage}');
                     actionfunction_GetUserFiles();
                     if(currentStepStatus == '' || currentStepStatus == 'New')
                        actionfunction_SetStepInProgress();
                  } else {
                     showFileUploadFailNotification(fileName);
                     enableButtons(); //If failed to upload last file then enable buttons and hide spinner
                     hideSpinner();
                  }
               }
            },
            error: function (error) {
               showFileUploadFailNotification(fileName);

               var errorMsg = 'There is an error in calling api for file upload. Error message: ';
               errorMsg += typeof(error.statusText) != 'undefined' ? error.statusText : $.trim(error);
               errorMsg += ' File name: ' + fileName;
               if(arrErrorMsgs.indexOf(errorMsg) == -1) //Don't add same error again
                  arrErrorMsgs.push(errorMsg);

               if((i + 1) < totalFileCount)
                  uploadFilesUsingApi(file, i + 1, totalFileCount, arrErrorMsgs);
               else  {
                  //If last file then log error messages
                  logFailedFilesErrorMessage('uploadFilesUsingApi', arrErrorMsgs);
                  enableButtons();
                  hideSpinner();
               }
            }
         });
      }

>>>>>>> be8f81a97d079e6e4c45f805d88969f9bcae9d8a
      function uploadFilesUsingApi(file, i, totalFileCount, arrErrorMsgs) {
         try {
            if(typeof(arrErrorMsgs) != 'object' || arrErrorMsgs == null)
               arrErrorMsgs = new Array();

            var fileName = file.files[i].name;
            //If filename is invalid(exceed size limit or invalid extension) than skip that file until find the valid filename
            while($('#file-upload-maxfilesizefilename').html().indexOf(fileName) > 0 || $('#file-upload-notsupportedfilename').html().indexOf(fileName) > 0) {
               i++;
               if(i >= totalFileCount) {
                  hideNotifications();
                  if(currentStepStatus == '' || currentStepStatus == 'New')
                     actionfunction_SetStepInProgress();
                  if(arrErrorMsgs.length > 0) //If last file then log error messages
                     logFailedFilesErrorMessage('uploadFilesUsingApi', arrErrorMsgs);
                  actionfunction_GetUserFiles();
                  return;
               }
               else
                  fileName = file.files[i].name;
            }

            var toBeUploadFileList = $('#file-upload-filename').html();
<<<<<<< HEAD
            if(toBeUploadFileList.indexOf(fileName + '<span class="failed"> - ' + LABEL_FileUploadStatusFailedtoUpload + '</span>') > -1) {
               //If upload is failed previously and user is trying to upload same file again then replace failed status with uploading
               $('#file-upload-filename').html(toBeUploadFileList.replace(fileName + '<span class="failed"> - ' + LABEL_FileUploadStatusFailedtoUpload + '</span>',
                                                                           fileName + '<span class="uploading"> - ' + LABEL_FileUploadStatusUploading + '</span>'));
            }
            else {
               $('#file-upload-filename').html(toBeUploadFileList.replace(fileName, fileName + '<span class="uploading"> - ' + LABEL_FileUploadStatusUploading + '</span>'));
=======
            if(toBeUploadFileList.indexOf(fileName + '<span class="failed"> - {!$Label.AH_UDC_FileUploadStatusFailedtoUpload}</span>') > -1) {
               //If upload is failed previously and user is trying to upload same file again then replace failed status with uploading
               $('#file-upload-filename').html(toBeUploadFileList.replace(fileName + '<span class="failed"> - {!$Label.AH_UDC_FileUploadStatusFailedtoUpload}</span>',
                                                                           fileName + '<span class="uploading"> - {!$Label.AH_UDC_FileUploadStatusUploading}</span>'));
            }
            else {
               $('#file-upload-filename').html(toBeUploadFileList.replace(fileName, fileName + '<span class="uploading"> - {!$Label.AH_UDC_FileUploadStatusUploading}</span>'));
>>>>>>> be8f81a97d079e6e4c45f805d88969f9bcae9d8a
            }
            var reader = new FileReader();
            reader.readAsDataURL(file.files[i]);
            if(i == 0) {
               showSpinner(); //Show spinner before starting upload of first file then it will be hide once last file is uploaded
               disableButtons();
            }
<<<<<<< HEAD
            reader.onload = function () {
               var filebase64encodedstring = reader.result.toString().replace(/^data:(.*,)?/, '');
               var requestBody = '{"Token" : "' + securityToken + '","fileName":"' + fileName + '","fileContentBase64String":"' + filebase64encodedstring + '"}';
               $.ajax({
                  type: "POST",
                  async: true,
                  crossDomain: true,
                  contentType: 'application/json',
                  dataType: "json",
                  url: apiUrl,
                  data: requestBody,
                  success: function (data) {
                     const nextFileNumber = i + 1;
                     // base case
                     if (nextFileNumber < totalFileCount) {
                        uploadFilesUsingApi(file, nextFileNumber, totalFileCount, arrErrorMsgs);
                        if (data.statusCode == '200') {
                           var sucessfileList = $('#file-upload-filename').html();
                           $('#file-upload-filename').html(sucessfileList.replace(fileName + '<span class="uploading"> - ' + LABEL_FileUploadStatusUploading + '</span>', fileName + '<span class="success"> - ' + LABEL_FileUploadStatusUploaded + '</span>'));
                        } else {
                           showFileUploadFailNotification(fileName);
                        }
                     } else {
                        if(arrErrorMsgs.length > 0) //If last file then log error messages
                           logFailedFilesErrorMessage('uploadFilesUsingApi', arrErrorMsgs);

                        if (data.statusCode == '200') {
                           hideNotifications();
                           showNotifications(LABEL_FileUploadSuccessMessage);
                           actionfunction_GetUserFiles();
                           if(currentStepStatus == '' || currentStepStatus == 'New')
                              actionfunction_SetStepInProgress();
                        } else {
                           showFileUploadFailNotification(fileName);
                           enableButtons(); //If failed to upload last file then enable buttons and hide spinner
                           hideSpinner();
                        }
                     }
                  },
                  error: function (error) {
                     showFileUploadFailNotification(fileName);

                     var errorMsg = 'There is an error in calling api for file upload. Error message: ';
                     errorMsg += typeof(error.statusText) != 'undefined' ? error.statusText : $.trim(error);
                     errorMsg += ' File name: ' + fileName;
                     if(arrErrorMsgs.indexOf(errorMsg) == -1) //Don't add same error again
                        arrErrorMsgs.push(errorMsg);

                     if((i + 1) < totalFileCount)
                        uploadFilesUsingApi(file, i + 1, totalFileCount, arrErrorMsgs);
                     else  {
                        //If last file then log error messages
                        logFailedFilesErrorMessage('uploadFilesUsingApi', arrErrorMsgs);
                        enableButtons();
                        hideSpinner();
                     }
                  }
               });
=======
            reader.onload = (e) => {
               var FNU = fileName.toUpperCase();
               if(FNU.endsWith("BMP") || FNU.endsWith("JPEG") || FNU.endsWith("PNG") || FNU.endsWith("JPG") || FNU.endsWith("GIF") || FNU.endsWith("SVG")){
                  const image = new Image();
                  image.src = e.target.result;
                  image.onload = () => {
                     const {
                        height,
                        width
                     } = image;
                     var minHeight = {!attributeWorkbook.currentStep.fileUploadInfo.minHeight};
                     var maxHeight = {!attributeWorkbook.currentStep.fileUploadInfo.maxHeight};
                     var minWidth = {!attributeWorkbook.currentStep.fileUploadInfo.minWidth};
                     var maxWidth = {!attributeWorkbook.currentStep.fileUploadInfo.maxWidth};

                     var meetsRequirements = true;
                     if (minHeight>0 && height<minHeight) meetsRequirements = false;
                     if (maxHeight>0 && height>maxHeight) meetsRequirements = false;
                     if (minWidth>0 && width<minWidth) meetsRequirements = false;
                     if (maxWidth>0 && width>maxWidth) meetsRequirements = false;
                     if (!meetsRequirements){
                        $('#file-upload-filename').html(('<br>' + fileName + '<span class="failed">&nbsp;{!$Label.AH_UDC_FileUploadPixelRequirements}</span><br>').replace('{HEIGHT}',height).replace('{WIDTH}',width));
                        enableButtons();
                        hideSpinner();
                        return false;
                     }
                     //Uploaded image has valid Height and Width
                     doUpload(reader, fileName, i, totalFileCount, arrErrorMsgs);
                     return true;
                  }
               }
               else{
                  doUpload(reader, fileName, i, totalFileCount, arrErrorMsgs);
               }
>>>>>>> be8f81a97d079e6e4c45f805d88969f9bcae9d8a
            };
            reader.onerror = function (uploaderror) {
               showFileUploadFailNotification(fileName);

               var errorMsg = 'There is an error in reading file content. Error message: ';
               errorMsg += typeof(uploaderror) != 'undefined' ? $.trim(uploaderror) : '';
               errorMsg += ' File name: ' + fileName;
               if(arrErrorMsgs.indexOf(errorMsg) == -1) //Don't add same error again
                  arrErrorMsgs.push(errorMsg);

               if((i + 1) < totalFileCount)
                  uploadFilesUsingApi(file, i + 1, totalFileCount, arrErrorMsgs);
               else  {
                  //If last file then log error messages
                  logFailedFilesErrorMessage('uploadFilesUsingApi', arrErrorMsgs);
                  enableButtons();
                  hideSpinner();
               }
            };
         } catch (ex) {
            handleJSError('uploadFilesUsingApi', typeof(ex) == 'string' ? ex : ex.stack);
            enableButtons();
         }
      }

      function logFailedFilesErrorMessage(functionName, arrErrorMsgs) {
         try {
            for(i = 0; i < arrErrorMsgs.length; i++) {
               //Log error into db
               actionfunction_LogClientException(functionName, arrErrorMsgs[i]);
            }
         } catch (ex) {
            handleJSError('logFailedFilesErrorMessage', typeof(ex) == 'string' ? ex : ex.stack);
            enableButtons();
         }
      }

      function disableButtons() {
         try {
            $('[id$="btnFileUpload"]').prop('disabled', true);
            $('#addFiles').prop('disabled', true);
            $('.deleteLink').addClass('disabled');
         } catch (ex) {
            handleJSError('disableButtons', typeof(ex) == 'string' ? ex : ex.stack);
         }
      }

      function enableButtons() {
         try {
            $('#addFiles').prop('disabled', false);
            $('.deleteLink').removeClass('disabled');
            if(validFileCount > 0) $('[id$="btnFileUpload"]').prop('disabled', false);
         } catch (ex) {
            handleJSError('enableButtons', typeof(ex) == 'string' ? ex : ex.stack);
         }
      }

      function showFileUploadFailNotification(fileName) {
         try {
            var failedfileList = $('#file-upload-filename').html();
<<<<<<< HEAD
            $('#file-upload-filename').html(failedfileList.replace(fileName + '<span class="uploading"> - ' + LABEL_FileUploadStatusUploading + '</span>', fileName + '<span class="failed"> - ' + LABEL_FileUploadStatusFailedtoUpload + '</span>'));
=======
            $('#file-upload-filename').html(failedfileList.replace(fileName + '<span class="uploading"> - {!$Label.AH_UDC_FileUploadStatusUploading} </span>', fileName + '<span class="failed"> - {!$Label.AH_UDC_FileUploadStatusFailedtoUpload}</span>'));
>>>>>>> be8f81a97d079e6e4c45f805d88969f9bcae9d8a
         } catch (ex) {
            handleJSError('showFileUploadFailNotification', typeof(ex) == 'string' ? ex : ex.stack);
         }
      }

      function uploadFiles() {
         try {
            if (blockNavigation == true) return; //If server action is in progress then don't allow to select files
            var file = $("#FileUploadList").get(0);
            $('#btnFileUpload').prop('disabled', true);
            uploadFilesUsingApi(file, 0, file.files.length, new Array());
         } catch (ex) {
            handleJSError('uploadFiles', typeof(ex) == 'string' ? ex : ex.stack);
         }
      }

      function deleteFile() {
         try {
            disableButtons();
            actionfunction_DeleteFile(fileIdToDelete);
         }
         catch (ex) {
            handleJSError('deleteFile', typeof(ex) == 'string' ? ex : ex.stack);
         }
      }

      function showDeleteFileConfirmation(fileId) {
         try {
            if (blockNavigation == true) return; //If server action is in progress then don't allow to delete file
<<<<<<< HEAD
            showNotificationsWithButtons(LABEL_DeleteFileConfirmationMessage, 'DeleteUploadedFile');
=======
            showNotificationsWithButtons('{!$Label.AH_UDC_DeleteFileConfirmationMessage}', 'DeleteUploadedFile');
>>>>>>> be8f81a97d079e6e4c45f805d88969f9bcae9d8a
            fileIdToDelete = fileId;
         }
         catch (ex) {
            handleJSError('showDeleteFileConfirmation', typeof(ex) == 'string' ? ex : ex.stack);
         }
      }

      function onCompleteDeleteFile() {
         try {
            setTimeout(function() {
               enableButtons();
               hideSpinner();
<<<<<<< HEAD
               if(isPageLoadErrorMessage == true && NotificationToShow != '') showNotifications(LABEL_FileDeleteSuccessfulMessage);
=======
               if(isPageLoadErrorMessage == true && NotificationToShow != '') showNotifications('{!$Label.AH_UDC_FileDeleteSuccessfulMessage}');
>>>>>>> be8f81a97d079e6e4c45f805d88969f9bcae9d8a
            }, 500); //Allow it to refresh files grid before hiding spinner
         }
         catch (ex) {
            handleJSError('onCompleteDeleteFile', typeof(ex) == 'string' ? ex : ex.stack);
         }
      }

      function handleJSError(strMethodName, strErrorMessage) {
         try{
            hideSpinner();
            //Log error into db
            actionfunction_LogClientException(strMethodName, strErrorMessage);
            $('.form-container-file-Upload').hide();
<<<<<<< HEAD
            $('#spnFileUploadErrorMsg').text(LABEL_FileUploadFormRenderErrorMessage);
=======
            $('#spnFileUploadErrorMsg').text('{!$Label.AH_UDC_FileUploadFormRenderErrorMessage}');
>>>>>>> be8f81a97d079e6e4c45f805d88969f9bcae9d8a
            $('#divFileUploadError').show();
         }
         catch (ex) {
            console.log(ex);
         }
      }
   </script>
</apex:component>