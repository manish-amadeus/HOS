<apex:page standardController="Case" extensions="AH_CaseFlagSetupController">
    <style>
        .seeMore div {position:relative;z-index:70; cursor: default;}
        .seeMore div span {display: none; z-index:90;}
        
        .seeMore div:hover span {
        display: block;position:absolute;
        top:1em; padding:5px; left:5em; width:30em; border:1px solid #0cf; z-index:100;
        background-color:#eff; color:black;
        } 
        
        .disabled {
        color: #999 !important;
        }
        
        .bootstrap-tagsinput {
        width: 400px;
        }
        
        span.tag.label.label-info {
        color: white;
        background: #727F72;
        border-radius: 2.5px;
        padding: 2px;
        }              
        
        #sel-sec {
        margin-left: 0px;
        list style-type: none;
        display: table;
        }
        #sel-sec li {
        display: table-cell;
        cursor: pointer;
        border-radius: 4px;
        width: 316px;
        margin-right: 4px;
        }
        #sel-sec li:hover {
        background-color: #f97e35;
        }
        #sel-sec li input[type=radio] {
        cursor: pointer;
        }
        #sel-sec li img {
        max-width: 300px;
        margin: 8px;
        box-shadow: 4px 4px 4px #999;
        }
    </style>
    <apex:includeScript value="/soap/ajax/22.0/connection.js"/>
    <apex:stylesheet value="{!URLFOR($Resource.AH_Case_Flags_Resources,'/jquery/jquery-ui-1-11-4.css')}"/>
    <apex:includeScript value="{!URLFOR($Resource.AH_Case_Flags_Resources, '/jquery/jquery-1-12-0.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.AH_Case_Flags_Resources, '/jquery/jquery-ui-1-11-4.js')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.AH_Case_Flags_Resources, '/tagsinput/bootstrap-tagsinput.css')}"/>
    <apex:includeScript value="{!URLFOR($Resource.AH_Case_Flags_Resources, '/tagsinput/bootstrap-tagsinput.js')}"/>
    
    <apex:sectionHeader title="Case Flags" subtitle="Setup Wizard" />
    <apex:pageMessages showDetail="false" />
    <apex:form >
        
        <apex:actionFunction action="{!radioChange}" name="radioChange" reRender="SFDCSetup"/>
        
        <apex:pageblock >
            
            <apex:pageblockSection title="Introduction">
                Case Flags helps you monitor your organization’s response times with cases, at a glance, via color coded flags. Case Flags allows you to quickly view cases requiring responses to customers.
                <ul>
                    <li>Eliminate case neglect</li>
                    <li>Avoid SLA violations</li>
                    <li>Measure "Initial Response" (even in business hours)</li>
                </ul>
            </apex:pageblockSection>
        </apex:pageblock>
        
        <apex:pageblock >
            <apex:pageBlockButtons >
                <apex:commandButton action="{!doSave}" value="Save"/>
            </apex:pageBlockButtons>
            
            <apex:pageblockSection title="General Setup" columns="1" id="generalSection">
                <apex:pageBlockSectionItem helpText="Enter a comma separated list of User IDs which should not clear the case flag when adding a comment. Typically, this would be for application context users who perform automated tasks. Be sure to include the Automated Case User in Support Settings or for Email to Case Premium, your Email Service Routing Address Context User(s).">
                    <apex:outputLabel value="API Users"/>
                    <apex:outputPanel id="exclude">
                        <apex:inputTextarea styleClass="tags" value="{!caseFlagCustomSetting.Excluded_Users__c}" html-data-role="tagsinput"/>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                
                <apex:pageBlockSectionItem id="formatRadio">
                    <apex:outputLabel >Hours</apex:outputLabel>
                    <apex:outputPanel >
                        <!--<apex:selectRadio value="{!formatSelection}" onchange="radioChange();">-->
                        <apex:selectRadio value="{!caseFlagCustomSetting.Hours__c}" onchange="radioChange();">
                            <apex:selectOption itemLabel="Standard Hours" itemValue="24"></apex:selectOption>
                            <apex:selectOption itemLabel="Business Hours" itemValue="Business"></apex:selectOption>
                        </apex:selectRadio>
                        <!--<apex:outputPanel style="color:red;" rendered="{!jobNotFound}">Job not found, reselect Business Hours to reschedule Business Hours Job</apex:outputPanel>-->
                        <apex:outputText rendered="{!IF(formatSelection == 'Business',TRUE,FALSE)}">
                            Case Flags will exclude time elapsed outside of your company’s normal hours of operation. For example, if your company’s business hours are 8am to 6pm Mon-Fri, and a customer submits a case comment at 5pm on Friday, Case Flags will count 1 hour. Then at 6pm it will stop counting time until Monday at 8am when it will resume.&nbsp;
                            <apex:outputLink value="/01m" target="_blank">See your company&#39;s business hours.</apex:outputLink>
                        </apex:outputText>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                
                <apex:pageBlockSectionItem >
                    <apex:outputLabel >Organization Wide</apex:outputLabel>
                    <apex:outputPanel layout="block">
                        <apex:inputCheckbox value="{!caseFlagCustomSetting.Organisation_Wide__c}">
                            <apex:actionSupport event="onchange" action="{!organizationWideChange}"/>
                        </apex:inputCheckbox>
                        <br/>
                        When enabled, all cases in the organization will be processed by Case Flags. If this option is disabled, you can set up workflow or an Apex trigger to set the "Enable Case Flags" checkbox field to true, based on criteria, for cases that should be processed.
                        <!--        </apex:outputPanel>
</apex:pageBlockSectionItem>

<apex:pageBlockSectionItem >-->
                        <c:AH_MultiselectPicklist leftLabel="Available Active Record Types" 
                                                  leftOptions="{!remRecTypes}" 
                                                  rightLabel="Selected Record Types" 
                                                  rightOptions="{!selectedRecTypes}" 
                                                  size="14" 
                                                  width="150px"/>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
            </apex:pageblockSection>
            
            <apex:pageBlockSection id="advanceSetupSection" columns="1" title="Optional Setup" >
                <apex:pageBlockSectionItem helpText="Enter the domain from which your company's email is sent. This is used to distinguish between emails from your users and those from customers when setting or clearing the flag. For a complete description of the behavior, refer to the Event Rules section below.">
                    <apex:outputLabel value="Company Domain"/>
                    <apex:inputField value="{!caseFlagCustomSetting.Company_Domain__c}" style="width:220px;"/>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem helpText="A private comment can be added to the case if a trigger cannot update flag fields, usually due to validation rules error.">
                    <apex:outputLabel value="Add Error Comments"/>
                    <apex:inputField value="{!caseFlagCustomSetting.Add_Trigger_Comments__c}"/>
                </apex:pageBlockSectionItem>   
                <!--<apex:pageBlockSectionItem helpText="Apex Future methods will be used to set the custom Business Hours lookup on new cases. It is only necessary to enable this if your organization actively uses multiple sets of business hours and you have escalation rules that switch cases to non-default hours. Note that these jobs will count against certain Salesforce resource usage limits.">
<apex:outputLabel value="Use Jobs to Set Case Hours"/>
<apex:inputField value="{!caseFlagCustomSetting.Use_Future__c}"/>
</apex:pageBlockSectionItem>-->
            </apex:pageBlockSection>
            
            
            <apex:pageBlockSection id="SFDCSetup" columns="2" title="Salesforce Setup">
                <apex:pageBlockSection columns="1">
                    
                    <!-- <apex:pageBlockSectionItem >
<apex:outputLabel value="" />
You must modify your case page layouts and/or case views to use the Case Flags functionality. If you intend to use the age in business hours then you must create a scheduled job as well.
</apex:pageBlockSectionItem> -->
                    
                    <apex:pageBlockSectionItem >
                        <apex:outputLabel value="Page Layout" />
                        <apex:outputPanel >
                            In order to see the flag on the case page, you must add the field to your page layout(s).
                            <p/>
                            1. Go to Setup > Customize > Cases > Page Layouts. <a target="_blank" href="/ui/setup/layout/PageLayouts?type=Case&setupid=CaseLayouts">(click here to go there now)</a><br/>
                            2. Choose &quot;Edit&quot; next to the layout(s) you want to update. <br/>
                            3. Locate the &quot;Flag<!--{!addBH}-->&quot; field and drag it onto your layout. <br/>
                            4. Optional: Locate the Initial Response and Initial Response<!--{!addBusiness}--> Hours fields, and drag them onto your layout(s).
                            <p/>
                            Optional: Two custom buttons are available to manually clear and set the flag.
                            <p/>
                            1. While still on the case page layout, click &quot;Buttons&quot; on the left, then drag and drop the &quot;Clear Flag&quot; and &quot;Set Flag&quot; buttons to the &quot;Custom Buttons&quot; area of the page layout.  <br/>
                            2. Click &quot;Save&quot;.<br/>
                            3. To grant profiles the ability to manually Clear a flag via a custom button on the case page, <!--<a href="/_ui/perms/ui/profile/ApexPageProfilePermissionEdit/e?apex_id={!ClearFlagPageId}&apex_name=FlagClear&apex_namespace=FLAGS&save_button=has_save_button&setupid=ApexPages" target="_blank">click here and move desired profiles to the Enabled box.</a>--><br/>
                            4. To grant profiles the ability to manually Set a flag via a custom button, <!--<a href="/_ui/perms/ui/profile/ApexPageProfilePermissionEdit/e?apex_id={!SetFlagPageId}&apex_name=FlagNow&apex_namespace=FLAGS&save_button=has_save_button&setupid=ApexPages" target="_blank">click here and move desired profiles to the Enabled box.</a>-->
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    
                    <apex:pageBlockSectionItem >
                        <apex:outputLabel value="List Views" />
                        <apex:outputPanel >
                            
                            The flag field can also be added to your case list views.
                            <p/>
                            1. While displaying a case view, click &quot;Edit&quot; above the header bar to enter the view setup tool. <br/>
                            2. In the &quot;Available Fields&quot; box, select the &quot;Flag<!--{!addBH}-->&quot; item and click the &quot;Add&quot; arrow. Position the field using the arrows to the right of the &quot;Selected Fields&quot; box.<br/>
                            3. Click &quot;Save&quot;.<br/>
                            <p/>
                            Optional: Two custom buttons are available to clear and set the flags on multiple cases from list views. (Note: All users will have access to set and clear flags via these buttons.)
                            <p/>
                            1. <a target="_blank" href="/ui/setup/layout/ListLayouts?type=Case&setupid=CaseSearchLayouts">Click here to open Case Search Layouts.</a><br/>
                            2. Edit Cases List View or Search Results and then move &quot;Set Flags&quot; and &quot;Clear Flags&quot; into the &quot;Selected Buttons&quot; panel.
                            
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    
                </apex:pageBlockSection>
                <apex:outputPanel >
                    <!--<apex:image value="{!URLFOR($Resource.Case_Flags_Assets,'case-flags-assets/case-detail.png') }" style="float:right;"/>

<apex:image value="{!URLFOR($Resource.Case_Flags_Assets,'case-flags-assets/list-view.png') }" style="float:right;margin-top:100px;"/>-->
                </apex:outputPanel>
            </apex:pageBlockSection>
            
            
            <apex:pageBlockSection id="flagSection" columns="2" title="Flag Icons and Default Hours">
                <apex:pageBlockSection columns="1">
                    <apex:pageBlockSectionItem >
                        <apex:outputLabel value="" />
                        Choose the flag icons and when to set them.
                    </apex:pageBlockSectionItem>          
                    <apex:pageBlockSectionItem >
                        <apex:outputLabel value="Flag 1"/>
                        <apex:outputPanel id="list2">
                            <apex:image value="/servlet/servlet.FileDownload?file={!caseFlagCustomSetting.Age_1_Image__c}" style="margin-right:5px;"/>
                            After <apex:inputField value="{!caseFlagCustomSetting.Age_1_Hours__c}" style="margin-left:5px;margin-right:5px;width:40px;"/> Hours        
                            <apex:selectList multiselect="false" size="1" onchange="refreshPage();" style="margin-left:20px;" value="{!caseFlagCustomSetting.Age_1_Image__c}">
                                <apex:selectOptions value="{!flagOptions}"/>
                            </apex:selectList>
                            <apex:inputField value="{!caseFlagCustomSetting.Age_1_Image__c}" rendered="false"/>
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem >
                        <apex:outputLabel value="Flag 2"/>
                        <apex:outputPanel id="list3">
                            <apex:image value="/servlet/servlet.FileDownload?file={!caseFlagCustomSetting.Age_2_Image__c}" style="margin-right:5px;"/>
                            After <apex:inputField value="{!caseFlagCustomSetting.Age_2_Hours__c}" style="margin-left:5px;margin-right:5px;width:40px;"/> Hours        
                            <apex:selectList multiselect="false" size="1" onchange="refreshPage();" style="margin-left:20px;" value="{!caseFlagCustomSetting.Age_2_Image__c}">
                                <apex:selectOptions value="{!flagOptions}"/>
                            </apex:selectList>
                            <apex:inputField value="{!caseFlagCustomSetting.Age_2_Image__c}" rendered="false"/>
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem >
                        <apex:outputLabel value="Flag 3"/>
                        <apex:outputPanel id="list4">
                            <apex:image value="/servlet/servlet.FileDownload?file={!caseFlagCustomSetting.Age_3_Image__c}" style="margin-right:5px;"/>
                            After <apex:inputField value="{!caseFlagCustomSetting.Age_3_Hours__c}" style="margin-left:5px;margin-right:5px;width:40px;"/> Hours        
                            <apex:selectList multiselect="false" size="1" onchange="refreshPage();" style="margin-left:20px;" value="{!caseFlagCustomSetting.Age_3_Image__c}">
                                <apex:selectOptions value="{!flagOptions}"/>
                            </apex:selectList>
                            <apex:inputField value="{!caseFlagCustomSetting.Age_3_Image__c}" rendered="false"/>
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem >
                        <apex:outputLabel value="Flag 4"/>
                        <apex:outputPanel id="list5">
                            <apex:image value="/servlet/servlet.FileDownload?file={!caseFlagCustomSetting.Age_4_Image__c}" style="margin-right:5px;"/>
                            After <apex:inputField value="{!caseFlagCustomSetting.Age_4_Hours__c}" style="margin-left:5px;margin-right:5px;width:40px;"/> Hours        
                            <apex:selectList multiselect="false" size="1" onchange="refreshPage();" style="margin-left:20px;" value="{!caseFlagCustomSetting.Age_4_Image__c}">
                                <apex:selectOptions value="{!flagOptions}"/>
                            </apex:selectList>
                            <apex:inputField value="{!caseFlagCustomSetting.Age_4_Image__c}" rendered="false"/>
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem >
                        <apex:outputLabel value="" />
                        You may also add custom icons by uploading them to the Case Flags Documents folder in the Documents tab. Image files should be either GIF or PNG and 16x16. After uploading graphic files to Documents, you must refresh this page to be able to select them. <!--<a href="/015?fcf={!ImageFolderId}" target="_blank">Click here to add custom icons</a>-->.
                    </apex:pageBlockSectionItem>
                </apex:pageBlockSection>
                <apex:outputPanel >
                    <!--<apex:image value="{!URLFOR($Resource.Case_Flags_Assets,'case-flags-assets/flag-example.png') }" style="float:right;"/>-->
                </apex:outputPanel>
            </apex:pageBlockSection>
            
            
            
            <apex:pageBlockSection id="pbsEventRules" columns="2" title="Event Rules">
                <apex:pageBlockSection id="pbsEventRulesLeft" columns="1">
                    <apex:pageBlockSectionItem >
                        <apex:outputLabel >Case Open / Close</apex:outputLabel>
                        <apex:outputPanel styleClass="seeMore">
                            <apex:inputField id="setOnCCreate" value="{!caseFlagCustomSetting.Set_On_Case_Create__c}"/> 
                            <apex:outputLabel for="setOnCCreate"><strong>Set Flag on Case Creation</strong></apex:outputLabel> <br/>
                            Select if you want the case flag to automatically be set when a new case is created. <br/>
                            <div style="width:60px;"><u>See Logic</u><span>Case is created.</span></div>
                            <br/><br/>
                            <apex:inputField id="clearOnCClose" value="{!caseFlagCustomSetting.Clear_On_Case_Close__c}"/> 
                            <apex:outputLabel for="clearOnCClose"><strong>Clear Flag on Case Close</strong></apex:outputLabel> <br/>
                            Select if you want the case flag to automatically clear when the case has been closed.<br/>
                            <div style="width:60px;"><u>See Logic</u><span>Case is updated to have a closed status.</span></div>
                            <br/><br/>
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem >
                        <apex:outputLabel >Email to Case</apex:outputLabel>
                        <apex:outputPanel styleClass="seeMore">
                            <apex:inputField id="setOnInbound" value="{!caseFlagCustomSetting.Set_On_Inbound_Email__c}"/> 
                            <apex:outputLabel for="setOnInbound"><strong>Set Flag on Inbound Email</strong></apex:outputLabel> <br/>
                            Select if you want the case flag to automatically be set after a customer has sent an email to the case.<br/>
                            <div style="width:60px;"><u>See Logic</u><span>Inbound equals True<br/>Email domain not equal to company domain (if supplied)</span></div>
                            <br/><br/>
                            <apex:inputField id="clearOnOutbond" value="{!caseFlagCustomSetting.Clear_on_Outbound_Email__c}"/> 
                            <apex:outputLabel for="clearOnOutbond"><strong>Clear Flag on Outbound Email</strong></apex:outputLabel> <br/>
                            Select if you want the case flag to automatically clear after a user has sent an email to the customer.<br/>
                            <div style="width:60px;"><u>See Logic</u><span>Inbound equals False<br/>Email domain equals company domain (if supplied)</span></div>
                            <br/><br/>
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem id="pbsiWebPortal">
                        <apex:outputLabel >Communities &amp; Portals</apex:outputLabel>
                        <apex:outputPanel styleClass="seeMore">
                            <apex:inputField id="setOnCustComment" value="{!caseFlagCustomSetting.Set_On_Customer_Comment__c}" onchange="updateExamineCommentCompanyDomain();"/> 
                            <apex:outputLabel for="setOnCustComment"><strong>Set Flag on Customer or Partner Comment</strong></apex:outputLabel> <br/>
                            Select if you are using either the Customer / Partner Communities or Portals or the Self Service Portal, and would like the flag set on cases when an external user adds a comment.<br/>
                            <div style="width:80px;"><u>See Logic</u><span>Public equals True<br/>UserType not equal to &quot;Standard&quot; OR Self-service user equals true OR user is listed in API User list above</span></div>
                            <br/><br/>
                            <!--<span id="examineCommentCompanyDomainWrapper" style="padding-left: 32px; display:block;">
<apex:inputField id="examineCommentCompanyDomain" value="{!caseFlagCustomSetting.Clear_On_Company_Comment__c}"/> 
<apex:outputLabel for="examineCommentCompanyDomain"><strong>Exclude Comments with Company Domain</strong></apex:outputLabel> <br/>
Select if Case Flags is being used in conjunction with Email to Case Premium.<br/>
<div style="width:60px;"><u>See Logic</u><span>Description contains &quot;From: &lt;{!IF(caseFlagCustomSetting.Company_Domain__c <> '', 'someone@' & caseFlagCustomSetting.Company_Domain__c, 'someone@company-domain-set-above.com')}&gt;&quot;</span></div>
</span>
<br/><br/>-->
                            <apex:inputField id="clearOnUserComment" value="{!caseFlagCustomSetting.Clear_On_Company_Comment__c}"/> 
                            <apex:outputLabel for="clearOnUserComment"><strong>Clear Flag on User Comment</strong></apex:outputLabel> <br/>
                            Select if you are using either the Customer / Partner Communities or Portals or the Self Service Portal, and would like the flag cleared when an internal user adds a comment.<br/>
                            <div style="width:80px;"><u>See Logic</u><span>Public equals True<br/>UserType equals &quot;Standard&quot; OR Self-service user equals False<br/> CreatedBy Does Not Equal API User(s)</span></div>
                            <br/><br/>
                            <apex:inputField id="setOnEAttachment" value="{!caseFlagCustomSetting.Set_On_Case_Attachment__c}"/>
                            <apex:outputLabel for="setOnEAttachment"><strong>Set Flag on Case Attachment</strong></apex:outputLabel> <br/>
                            Select if you want the case flag to automatically be set when an attachment is added to a case by an external user. <br/>
                            <div style="width:80px;"><u>See Logic</u><span>Attachment added to case AND attachment owner UserType not equal to &quot;Standard&quot;.</span></div>
                            <br/><br/>
                            <!--<apex:inputField id="setOnFile" value="{!caseFlagCustomSetting.Set_On_Case_File__c}"/>
<apex:outputLabel for="setOnFile"><strong>Set Flag on Case File</strong></apex:outputLabel> <br/>
Select if you want the case flag to automatically be set when a file is added to a case by an external user. <br/>
<div style="width:80px;"><u>See Logic</u><span>File added to case AND running user&apos;s UserType not equal to &quot;Standard&quot;.</span></div>
<br/><br/>-->
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem >
                        <apex:outputLabel >Activities</apex:outputLabel>
                        <apex:outputPanel styleClass="seeMore">
                            <apex:inputField id="clearOnActivity" value="{!caseFlagCustomSetting.Clear_on_Activity__c}"/>
                            <apex:outputLabel for="clearOnActivity"><strong>Clear Flag on Activity/Task</strong></apex:outputLabel> <br/>
                            Select if your users log calls by adding activities and the flag should be cleared when a completed activity (task) is added. <br/>
                            Be sure that the Type field on the Task object is visible to all profiles.<br/>
                            <div style="width:100px;"><u>See Logic</u><span>Activity Status is set to Closed = True (defined on the Type Picklist Field Value)<br/>Activity Type = '[Specified Type]'</span></div><br/><br/>
                            <apex:outputLabel for="activityType"><strong>Activity Type</strong></apex:outputLabel><br/>
                            Select the activity type which should clear the flag when completed if clear flag on activity/task is enabled. <br/>
                            <!--<apex:selectList id="activityType" value="{!caseFlagCustomSetting.Enabled_Activity_Type__c}" size="1">
Select the activity type which should clear the flag when completed if clear flag on activity/task is enabled. <br/>
<apex:selectOptions value="{!activityTypeOptions}"/>


</apex:selectList>

</apex:pageBlockSectionItem>
<apex:pageBlockSectionItem >-->
                            
                            <c:AH_MultiselectPicklist leftLabel="Available Activity Types"
                                                      leftOptions="{!RemActTypes}"
                                                      rightLabel="Selected Activity Types"
                                                      rightOptions="{!selectedActTypes}"
                                                      size="14"
                                                      width="150px"/>
                            
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    
                    
                    
                    <apex:pageBlockSectionItem >
                        <apex:outputLabel >Case Origin:</apex:outputLabel>
                        <apex:outputPanel styleClass="seeMore">
                            <apex:inputField id="clearOnCaseOrigin" value="{!caseFlagCustomSetting.Clear_On_Case_Origin__c}"/>
                            <apex:outputLabel for="clearOnCaseOrigin"><strong>Clear Flag on Case Origin</strong></apex:outputLabel> <br/>
                            Select if your users update case origins and the flag should be cleared when selected case origin is updated. <br/>
                            <div style="width:100px;"><u>See Logic</u><span>Case Origin = any one of the following selected types.<br/>Case Origin = '[Specified Type]'</span></div><br/><br/>
                            <apex:outputLabel for="caseOrigin"><strong>Case Origin</strong></apex:outputLabel><br/>
                            
                            
                            <c:AH_MultiselectPicklist leftLabel="Available Case Origins"
                                                      leftOptions="{!remCaseOrigins}"
                                                      rightLabel="Selected Case Origins"
                                                      rightOptions="{!selectedCaseOrigins}"
                                                      size="14" 
                                                      width="150px"/>
                            
                        </apex:outputPanel> 
                    </apex:pageBlockSectionItem>
                    
                    
                </apex:pageBlockSection>
                
                <apex:outputPanel >
                    <!--<apex:image value="{!URLFOR($Resource.Case_Flags_Assets,'case-flags-assets/flag-diagram.png') }" style="float:right;"/>-->
                </apex:outputPanel>
                
            </apex:pageBlockSection>
            
            
            
            <apex:pageBlockSection id="pbsHist" columns="2" title="Case Flags History Tracking">
                <apex:pageBlockSection id="pbsHist1Column" columns="1">
                    <apex:pageBlockSectionItem >
                        <apex:outputLabel value=""/>
                        <apex:outputPanel >
                            Case Flags History Tracking enables you to report on your performance handling
                            cases. For example, you can determine which users respond to customers
                            the fastest (and the slowest).<br/>
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem id="pbsiEnableHistory">
                        <apex:outputLabel value=""/>
                        <apex:outputPanel >
                            <apex:inputField id="enableHistory" value="{!caseFlagCustomSetting.Enable_History__c}" onchange="checkDisableHistoryCBs();"/>
                            <apex:outputLabel for="enableHistory"><strong>Enable Case Flags History</strong></apex:outputLabel>
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem id="pbsiTrackClear">
                        <apex:outputLabel value=""/>
                        <apex:outputPanel styleClass="historySettingIndent">
                            <apex:inputField id="trackClear" value="{!caseFlagCustomSetting.Track_Flag_Clear__c}"/>
                            <apex:outputLabel id="lblTrackClear" for="trackClear"><strong>Track Case Flag Clear</strong></apex:outputLabel>
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem id="pbsiTrackSet">
                        <apex:outputLabel value=""/>
                        <apex:outputPanel styleClass="historySettingIndent">
                            <apex:inputField id="trackSet" value="{!caseFlagCustomSetting.Track_Flag_Set__c}"/>
                            <apex:outputLabel id="lblTrackSet" for="trackSet"><strong>Track Case Flag Set</strong></apex:outputLabel>
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem id="pbsiTrackOwner">
                        <apex:outputLabel value=""/>
                        <apex:outputPanel styleClass="historySettingIndent">
                            <apex:inputField id="trackOwner" value="{!caseFlagCustomSetting.Track_Case_Ownership__c}"/>
                            <apex:outputLabel id="lblTrackOwner" for="trackOwner"><strong>Track Case Ownership Changes</strong></apex:outputLabel>
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem id="pbsiTrackStatus">
                        <apex:outputLabel value=""/>
                        <apex:outputPanel styleClass="historySettingIndent">
                            <apex:inputField id="trackStatus" value="{!caseFlagCustomSetting.Track_Case_Status__c}"/>
                            <apex:outputLabel id="lblTrackStatus" for="trackStatus"><strong>Track Case Status Changes</strong></apex:outputLabel>
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    
                    <!-- <apex:pageBlockSectionItem >

<apex:outputLabel value=""/>
<apex:outputPanel >
In order for Case Flags History Tracking records to be created for Users their profile must have permissions on the object enabled.
<p/>
<span id="sel-sec">
<dl>
<dt>Click <a href="/{!LEFT(sysAdminProfId,15)}" target="_blank">here</a> or go to Administrator <i>Setup</i> | <i>Manage Users</i> | <i>Profiles</i> | <i>System Administrator</i>, then select which User Interface that matches what you see in your org.</dt>

<ul>
<li id="std-sec-li" onclick="selectStandardUI();">
<input id="std-sec-radio" type="radio" name="profileUI"/> <span>Standard Profile User Interface</span>
<img id="std-sec-image" src="{!URLFOR($Resource.Case_Flags_Assets,'case-flags-assets/Standard_Profile_User_Interface.png') }"></img>
</li>
<li id="e-sec-li" onclick="selectEnhancedUI();">
<input id="e-sec-radio" type="radio" name="profileUI"/> <span>Enhanced Profile User Interface</span>
<img id="e-sec-image" src="{!URLFOR($Resource.Case_Flags_Assets,'case-flags-assets/Enhanced_Profile_User_Interface.png') }"></img>
</li>
</ul>
<apex:outputPanel >
<dl id="std-sec">
<dt>Setting Object and Field Level Security with the Standard Profile User Interface.</dt>
1. Go to Setup > Customize > Administration Setup > Manage Users > Profiles. <a target="_blank" href="{!profilesPage}">(click here to go there now)</a><br/>
2. Find the Profile you would like to enable History Tracking for and click on the name.<br/>
3. Click &quot;Edit&quot; at the top of the profile detail page.<br/>
4. Locate the section titled &quot;Custom Object Permissions&quot; and find Case Flags History Tracking within it. Make sure the &quot;Read&quot; and &quot;Create&quot; options are checked and click &quot;Save&quot;.<br/>
5. Locate the section title &quot;Custom Field-Level Security&quot; and find Case Flags History Tracking within it. Click &quot;View&quot; next to it.<br/>
6. Check the &quot;Edit Access&quot; option for each field and click &quot;Save&quot;.
</dl>
<dl id="e-sec">
<dt>Setting Object and Field Level Security with the Enhanced Profile User Interface.</dt>
1. Go to Setup > Customize > Administration Setup > Manage Users > Profiles. <a target="_blank" href="{!profilesPage}">(click here to go there now)</a><br/>
2. Find the Profile you would like to enable History Tracking for and click on the name.<br/>
3. Locate the section title &quot;Apps&quot; and click on &quot;Object Settings&quot; within it. <br/>
4. Find &quot;Case Flags History Tracking&quot; in the list and click on it.<br/>
5. Click &quot;Edit&quot; at the top of the page.<br/>
6. Locate the section titled &quot;Object Permissions&quot; and make sure the &quot;Read&quot; and &quot;Create&quot; options are checked.<br/>
7. Locate the section titled &quot;Field Permissions&quot; and check the &quot;Edit Access&quot; option for each field and click &quot;Save&quot;.
</dl>
</apex:outputPanel>
</dl>
</span>
</apex:outputPanel>
</apex:pageBlockSectionItem>-->
                </apex:pageBlockSection>
                <apex:outputPanel />
            </apex:pageBlockSection>
            
            
            
        </apex:pageblock>
        
        
        <script>
        var tagsElem = ".tags",
            autoElem = ".bootstrap-tagsinput input[type='text']";
        
        $(tagsElem).tagsinput({itemValue: "id",itemText: "name"});
        $(autoElem).autocomplete({
            minLength: 2,
            delay: 500,
            source: function(request, response) {
                var users = [];
                var queryTerm = $.trim(request.term);
                if (queryTerm.length < 2)
                    $(autoElem).autocomplete("close");
                else {
                    sforce.connection.sessionId = "{!$Api.Session_Id}";
                    var records = sforce.connection.query("SELECT Id,Name FROM User WHERE IsActive = true AND UserType = 'Standard' AND Name LIKE '%"+queryTerm+"%' ORDER BY Name ASC LIMIT 10").getArray("records");
                    for (var i = 0;i < records.length;i++)
                        users.push({label: records[i].Name,value: records[i].Id});
                    
                    if ((queryTerm.length == 15 || queryTerm.length == 18) && queryTerm.indexOf('005') == 0) {
                        try {
                            records = sforce.connection.query("SELECT Id,Name FROM User WHERE IsActive = true AND UserType = 'Standard' AND Id = '"+queryTerm+"' LIMIT 1").getArray("records");
                            if (records.length == 1)
                                users.push({label: records[0].Name,value: records[0].Id});
                        } catch(e) {}
                    }
                }
                response(users);
            },
            focus: function(event, ui) {
                return false;
            },
            select: function(event, ui) {
                $(tagsElem).tagsinput('add', { "id": ui.item.value, "name": ui.item.label});
                event.target.value = '';
                $(autoElem).autocomplete("close");
                return false;
            }
        });
        
        function preventEnter(e) {
            var keyCode = window.event ? window.event.keyCode : e.which;
            console.log(keyCode);
            if (keyCode == 13) {
                e.preventDefault();
            }
        }
        
        $(autoElem).keypress(preventEnter);
        
        <apex:repeat value="{!excludedUsers}" var="u">
            $(tagsElem).tagsinput('add', { "id": "{!u.Id}", "name": "{!u.Name}"});
        </apex:repeat>
        </script>    
        
    </apex:form>
</apex:page>