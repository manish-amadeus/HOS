<apex:page sidebar="false" controller="NI_KanbanDashboard">
    <head>
        <apex:includescript value="{!URLFOR($Resource.datatables, '/datatables/js/jquery-1.12.3.min.js')}" />
        <apex:includescript value="{!URLFOR($Resource.datatables, '/datatables/js/jquery.dataTables.min.js')}" />
        <apex:stylesheet value="{!URLFOR($Resource.datatables, '/datatables/css/jquery.dataTables.min.css')}" />
        <apex:stylesheet value="{!URLFOR($Resource.datatables, '/datatables/css/custom_datatable.css')}" />        
        
        <apex:includescript value="{!URLFOR($Resource.KanbanDashboardRes, '/js.cookie.js')}" />
        <apex:stylesheet value="{!URLFOR($Resource.KanbanDashboardRes, '/bootstrap.min.css')}" />
        <apex:includescript value="{!URLFOR($Resource.KanbanDashboardRes, '/bootstrap.min.js')}" />
        <apex:includescript value="{!URLFOR($Resource.KanbanDashboardRes, '/jquery-ui.js')}" />
        <apex:stylesheet value="{!URLFOR($Resource.KanbanDashboardRes, '/jquery-ui.css')}" />
        <apex:stylesheet value="{!URLFOR($Resource.KanbanDashboardRes, '/bootstrap-toggle.min.css')}" />
        <apex:includescript value="{!URLFOR($Resource.KanbanDashboardRes, '/bootstrap-toggle.min.js')}" /> 

        <style>
            a {
                cursor: pointer;
                color: #3174c7;
                text-decoration: none;
            }

            .togglediv {
                font-size: 12px;
            }

            div.task {
                overflow: hidden;
                width: 190px;
                border-left: solid 5px #038116;
                border-top: solid 1px #B9B9B9;
                border-right: solid 1px #B9B9B9;
                border-bottom: solid 1px #B9B9B9;
                background-color: #DDF6E1;
                padding: 5px;
                margin: 5px 0;
                min-height: 40px;
                border-radius: 3px;
                -webkit-border-radius: 3px;
                -moz-box-shadow: 2px 2px 1px #cdcdcd;
                -webkit-box-shadow: 2px 2px 1px #cdcdcd;
                box-shadow: 2px 2px 1px #cdcdcd;
                cursor: move;
            }

            div.projectpb {
                overflow: hidden;
                width: 190px;
                border-left: solid 5px #049B97;
                border-top: solid 1px #B9B9B9;
                border-right: solid 1px #B9B9B9;
                border-bottom: solid 1px #B9B9B9;
                background-color: #CAFBFA;
                padding: 5px;
                margin: 5px 0;
                min-height: 40px;
                border-radius: 3px;
                -webkit-border-radius: 3px;
                -moz-box-shadow: 2px 2px 1px #cdcdcd;
                -webkit-box-shadow: 2px 2px 1px #cdcdcd;
                box-shadow: 2px 2px 1px #cdcdcd;
                cursor: move;
            }

            div.task.analysis {
                border-left-color: grey;
            }
            /*div.task.documentation {
                border-left-color: grey;
            }*/
            div.name {
                font-size: 12px;
                font-weight: bold;
                padding-right: 4px;
                /*float: left;*/
            }

            div.title {
                font-size: 12px;
            }

            div.description {
                font-size: 10px;
                font-style: italic;
            }

            div.task .edit, div.task .view {
                float: right;
                padding: 0px;
            }

            div.projectpb .edit, div.projectpb .view {
                float: right;
                padding: 0px;
            }

            body .btn {
                border: 0;
            }

            table.dataTable tbody td {
                vertical-align: top;
            }

            div.dataTables_wrapper {
                width: 100%;
                margin: 0 auto;
            }
            body {
                font-size: 12px;
            }
        </style>
        <script>



        </script>
    </head>
    <body>
        <div class="container-fluid">
            <h3>
                <span class="iconChoice"><img src="/img/icon/console32.png" /></span>&nbsp;Kanban Dashboard

            </h3>

            <div class="form-vertical" style="width:1000px;align:left;">
                <div class="form-group">
                    <label class="col-xs-2">Record Type:</label>
                    <div class="col-xs-2">
                        <select id="recordTypes" class="form-control" name="browsers">
                            <option value="IT Projects">IT Projects</option>
                            <option value="Network Team">Network Team</option>
                            <option value="Security">Security</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-xs-1 control-label">Team:</label>
                    <div class="col-xs-3 ">
                        <select id="Teams" class="form-control" name="browsers" multiple="multiple" style="height:70px">
                            <option value="Business Systems Team">Business Systems Team</option>
                            <option value="Network Team">Network Team</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    <button type="Go" id="go" class="btn1 btn1-default" style="margin:5px;border:1px;">Go</button>
                </div>
            </div>
        </div>

        <br />
        <div id="mainContainers">
            <div class="container-fluid">
                <div id="NITeamdiv" class="panel-group">

                    <!-- other table for team -->
                    <!-- team table end -->
                </div>
                <!-- Modal -->
                <div class="modal fade" id="taskModal" role="dialog">
                    <div class="modal-dialog" style="padding-top:15%">
                        <!-- Modal content-->
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                                <h4 class="modal-title">Project Title</h4>
                            </div>
                            <div class="modal-body">
                                <p>Project Description</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- End Modal -->
            </div>
        </div>
        <div id="main"></div>
        <div id="error"></div>
        <div id="dialog-form"></div>
        <div id="reasonData"></div>
        <div id="msg"></div>
        <div id="dashboardData" style="display: none"></div>
        <script>
          function ToggleLink(varThis){
	            var str;
	            str = varThis.text();
	            if(varThis.attr('atoggle') == "1"){
		            str = str.replace("+", "-");
		            varThis.attr('atoggle',"0");
	            } else{
		            str = str.replace("-", "+");
		            varThis.attr('atoggle',"1");
	            }
	            varThis.text(str)	;

            }


 function showTaskTable(divId){
                if($("#displayTask-"+divId).is(':checked')){

                 /* $("#outterPBDIV-"+divId).each(function(index){
                  $(this).style = "display:none";
                    });
                 */
                    console.log('before class');
                    $(".outterPBDIV-"+divId).hide();
                  /* $(".outterPBDIV-0 projectpb cell documentation ui-sortable-handle").each(function(index){
                       console.log(".outterPBDIV-0 projectpb cell documentation ui-sortable-handle");
                      $(this).style = "display:none";
                    });*/

                    console.log('after class');
                $("#outterTaskDIV-" + divId).draggable({
                    containment: "#outterTaskDIV-"+divId,
               });

                   $("#outterTaskDIV-"+divId).attr("style","display:block");
                   $("#outterTaskDIV-"+divId).parent().attr("class", "ui-sortable");
              }

            else{
                    $(".outterPBDIV-"+divId).show();
                   /*$("#outterPBDIV-"+divId).each(function(index){
                $(this).style = "display:block";

            });*/
                 $("#outterTaskDIV-"+divId).attr("style","display:none");
                   $("#outterTaskDIV-"+divId).parent().attr("class", "statusList ui-sortable");
                }
            }
 function showWarning( err ) {
	            $("#error").attr( 'title', 'Warning!' ).html( "<p>" + err + "</p>" ).dialog({
		            height: 240,
		            modal: true,
		            draggable: false,
		            resizable: false,
		            open: function(event, ui) { $(".ui-dialog-titlebar-close").show(); }
	            });
            }
function storeReason(sender, sid, newStatus,unplannedFlag,interObject, sData ) {

                NI_KanbanDashboard.changeStatus( sid, newStatus,unplannedFlag,interObject,sData, function(result, event) {
				    if( event.status ) {
					   $("#dialog-form").dialog('close');
				    } else {
					    // move the task back from whence it came
                        $("#dialog-form").dialog('close');
					    sender.sortable('cancel');
					    showWarning( event.message );
				    }
                });


            }


        //Starting JS script
        $(document).ready(function() {
            populateRecordTypes();
            function populateRecordTypes() {
	                // get the project lists
		            NI_KanbanDashboard.getRecordTypes( function(result, event) {
        	            if (event.status) {
        	            // clear out the sprint list
        		            $('#recordTypes').removeAttr( 'disabled' ).find('option').remove().end();

        	            if( result.length == 0 ) {
        			            $('#recordTypes').append( '<option value="nowt">No Sprints</option>' ).attr( 'disabled', 'disabled' );
        	            }
        	            else {
				            var canPrime = false;
				            var primedSprintId = undefined;

        		            $('#recordTypes').append('<option value="" selected>Choose a record type</option>');
        		            $.each(result, function(index, sprint) {
            		            $('#recordTypes').append('<option value="' + sprint.Record_Type_Name__c + '">' + sprint.Record_Type_Name__c + '</option>');
					            if( primedSprintId !== undefined && sprint.Id.substring( 0, 15 ) == primedSprintId ) {
						            // need to use the full long Id
						            primedSprintId = sprint.Id;
						            canPrime = true;
					            }
            	            });
                        }
                    } else {
        	            showError( event.message );
                    }
                }, {escape:true});
            }

            NI_KanbanDashboard.getTeams( function( result, event ) {
		        if (event.status) {
        	        // clear out the sprint list
        	        $('#Teams').removeAttr( 'disabled' ).find('option').remove().end();

        	        if( result.length == 0 ) {
        		        $('#Teams').append( '<option value="nowt">No Teams</option>' ).attr( 'disabled', 'disabled' );
        	        }
        	        else {
        		       // $('#Teams').append('<option value="" selected>-- All teams --</option>');
        		        $.each(result, function(index, team) {
            		        $('#Teams').append('<option value="' + team + '">' + team + '</option>');
            	        });

                        var myTeam = Cookies.get('last_team');
                        if( myTeam != null ) {
                            //$j('#Teams').val( myTeam );
                            Cookies.set('last_team',$('#Teams').val());
                        }
                    }
                } else {
        	        showError( event.message );
                }
	        });

            $('#go').on( 'click', function (e) {
                console.log('loading dashboard');
                loadDashboard();
            });

            function loadDashboard() {
	            var recordtypes = $('#recordTypes').val();
                Cookies.set( 'last_team',$('#Teams').val());
	            var selectedTeams = Cookies.get( 'last_team' );

                console.log('selectedTeams ' + selectedTeams);
	            if( recordtypes == '' ) {
		            return;
	            }

	            // clear out the main
	            $('#main').empty();

	            showMsg( 'Loading...', 'The dashboard is currently being loaded...', true );
	            NI_KanbanDashboard.getDashboard( recordtypes, selectedTeams, loadedDashboard );
            }
            function loadedDashboard(result,event){
                if( event.status ) {


                    result = result.replace(/(&quot\;)/g,"\"");
                   // result = result.replace(/&quot;/g, "\"");
                    result = $.parseJSON(result);

                        storeData( result );
                        loadJSKanbanBoard();
                        enableDragging();







                } else{
                    $('#NITeamdiv').empty();
                    showError( event.message );
                }
                hideMsg();
            }
            function showMsg( title, msg, isBusy ) {
	            if( isBusy ) msg = '<img style="vertical-align:middle;" src="/img/loading.gif" alt="" /> ' + msg;
	            $('#msg').attr( 'title', title ).html( '<p>' + msg + '</p>' ).dialog({
		            autoOpen: true,
		            height: 140,
		            modal: true,
		            draggable: false,
		            resizable: false,
		            closeOnEscape: false,
		            open: function(event, ui) { $(".ui-dialog-titlebar-close").hide(); }
	            }).dialog( 'open' );
            }
            function hideMsg() {
	            $('#msg').dialog( 'close' );
            }
            function storeData( sData ) {
	            var dbState = $('#dashboardData').data( 'dbState' );
	            if( dbState === undefined ) {
		            dbState = [];
	            }
	            dbState = sData;
	            $('#dashboardData').data( 'dbState', dbState );
            }



            //Used for displaying the DIV of the Project Backlog
            function getPbacklog(outer,iNo){
                var str = "";
                lstTeams = outer.split('-');
                var dbPBitems = $('#dashboardData').data( 'dbState' ).dbPBitems[0][lstTeams[0]];
                if(dbPBitems !==undefined && dbPBitems[lstTeams[1]] !== undefined)
                 $.each(dbPBitems[lstTeams[1]], function(i,j){
                    str += preparePBacklog(j,iNo);
                 });
		        return str;
            }
            function preparePBacklog(objPB, iNo){

                var classStr = '';
                if(iNo != null)
                    classStr = 'outterPBDIV-'+ iNo;
                var str = '<div class="'+ classStr +' projectpb cell documentation ui-sortable-handle" id="'+ objPB.Id +'">'+
                           '<div class="name">'+ objPB.Name +'</div>'+
                           '<div class="title">Functional Area:<i>'+ objPB.Beneficiaries__c +'</i></div>'+
                           '<div class="title">Priority:<i>'+ objPB.Prioritization_Score__c +'</i></div>';
                            if(objPB.Sponsor__r != null && objPB.Sponsor__r.Name != null)
                                str += '<div class="title">Sponsor:<i>'+ objPB.Sponsor__r.Name +'</i></div>';
                            else
                                str += '<div class="title">Sponsor:<i>-</i></div>';
                           str += '<div class="view"><a href="/'+ objPB.Id +'" target="_blank" title="View"><img src="/img/icon/contracts16.png"></a></div></div>';
		        return str;
            }
            // Used for displaying the DIV of the Task
            function getTaskDetails(outer,taskType){
                var str = "";
                lstTeams = outer.split('-');
                var dbPBTaskitems;
                if(taskType == 'unplanned')
                    dbPBTaskitems = $('#dashboardData').data( 'dbState' ).dbPBUnplannedTaskitems[0][lstTeams[0]];
                else
                    dbPBTaskitems = $('#dashboardData').data( 'dbState' ).dbPBTaskitems[0][lstTeams[0]];
                if(dbPBTaskitems !==undefined && dbPBTaskitems[lstTeams[1]] !== undefined)
                 $.each(dbPBTaskitems[lstTeams[1]], function(i,j){
                    str += prepareTaskDiv(j);
                 });

                //var str = "<div class=\"task cell documentation ui-sortable-handle\" id=\"a036F00000oygaWQAQ\"><div class=\"title\">"+ outer +"</div><div class=\"description\">And a test description</div><div class=\"view\"><a href=\"/a036F00000oygaSQAQ\" target=\"_blank\" title=\"View\"><img src=\"\/img\/icon\/contracts16.png\"></a></div></div>";
		        return str;
            }
            function prepareTaskDiv(objTask){

                 if(objTask.Committed__c){
                    strCommited = '<div class="title">Commited:<img src="/img/checkbox_checked.gif" alt="Checked" width="21" height="16" title="Checked"></div>';
                 }else{
                    strCommited = '<div class="title">Commited:<img src="/img/checkbox_unchecked.gif" alt="Not Checked" width="21" height="16"  title="Not Checked"></div>';
                    }
                 var str = "<div class=\"task cell documentation ui-sortable-handle\" id=\""+ objTask.Id +"\">"+
                            "<div class=\"name\">"+ objTask.NI_Project_Backlog_Item__r.Name +"</div>"+
                            "<div class=\"title\">Assinged To:<i>"+ objTask.Assigned_To__r.Name+"</i></div>"+
                            strCommited +
                            "<div class=\"title\">Status:<i>"+  objTask.Status__c +"</i></div>"+
                            "<div class=\"view\"><a href=\"/"+ objTask.Id +"\" target=\"_blank\" title=\"View\"><img src=\"\/img\/icon\/contracts16.png\"></a></div></div>";
		        return str;
            }


            // Used for display/hide the columns of the main table.
            function toggleHeaders (iNo,mainTableCols,tblname){
			    var containerBody ='<div id="outterToggle-'+ tblname +'" class="togglediv">Toggle column:';

			    for(i=0 ;i< mainTableCols.length; i++){
					    containerBody += ' <a class="toggle-vis" cyb-table="'+ tblname +'" data-column="'+ i +'" atoggle="0" onClick="ToggleLink($(this))">';
					    //containerBody +='<div class="toggle btn btn-xs btn-default off" data-toggle="toggle" style="width: 110px; height: 22px;">'
				        // containerBody +='<input type="checkbox" checked="checked" class="toggle-vis" data-toggle="toggle" data-on="'+ mainTableCols[i].title +' -" data-off="'+ mainTableCols[i].title +' +" data-size="mini" data-onstyle="default" data-width="110px" />';
					    //containerBody +='<div class="toggle-group"><label class="btn btn-default btn-xs toggle-on">'+ mainTableCols[i].title +' +</label><label class="btn btn-default btn-xs active toggle-off">'+ mainTableCols[i].title +' -</label><span class="toggle-handle btn btn-default btn-xs"></span></div></div>'
					    containerBody +=  mainTableCols[i].title +' [-]</a>  ';

			    }
			    containerBody += '</div>';
			    return containerBody;
            }

            function loadJSKanbanBoard(){
                        var dbState = $('#dashboardData').data( 'dbState' );
                        if(dbState !== undefined){
                             // Used for data holding the values for inner table
                                var innerDataSet = $('#dashboardData').data( 'dbState' ).innerDataSet;
                                $.each(innerDataSet,function(i,j){
                                    $.each(j,function(l,k){
                                        $.each(k,function(m,n){
                                            innerDataSet[i][l][m] = getTaskDetails(n,'');
                                        });
                                    });
                                });

		                        // Used for data holding for unplanned data set
                                 var innerUnplannedDataSet = $('#dashboardData').data( 'dbState' ).innerUnplannedDataSet;
                                 $.each(innerUnplannedDataSet,function(i,j){
                                    $.each(j,function(l,k){
                                        $.each(k,function(m,n){
                                            innerUnplannedDataSet[i][l][m] = getTaskDetails(n,'unplanned');
                                        });
                                    });
                                });


                                 var isDragEnableBoolean = $('#dashboardData').data( 'dbState' ).isDragEnable
                                // Used for data holding column values of main table
                                 var mainTableCols = $('#dashboardData').data( 'dbState' ).mainTableCols;

                                // Used for data holding column values of inner table.
                                 var innerTableCols = $('#dashboardData').data( 'dbState' ).innerTableCols;

                                // Used for data holding column values of unplanned table.
                                 var unplannedTableCols = $('#dashboardData').data( 'dbState' ).unplannedTableCols;

                                // Data set of then main / outer table.
                                var dataSet = $('#dashboardData').data( 'dbState' ).dataSet;
                                    $.each(dataSet,function(i,j){
                                        $.each(j,function(l,k){
                                            $.each(k,function(m,n){
                                                if(n.indexOf("In Progress") != -1){ //n == "InProgress"
                                                    dataSet[i][l][m] = '<div id="outterTaskDIV-'+i+'" style="display:none">' + toggleHeaders('0',innerTableCols[i],'CybTableInner-'+i)+ "<table id=\"CybTableInner-"+ i +"\" class=\"display\" cellspacing=\"0\" width=\"100%\"></table><table id=\"unplan-"+ i +"\" class=\"display\" cellspacing=\"0\" width=\"100%\"><thead><tr><th>Unplanned</th></tr></thead></table><table id=\"Unplanned-table-"+ i +"\" class=\"display\" cellspacing=\"0\" width=\"100%\"></table></div>";
                                                    dataSet[i][l][m] += getPbacklog(n,i);//'<span id="outterPBDIV-'+i+'">' + getPbacklog(n) + '</span>';
                                                } else {
                                                    dataSet[i][l][m] = getPbacklog(n,null);
                                                }
                                            });
                                        });
                                    });


                                // Table array holding all data tables
                                var table = new Array();
                                var selectedTeams = Cookies.get( 'last_team' );
                                    selectedTeams = selectedTeams.replace(/\"/g,"");
                                    selectedTeams = selectedTeams.replace("[","").replace("]","");
                                var lstTeam = selectedTeams.split(',');
                                var getTeamTable = function(iNo){
                                    var containerBody = '<div id="TeamContainer-'+ iNo +'" class="panel panel-default"><div class="panel-heading"><h4 class="panel-title"><a data-toggle="collapse" class="testclass" id="collapsetag'+ iNo +'" href="#collapse'+ iNo +'">'+lstTeam[iNo]+' Team</a></h4>';
                                        if($('#dashboardData').data( 'dbState' ).isDisplayTask)
                                            containerBody += '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Display Tasks <input type="checkbox" id="displayTask-'+ iNo +'" onChange="showTaskTable('+ iNo +')"/>';
                                        containerBody += '</div><div id="collapse'+ iNo +'" class="panel-collapse collapse in"><div class="panel-body">';
                                    //containerBody +='<div id="outterToggle-'+ iNo +'">Toggle column:	';
			                        containerBody += toggleHeaders(iNo,mainTableCols[iNo],'CybTableOuter-'+ iNo);
			                        containerBody += '<div id="CybDivOuter-'+ iNo +'"></div></div></div></div>';
                                    return containerBody;
                                }

                                 $('#NITeamdiv').empty();
                                // Starting point of the script to draw tables class="cell-border"
		                        $.each(dataSet,function(i,j){

			                            $('#NITeamdiv').append(getTeamTable(i));
			                            $('#CybDivOuter-'+i).append("<table id=\"CybTableOuter-"+i+"\" class=\"table table-striped table-bordered\" width=\"100%\"></table><br/><br/>");
		                        });

                                // Adding main outer table
                                $.each($("table[id^='CybTableOuter']"),function(i,j){
			                        table['CybTableOuter-'+i] = $('#CybTableOuter-'+i).DataTable( {
				                        data: dataSet[i],
				                        "paging": false,
				                        "searching": false,
				                        "ordering":false,
				                        "bDeferRender": true,
				                        "info":false,
				                        //"scrollCollapse": true,
                                       // "sScrollX": '100%',
                                        "destroy": true,
				                        columns: mainTableCols[i],
                                        "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                                            if(isDragEnableBoolean)
                                                $(nRow).children().each(function (index, td) {
                                                     $(this).addClass('statusList');
                                                });
                                         }

                                    } );
                                   // table['CybTableOuter-'+i].fnAdjustColumnSizing();
                                });
                                // Adding in-prorcess inner table
		                        $.each($("table[id^='CybTableInner']"),function(i,j){
			                        table['CybTableInner-'+i] = $('#CybTableInner-'+i).DataTable( {
				                        data: innerDataSet[i],
				                        "paging": false,
				                        "searching": false,
				                        "ordering":false,
				                        "bDeferRender": true,
				                        "info":false,
				                      //  "scrollCollapse": true,

				                        columns: innerTableCols[i],
                                        "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                                            if(isDragEnableBoolean)
                                                $(nRow).children().each(function (index, td) {
                                                     $(this).addClass('statusList');
                                                });
                                         }
                                    } );
                                });

                                // Adding unplanned table.
                                $.each($("table[id^='Unplanned-table-']"),function(i,j){
                                    //$('#Unplanned-div-'+i).append('<table id="#Unplanned-table-'+i+'" class="display" cellspacing="0" width="100%"></table>');
                                    table['Unplanned-table-'+i] = $('#Unplanned-table-'+i).DataTable( {
				                        data: innerUnplannedDataSet[i],
				                        "paging": false,
                                        "searching": false,
				                        "ordering":false,
				                        "bDeferRender": true,
				                        "info":false,
				                        "scrollCollapse": true,

                                        columns: unplannedTableCols[i],
                                        "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                                            if(isDragEnableBoolean)
                                                $(nRow).children().each(function (index, td) {
                                                     $(this).addClass('statusList');
                                                });
                                         }
                                    } );
                                });
                                // Adding on click functionality for toggle effect
                                $('a.toggle-vis').on( 'click', function (e) {
			                        e.preventDefault();
			                        var tableNo = $(this).attr('cyb-table')
			                        // Get the column API object
			                        var column = table[tableNo].column( $(this).attr('data-column') );
                                    // Toggle the visibility
			                        column.visible( ! column.visible() );
                                });
                                 // Adding drag drop effect

                        }
                } //End of function JSKanbanboard

            function enableDragging(){
                    $('.statusList').sortable({
                        revert: 0,
		                connectWith: '.statusList',
		                receive: function( event, ui ) {

                            var sourceList = ui.sender;
			                var destList = ui.item.parent();

			                var sourceStoryId = sourceList.parent().parent().parent().attr('id');
			                var destStoryId = destList.parent().parent().parent().attr('id');

                            /*if( sourceStoryId != destStoryId ) {
				                // we only let you move tasks within the same story - no story swapping for now
				                $(ui.sender).sortable('cancel');
				                return;
			                }
							*/
							var newStatus = $('#'+ destStoryId +' th').eq(destList.index()).text();
							var unplannedFlag = false;
							var interObject = false;
							if(destStoryId.includes("Unplanned") && sourceStoryId.includes("CybTableOuter") &&
								destStoryId.substr(destStoryId.length - 1) == sourceStoryId.substr(sourceStoryId.length - 1)){
								newStatus = 'In Progress';
								unplannedFlag = true;
								interObject = true;
								//$('#'+ destStoryId +' th').eq(destList.index()).text();
							}
							else if(destStoryId.includes("CybTableOuter") && sourceStoryId.includes("Unplanned") &&
								destStoryId.substr(destStoryId.length - 1) == sourceStoryId.substr(sourceStoryId.length - 1)){
								interObject = true;
							}
							else if(destStoryId.includes("CybTableOuter") && sourceStoryId.includes("CybTableInner") &&
								destStoryId.substr(destStoryId.length - 1) == sourceStoryId.substr(sourceStoryId.length - 1)){
								interObject = true;
								//newStatus = 'In Progress';
							}
							else if(destStoryId.includes("CybTableInner") && sourceStoryId.includes("Unplanned") &&
								destStoryId.substr(destStoryId.length - 1) == sourceStoryId.substr(sourceStoryId.length - 1)){
								unplannedFlag = false;
								newStatus = 'In Progress';
								interObject = true;
							}
							else if(destStoryId.includes("Unplanned") && sourceStoryId.includes("CybTableInner") &&
								destStoryId.substr(destStoryId.length - 1) == sourceStoryId.substr(sourceStoryId.length - 1)){
								newStatus = 'In Progress';
								interObject = true;
								unplannedFlag = true;
							}
							else if(destStoryId.includes("CybTableInner") && sourceStoryId.includes("CybTableOuter") &&
								destStoryId.substr(destStoryId.length - 1) == sourceStoryId.substr(sourceStoryId.length - 1)){
								interObject = true;
								newStatus = 'In Progress';
							}

                            // If Project Backlog is dropped on Redirected or Blocked section then we need reason for it.
                            if((newStatus == 'Blocked' || newStatus == 'Redirected') && interObject == false){
                                showReasonBox( $(ui.sender), ui.item.attr('id'), newStatus,unplannedFlag,interObject);

                            } else{
                                    NI_KanbanDashboard.changeStatus( ui.item.attr('id'), newStatus,unplannedFlag,interObject, null, function(result, event) {
				                        if( event.status ) {
					                        // do nothing
					                       // loadDashboard();
				                        } else {
					                        // move the task back from whence it came
					                        $(ui.sender).sortable('cancel');
					                        showWarning( event.message );
				                        }
                                    });
                            }
                        }
			        });



            }



             // Function used for setting toggle values of columns on page
            function showError( err ) {
	            $("#error").attr( 'title', 'An error has occurred!' ).html( "<p>" + err + "</p>" ).dialog({
		            height: 140,
		            modal: true,
		            draggable: false,
		            resizable: false,
		            open: function(event, ui) { $(".ui-dialog-titlebar-close").show(); }
	            });
            }

            function showReasonBox( sender, sid, newStatus,unplannedFlag,interObject){
                 var str = '<form><fieldset><label for="name">Enter reason:  </label><input type="text" name="name" id="Rname" value="" style="margin-bottom: 12px;width: 95%;padding: .4em;">'+
                           '<input type="button" id="rbutton" value="Add Reason"  >    </fieldset>  </form>';
                 $("#dialog-form").attr( 'title', 'Need On Hold Reason ' ).html( str ).dialog({
		            height: 240,
		            modal: true,
		            draggable: false,
		            resizable: false,
		            open: function(event, ui) { $(".ui-dialog-titlebar-close").show();},

                    close: function() {                       
                        if(closedialog == 0)
                            localsender.sortable('cancel');
                   }
                    
	            });
                var closedialog = 0;
                var localsender = sender;
                var localSid = sid;
                var localnewStatus = newStatus;
                var localunplannedFlag = unplannedFlag;
                var localinterObject = interObject;

                $("#rbutton").on("click", function(sender, sid, newStatus,unplannedFlag,interObject,event){
                    closedialog = 1;
                    storeReason(localsender, localSid, localnewStatus,localunplannedFlag,localinterObject,document.getElementById('Rname').value );
                });
              
                /*$('#dialog-form').on('dialogclose', function( event) {
                     localsender.sortable('cancel');
                });*/
                //$("#rbutton").click(storeReason(sender, sid, newStatus,unplannedFlag,interObject, document.getElementById('Rname').value));
                //return $('#reasonData').data('reson');
            }

        } );
        </script>
    </body>
</apex:page>