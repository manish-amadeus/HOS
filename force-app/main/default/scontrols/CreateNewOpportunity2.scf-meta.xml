<?xml version="1.0" encoding="UTF-8"?>
<Scontrol xmlns="http://soap.sforce.com/2006/04/metadata">
    <contentSource>HTML</contentSource>
    <encodingKey>UTF-8</encodingKey>
    <fileContent>// SFORCECLIENT.JS
/* 1/23/2006 
 * Copyright (c) 2005, salesforce.com, inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 *    Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 *    following disclaimer.
 *  
 *    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and 
 *    the following disclaimer in the documentation and/or other materials provided with the distribution. 
 *    
 *    Neither the name of salesforce.com, inc. nor the names of its contributors may be used to endorse or 
 *    promote products derived from this software without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED 
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR 
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED 
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 */
/** 
 * @fileoverview The sforceclient.js file is the main interface for using
 * the sforce API from javascript.  Most of the methods exposed in this file
 * very closely match the interfaces described for in the sforce API documentation
 * for the web service.  It will be noted where the two interfaces diverge.
 * {@link http://www.sforce.com/resources/api.jsp Sforce API Documentation}
 *
 */
Sforce = function() {
	this.className = "Sforce";
};
Sforce.ready = true;
Sforce.haveBrowserSupport = false;

if (window && window.document) {
	//get the rest of js files
	Sforce.ready = false;
	var head = document.getElementsByTagName("head")[0];
	var cNodes = head.childNodes;
	var includeBrowser = false;
	getThisPath = function() {
		for (var i=0;i<cNodes.length;i++) {
			if (cNodes[i].nodeType != 3 && cNodes[i].nodeType != 8) {
				if (cNodes[i].tagName.toLowerCase() == "script" ) {
					if (cNodes[i].src.indexOf("sforceclient.js") > -1) {
						if (cNodes[i].src.indexOf("browser=true") > -1)
							includeBrowser = true;
						return cNodes[i].src.substring(0, cNodes[i].src.indexOf("sforceclient.js"));
					}
				}
			}
		}
		return null;
	}
	getTag = function (tagName, fileName) {
		for (var i=0;i<cNodes.length;i++) {
			if (cNodes[i].nodeType != 3 && cNodes[i].nodeType != 8) {
				if (cNodes[i].tagName.toLowerCase() == tagName.toLowerCase()) {
					if (cNodes[i].src != undefined) {
						var filePath = cNodes[i].src;
					} else {
						var filePath = cNodes[i].href;
					}
					if (filePath.indexOf(fileName) > -1) {
						return cNodes[i];
					}
				}
			}
		}
		return null;
	}
	addHeadTag = function(tagName, fileName, useSource, type, rel) {
		var path = src;
		var isLink = false;
		if (tagName.toLowerCase() == "link") {
			path += "css/";
			isLink = true;
		}
		if (useSource == true) {
			path = path + fileName;
		} else {
			path = fileName;
		}
		var tag = getTag(tagName, fileName);
		if (tag == null) {
			var s = document.createElement(tagName);
			if (isLink == true) {
				s.href = path;
			} else {
				s.src = path;
			}
			s.type = type;
			if (rel != undefined) {
				s.rel = rel;
			}
			head.appendChild(s)
		}
	}
		 
	var src = getThisPath();
	if (includeBrowser == true) {
		addHeadTag("script", "browsersupport.js", true, "text/javascript");
		addHeadTag("link", "calendar.css", true, "text/css", "stylesheet");
		//addHeadTag("link", "https://na1.salesforce.com/css/ie_global.css" , false, "text/css", "stylesheet");
	} else {
		Sforce.ready = true;
	}
}

Object.getType =function(instance){return instance.constructor;}
Object._typeName ='Object';
Object.className = 'Object';
Array.className = 'Array';
Sforce.Util = function() {
	this.className = "Util";
};
Sforce.Util.prototype = new Function;
    Sforce.Util.FromIsoDateTime = function(CurDate) {/* Set the fragment expressions*/var S = "[\\-/:.]";var Yr = "((?:1[6-9]|[2-9][0-9])[0-9]{2})";var Mo = S + "((?:1[012])|(?:0[1-9])|[1-9])";var Dy = S + "((?:3[01])|(?:[12][0-9])|(?:0[1-9])|[1-9])";var Hr = "(2[0-4]|[01]?[0-9])";var Mn = S + "([0-5]?[0-9])";var Sd = "(?:" + S + "([0-5]?[0-9])(?:[.,]([0-9]+))?)?";var TZ = "(?:(Z)|(?:([\+\-])(1[012]|[0]?[0-9])(?::?([0-5]?[0-9]))?))?";/* RegEx the input*//* First check: Just date parts (month and day are optional)*//* Second check: Full date plus time (seconds, milliseconds and TimeZone info are optional)*/var TF;if ( TF = new RegExp("^" + Yr + "(?:" + Mo + "(?:" + Dy + ")?)?" + "$").exec(CurDate) ) {} else if ( TF = new RegExp("^" + Yr + Mo + Dy + "T" + Hr + Mn + Sd + TZ + "$").exec(CurDate) ) {};/* If the date couldn't be parsed, return null*/if ( !TF ) {return null;};/* Default the Time Fragments if they're not present*/if ( !TF[2] ) { TF[2] = 1; } else { TF[2] = TF[2] - 1 };if ( !TF[3] ) { TF[3] = 1; };if ( !TF[4] ) { TF[4] = 0; };if ( !TF[5] ) { TF[5] = 0; };if ( !TF[6] ) { TF[6] = 0; };if ( !TF[7] ) { TF[7] = 0; };if ( !TF[8] ) { TF[8] = null };if ( TF[9] != "-" && TF[9] != "+" ) { TF[9] = null; };if ( !TF[10] ) { TF[10] = 0; } else { TF[10] = TF[9] + TF[10]; };if ( !TF[11] ) { TF[11] = 0; } else { TF[11] = TF[9] + TF[11]; };/* If there's no timezone info the data is local time*/if ( !TF[8] && !TF[9] ) {return new Date(TF[1], TF[2], TF[3], TF[4], TF[5], TF[6], TF[7]);};/* If the UTC indicator is set the date is UTC*/if ( TF[8] == "Z" ) {return new Date(Date.UTC(TF[1], TF[2], TF[3], TF[4], TF[5], TF[6],	TF[7]));};/* If the date has a timezone offset */if ( TF[9] == "-" || TF[9] == "+" ) {/* Get current Timezone information*/var CurTZ = new Date().getTimezoneOffset();var CurTZh = TF[10] - ((CurTZ >= 0 ? "-" : "+") + Math.floor(Math.abs(CurTZ) / 60));var CurTZm = TF[11] - ((CurTZ >= 0 ? "-" : "+") + (Math.abs(CurTZ) % 60));/* Return the date*/return new Date(TF[1], TF[2], TF[3], TF[4] - CurTZh, TF[5] - CurTZm, TF[6], TF[7]);};}; 
    Sforce.Util.CalcOffset = function(theDate) {var today = theDate;var year  = today.getFullYear();var hour = today.getHours();var hourUTC = today.getUTCHours();var diff = hour - hourUTC;var hourdifference = Math.abs(diff);var minute = today.getMinutes();var minuteUTC = today.getUTCMinutes();var minutedifference;if (minute != minuteUTC && minuteUTC < 30 && diff < 0) { hourdifference--; }if (minute != minuteUTC && minuteUTC > 30 && diff > 0) { hourdifference--; }if (minute != minuteUTC) {	minutedifference = 30;} else {minutedifference = 0;}if (diff < 0) {return ((hourdifference * 60) + minutedifference) * -1;} else {return (hourdifference * 60) + minutedifference}};
    Sforce.Util.ToIsoDate = function(theDate) {	
        var returnString = theDate.getFullYear();	
        returnString += "-" + (theDate.getMonth() + 1).toString().padLeft("0", 2);	
        returnString += "-" + (theDate.getDate()).toString().padLeft("0", 2);	
        return returnString;
    };
    /**
     * 3/1/2006 DJC - Fixed date calculation to propely calculate date and time for zones in Australia
     * Contribution from Altium
    */
    Sforce.Util.ToIsoDateTime = function(theDate) {
	    var today = theDate;
	    var year  = theDate.getFullYear();
	    var month = theDate.getMonth() + 1;
	    var day  = theDate.getDate();
	    var hour = theDate.getHours();
	    var hourUTC = theDate.getUTCHours();
	    var minute = theDate.getMinutes();
	    var minuteUTC = theDate.getUTCMinutes();
	    var second = theDate.getSeconds();

        /*new functionality to ensure correct timezone 3/1/2006 - courtesy of Altium */
        var utcDateInt = (10000*theDate.getUTCFullYear()) + (100*theDate.getUTCMonth()) + (theDate.getUTCDate());
        var theDateInt = (10000*theDate.getFullYear()) + (100*theDate.getMonth()) + (theDate.getDate());
        
        var dayDifference = theDateInt - utcDateInt
        if (dayDifference != 0) { dayDifference = dayDifference / Math.abs(dayDifference); } //ensure we get either 0,1 or -1
        
        var diff = (hour + (dayDifference * 24)) - hourUTC;

	    var hourdifference = Math.abs(diff);
	    var minutedifference = Math.abs(minute - minuteUTC);
    	
	    if (hourdifference + minutedifference == 0) {
		    timezone = "Z";
	    } else {
		    if (diff > 0) {
			    var pm = "+";
		    } else {
			    var pm = "-";
		    }
		    if (minutedifference < 10) {
			    minutedifference = "0" + minutedifference;
		    }
		    if (hourdifference < 10) { 
			    timezone = pm + "0" + hourdifference + ":" + minutedifference;
		    } else {
			    timezone = pm + hourdifference + ":" + minutedifference;
		    }
	    }
    	
	    if (month <= 9) month = "0" + month;
	    if (day <= 9) day = "0" + day;
	    if (hour <= 9) hour = "0" + hour;
	    if (minute <= 9) minute = "0" + minute;
	    if (second <= 9) second = "0" + second;
    	
	    return  year + "-" + month + "-" + day + "T" + hour + ":" + minute + ":" + second + timezone;
    };
Sforce.Util.IsDate = function(p_Expression){	return !isNaN(new Date(p_Expression));};
Sforce.Util.DateAdd = function(p_Interval, p_Number, p_Date){if(!Sforce.Util.IsDate(p_Date)){return "invalid date: '" + p_Date + "'";}if(isNaN(p_Number)){return "invalid number: '" + p_Number + "'";}	p_Number = new Number(p_Number);var dt = new Date(p_Date);switch(p_Interval.toLowerCase()){case "yyyy": {dt.setFullYear(dt.getFullYear() + p_Number);break;}case "q": {dt.setMonth(dt.getMonth() + (p_Number*3));break;}case "m": {dt.setMonth(dt.getMonth() + p_Number);break;}case "y":case "d":case "w": {dt.setDate(dt.getDate() + p_Number);break;}case "ww": {dt.setDate(dt.getDate() + (p_Number*7));break;}case "h": {dt.setHours(dt.getHours() + p_Number);break;}case "n": {dt.setMinutes(dt.getMinutes() + p_Number);break;}case "s": {dt.setSeconds(dt.getSeconds() + p_Number);break;}case "ms": {dt.setMilliseconds(dt.getMilliseconds() + p_Number);break;}default: {return "invalid interval: '" + p_Interval + "'";}}return dt;};
Sforce.Util.GetDateFromFormat = function(val,format) {val=val+"";format=format+"";var i_val=0;var i_format=0;var c="";var token="";var token2="";var x,y;var now=new Date();var year=now.getYear();var month=now.getMonth()+1;var date=1;var hh=now.getHours();var mm=now.getMinutes();var ss=now.getSeconds();var ampm="";while (i_format < format.length) {c=format.charAt(i_format);token="";while ((format.charAt(i_format)==c) && (i_format < format.length)) {token += format.charAt(i_format++);}if (token=="yyyy" || token=="yy" || token=="y") {if (token=="yyyy") { x=4;y=4; }if (token=="yy")   { x=2;y=2; }if (token=="y")    { x=2;y=4; }year=Sforce.Util.GetInt(val,i_val,x,y);if (year==null) { return 0; }i_val += year.length;if (year.length==2) {if (year > 70) { year=1900+(year-0); }else { year=2000+(year-0); }}}else if (token=="MMM"||token=="NNN"){month=0;for (var i=0; i<Sforce.Util.MONTH_NAMES.length; i++) {var month_name=Sforce.Util.MONTH_NAMES[i];if (val.substring(i_val,i_val+month_name.length).toLowerCase()==month_name.toLowerCase()) {if (token=="MMM"||(token=="NNN"&&i>11)) {month=i+1;if (month>12) { month -= 12; }i_val += month_name.length;break;}}}if ((month < 1)||(month>12)){return 0;}}else if (token=="EE"||token=="E"){for (var i=0; i<Sforce.Util.DAY_NAMES.length; i++) {var day_name=Sforce.Util.DAY_NAMES[i];if (val.substring(i_val,i_val+day_name.length).toLowerCase()==day_name.toLowerCase()) {i_val += day_name.length;break;}}}else if (token=="MM"||token=="M") {month=Sforce.Util.GetInt(val,i_val,token.length,2);if(month==null||(month<1)||(month>12)){return 0;}i_val+=month.length;}else if (token=="dd"||token=="d") {date=Sforce.Util.GetInt(val,i_val,token.length,2);if(date==null||(date<1)||(date>31)){return 0;}i_val+=date.length;}else if (token=="hh"||token=="h") {hh=Sforce.Util.GetInt(val,i_val,token.length,2);if(hh==null||(hh<1)||(hh>12)){return 0;}i_val+=hh.length;}else if (token=="HH"||token=="H") {hh=Sforce.Util.GetInt(val,i_val,token.length,2);if(hh==null||(hh<0)||(hh>23)){return 0;}i_val+=hh.length;}else if (token=="KK"||token=="K") {hh=Sforce.Util.GetInt(val,i_val,token.length,2);if(hh==null||(hh<0)||(hh>11)){return 0;}i_val+=hh.length;}else if (token=="kk"||token=="k") {hh=Sforce.Util.GetInt(val,i_val,token.length,2);if(hh==null||(hh<1)||(hh>24)){return 0;}i_val+=hh.length;hh--;}else if (token=="mm"||token=="m") {mm=Sforce.Util.GetInt(val,i_val,token.length,2);if(mm==null||(mm<0)||(mm>59)){return 0;}i_val+=mm.length;}else if (token=="ss"||token=="s") {ss=Sforce.Util.GetInt(val,i_val,token.length,2);if(ss==null||(ss<0)||(ss>59)){return 0;}i_val+=ss.length;}else if (token=="a") {if (val.substring(i_val,i_val+2).toLowerCase()=="am") {ampm="AM";}else if (val.substring(i_val,i_val+2).toLowerCase()=="pm") {ampm="PM";}else {return 0;}i_val+=2;}else {if (val.substring(i_val,i_val+token.length)!=token) {return 0;}else {i_val+=token.length;}}}if (i_val != val.length) { return 0; }if (month==2) {if ( ( (year%4==0)&&(year%100 != 0) ) || (year%400==0) ) { if (date > 29){ return 0; }}else { if (date > 28) { return 0; } }}if ((month==4)||(month==6)||(month==9)||(month==11)) {if (date > 30) { return 0; }}if (hh<12 && ampm=="PM") { hh=hh-0+12; }else if (hh>11 && ampm=="AM") { hh-=12; }var newdate=new Date(year,month-1,date,hh,mm,ss);return newdate.getTime();};
// ===================================================================
// Author: Matt Kruse <matt@mattkruse.com>
// WWW: http://www.mattkruse.com/
//
// ===================================================================
Sforce.Util.MONTH_NAMES=new Array('January','February','March','April','May','June','July','August','September','October','November','December','Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec');
Sforce.Util.DAY_NAMES=new Array('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sun','Mon','Tue','Wed','Thu','Fri','Sat');
Sforce.Util.LZ = function(x) {return(x<0||x>9?"":"0")+x}
Sforce.Util.IsDate2 = function(val,format) {var date=Sforce.Util.GetDateFromFormat(val,format);if (date==0) { return false; }return true;};
Sforce.Util.CompareDates = function(date1,dateformat1,date2,dateformat2) {var d1=Sforce.Util.GetDateFromFormat(date1,dateformat1);var d2=Sforce.Util.GetDateFromFormat(date2,dateformat2);if (d1==0 || d2==0) {return -1;}else if (d1 > d2) {return 1;}return 0;};
Sforce.Util.FormatDate = function(date,format) {
	format=format+"";
	var result="";
	var i_format=0;
	var c="";
	var token="";
	var y=date.getYear()+"";
	var M=date.getMonth()+1;
	var d=date.getDate();
	var E=date.getDay();
	var H=date.getHours();
	var m=date.getMinutes();
	var s=date.getSeconds();
	var yyyy,yy,MMM,MM,dd,hh,h,mm,ss,ampm,HH,H,KK,K,kk,k;
	var value=new Object();
	if (y.length < 4) {
		y = ""+(y-0+1900);
	} 
	value["y"] = ""+y;
	value["yyyy"] = y;
	value["yy"] = y.substring(2,4);
	value["M"] = M;
	value["MM"] = Sforce.Util.LZ(M);
	value["MMM"] = Sforce.Util.MONTH_NAMES[M-1];
	value["NNN"] = Sforce.Util.MONTH_NAMES[M+11];
	value["d"] = d;
	value["dd"] = Sforce.Util.LZ(d);
	value["E"] = Sforce.Util.DAY_NAMES[E+7];
	value["EE"] = Sforce.Util.DAY_NAMES[E];
	value["H"] = H;
	value["HH"] = Sforce.Util.LZ(H);
	if (H==0){
		value["h"]=12;
	} else if (H>12){
		value["h"] = H-12;
	} else {
		value["h"] = H;
	}
	value["hh"]=Sforce.Util.LZ(value["h"]);
	if (H>11){
		value["K"]=H-12;
	} else {
		value["K"]=H;
	}
	value["k"]=H+1;
	value["KK"]=Sforce.Util.LZ(value["K"]);
	value["kk"]=Sforce.Util.LZ(value["k"]);
	if (H > 11) { 
		value["a"]="PM"; 
	} else { 
		value["a"]="AM"; 
	}
	value["m"] = m;
	value["mm"] = Sforce.Util.LZ(m);
	value["s"]=s;
	value["ss"]=Sforce.Util.LZ(s);
	while (i_format < format.length) {
		c=format.charAt(i_format);
		token="";
		while ((format.charAt(i_format)==c) && (i_format < format.length)) {
			token += format.charAt(i_format++);
		}
		if (value[token] != null) { 
			result=result + value[token]; 
		} else { 
			result=result + token; 
		}
	}
	return result;
};
Sforce.Util.IsInteger = function(val) {var digits="1234567890";for (var i=0; i < val.length; i++) {if (digits.indexOf(val.charAt(i))==-1) { return false; }}return true;};
Sforce.Util.GetInt = function(str,i,minlength,maxlength) {for (var x=maxlength; x>=minlength; x--) {var token=str.substring(i,i+x);if (token.length < minlength) { return null; }if (Sforce.Util.IsInteger(token)) { return token; }}return null;};
Sforce.Util.ParseDate = function(val) {
	if (Sforce.Util.dltypeof(val) == "date") return val;
	var preferEuro=(arguments.length==2)?arguments[1]:false;
	generalFormats=new Array('y-M-d','MMM d, y','MMM d,y','y-MMM-d','d-MMM-y','MMM d');
	monthFirst=new Array('M/d/y','M-d-y','M.d.y','MMM-d','M/d','M-d');
	dateFirst =new Array('d/M/y','d-M-y','d.M.y','d-MMM','d/M','d-M');
	var checkList=new Array(generalFormats,preferEuro?dateFirst:monthFirst,preferEuro?monthFirst:dateFirst);var d=null;for (var i=0; i<checkList.length; i++) {var l=checkList[i];for (var j=0; j<l.length; j++) {d=Sforce.Util.GetDateFromFormat(val,l[j]);if (d!=0) { return new Date(d); }}}return null;}

Boolean.parse = function(value){if (typeof(value)=='string'){return (value.toLowerCase()=='true');}return value ?true :false;}
Number.parse =function(value){if (!value ||(value.length ==0)){return 0;}return parseFloat(value);}
Number._typeName ='Number';String.prototype.endsWith =function(suffix){return (this.substr(this.length -suffix.length)==suffix);}

String.prototype.startsWith =function(prefix){return (this.substr(0,prefix.length)==prefix);}
String.prototype.trimLeft =function(){return this.replace(/^\s*/,"");}
String.prototype.trimRight =function(){return this.replace(/\s*$/,"");}
String.prototype.trim =function(){return this.trimRight().trimLeft();}
String.prototype.padLeft = function(padChar, totalLength) {var thisLen = this.length;var out = this;if (thisLen < totalLength) {var diff = totalLength - thisLen;for (var i=0;i<diff;i++) {out = padChar + out;}}return out;};
String.prototype.padRight = function(padChar, totalLength) {var thisLen = this.length;var out = this;if (thisLen < totalLength) {var diff = totalLength - thisLen;for (var i=0;i<diff;i++) {out = out + padChar;}}return out;};
String.format =function(format){for (var i =1;i <arguments.length;i++){format =format.replace("{"+(i -1)+"}",arguments[i]);}return format;}
String.prototype.noPX = function() {if (this.length == 0) return 0; else return parseInt(this.replace(/px/, ""));}
String.prototype.pxAdd = function(val) {return (this.noPX() + val) + "px";}
String._typeName ='String';

/** private */
//Sforce.move = function(element, x, y) {if (y == undefined) var y = 0;if (x == undefined) var x = 0;element.style.left = element.style.left.pxAdd(y);element.style.top = element.style.top.pxAdd(x);}
/** private */
//Sforce.moveTo = function(element, x, y) {	if (y == undefined) var y = 0;	if (x == undefined) var x = 0;element.style.left = y + "px";element.style.top = x + "px";}


Sforce.Hashtable = function() {
	this.getKeys = function() {
		return this.keys;
	}
	this.map = new Array();
	this.className = "Hashtable";
	this.length = 0;
	this.keys = new Array();
};
Sforce.Hashtable.prototype.getItem = function(key) { return this.map[key.toLowerCase()]; };
Sforce.Hashtable.prototype.addItem =function(key, value){	
	var k = key.toLowerCase();
	this.keys[k] = k;
	this.map[k] = value;
	this.length++;
};
Sforce.Hashtable.prototype.clear = function(){
	if (this.length >0){
		this.map.splice(0, this.length);
		this.keys.splice(0, this.keys.length);
		this.length = 0;
	}
};
Sforce.Hashtable.prototype.clone = function(){
	var clonedArray = new Sforce.Hashtable();	
	var length = this.length;
	for (key in this.map) {
		clonedArray.addItem(key, this.map[key]);
	}
	return clonedArray;
};
Sforce.Hashtable.prototype.containsItem = function(key){
	var index = this.indexOf(key);	
	return (index >=0);
};
Sforce.Hashtable.prototype.indexOf = function(key){
	var x = key.toLowerCase();
	var c = 0;
	for (k in this.map) {
		if (k == x){
			return c;
		}
		c++;
	}
	return -1;
};
Sforce.Hashtable.prototype.remove = function(key){
	var k = key.toLowerCase();
	var index = this.indexOf(k);
	if (index >=0){
		this.map.splice(index,1);
		this.keys[k] == null;
		this.length--;
	}
};
Sforce.Hashtable._typeName ='Hashtable';
Sforce.Hashtable.prototype.parse =function(value){return eval('('+value +')');}
			
RegExp.parse =function(value){if (value.startsWith('/')){var endSlashIndex =value.lastIndexOf('/');if (endSlashIndex >1){var expression =value.substring(1,endSlashIndex);var flags =value.substr(endSlashIndex +1);return new RegExp(expression,flags);}}return null;}
RegExp._typeName ='RegExp';

Date._typeName ='Date';
Sforce.Browser = function(){
    var ua, s, i;
    this.isIE = false;
    this.isNS = false;
    this.version = null;
    ua = navigator.userAgent;s = "MSIE";
    if ((i = ua.indexOf(s)) >= 0) {
        this.isIE = true;
        this.version = parseFloat(ua.substr(i + s.length));
        return;
    }
    s = "Netscape6/";
    if ((i = ua.indexOf(s)) >= 0) {
        this.isNS = true;
        this.version = parseFloat(ua.substr(i + s.length));
        return;
    }
    s = "Gecko";
    if ((i = ua.indexOf(s)) >= 0) {
        this.isNS = true;
        this.version = 6.1;return;
    }
};
Sforce.Application = function() {
	var _type;
	var b = new Sforce.Browser();
	this.get_type = function() {
		if (!_type){
			_type = Sforce.Application.Type.FireFox;
			if (b.isIE){
				_type = Sforce.Application.Type.InternetExplorer;
			} else if (b.isNS){
				_type = Sforce.Application.Type.FireFox;
			} else {
			    try {
		            if (URL) {
		                _type = Sforce.Application.Type.Konfabulator;
		            }
		        } catch (e) {}
			}
		}
		return _type;
	};
};
Sforce.Application.Type = new Object();
Sforce.Application.Type.Other = "Other";
Sforce.Application.Type.InternetExplorer = "InternetExplorer";
Sforce.Application.Type.FireFox = "FireFox";
Sforce.Application.Type.Firefox = Sforce.Application.Type.FireFox;
Sforce.Application.Type.Konfabulator = "Konfabulator";

Sforce.XMLDOM = function(){
	if (Sforce.Application.get_type()== Sforce.Application.Type.InternetExplorer){
		var progIDs =['Msxml2.DOMdoc.6.0','Msxml2.DOMdoc.5.0','Msxml2.DOMdoc.4.0','Msxml2.DOMdoc.3.0','Msxml2.DOMDocument'];
		for (var i =0;i <progIDs.length;i++){
			try {
				var xmlDOM = new ActiveXObject(progIDs[i]);
				return xmlDOM;
			} catch (ex){}
		}
		return null;
	} else {
		return domParser = new DOMParser();
	}
};
Sforce.XMLDOMString = function(markup){
	var xmlDOM = new Sforce.XMLDOM();
	if (Sforce.Application.get_type()== Sforce.Application.Type.InternetExplorer){
		xmlDOM.async = false;
		xmlDOM.loadXML(markup);
		return xmlDOM;
	} else {
		return xmlDOM.parseFromString(markup,'text/xml');
	}
};
Sforce.XMLDOMFile = function(url, callback) {
	_this = this;
	_callback = callback;
	rsc = function(e) {
		if (_xml.req.readyState == 4) {
			// only if "OK"
			if (_xml.req.status == 200) {
				if (_callback != undefined) callback(_xml.req);
				//return _this.responseXML;
			} else {
				alert("There was a problem retrieving the XML data:\n" +
					_xml.req.statusText);
			}
		}
	};
	
	_xml = new Sforce.XmlHttp();
	if (callback) {
		_xml.req.onreadystatechange = rsc;
	}
	_xml.req.open('GET', url, false);
	_xml.req.send( null );
	return _xml.req;
};
/**
 * Construct a new SforceClient object -  During this constructor, dependent js files
 * are obtained from a well known url:  At the time of constructions, we do not have
 * a valid connection to the webservice:  This must be obtained by using Login
 * or init:  sforceClient init is appropriate when used in an Sforce Control.
 * @constructor
 */
Sforce.Client = function() {
	var _this = this;
	/** @ignore */
	this.describeCache = new Sforce.Hashtable(); 
	/** @ignore */
	this.describeLayoutCache = new Sforce.Hashtable(); 
	/** @ignore */
	this.describeTabsCache = new Sforce.Hashtable();
	this.sessionId = "";
	this.userId = "";
	this.url = "";
	this.loginUrl = "https://www.salesforce.com/services/Soap/u/7.0";
	this.username = "";
	this.password = "";
	this.batchSize = "200";
	this.userInfo = null;
	this.logSoapMessages = false;
	this.soapMessages = new Array();	
	this.version = "0.0.1_b002";
	this.onError = undefined;
	this.appType = new Sforce.Application().get_type();
	this.clientId = null;
	
	/** @ignore */
	this.getXMLHttpRequest = function(){if(typeof ActiveXObject!="undefined"){return new ActiveXObject("Microsoft.XMLHTTP")} else if(typeof XMLHttpRequest!="undefined"){return new XMLHttpRequest()} else {return null}};
	/** @ignore */
	//this.script = function(src) {	
	//	doc.write('<script src="' + src + '" type="text/javascript"></script>');
	//}
	/** @ignore */
	//this.loadClientScripts = function() {
	//	if (document != undefined) {
	//		var pref;
	//		var scripts = Sforce.doc.getElementsByTagName("script");
	//		for (var i=0;i<scripts.length;i++) {
	//			var scriptSource = scripts[i].src;
	//			if (scriptSource.indexOf("sforceclient.js") > 0) {
	//				pref = scriptSource.substring(0, scriptSource.indexOf("sforceclient.js"));
	//				this.imageFolder = pref + "images/";
	//				break;
	//			}
	//		}
	//		this.script(pref + "util.js");
	//		this.script(pref + "dltypeof.js");
	//		this.script(pref + "domfunc.js");
	//		this.script(pref + "dynalib.js");
	//		this.script(pref + "dynaproperty.js");
	//		this.script(pref + "soapobjects.js");
	//		this.script(pref + "calendar.js");
	//		this.script(pref + "combobox.js");
	//		this.script(pref + "multiselectpicklist.js");
	//		this.script(pref + "rendering.js");
	//		this.script(pref + "layout.js");
	//		this.script(pref + "databinding.js");
	//		this.script(pref + "sforcelogger.js");
	//		this.script(pref + "dialog.js");
	//		this.script(pref + "busybox.js");
	//	}
	//};
	//this.loadClientScripts();

	this.onInitCallback = function() {return;};
	
	/**
	 * You can use this to prevent resetting the url after a login operation.
	 * @type {Boolean}
	 */
	this.maintainLoginUrl = false;
}
/** @ignore */
Sforce.Client.prototype.OPEN_HEADER = "<soapenv:Header>\n";
/** @ignore */
Sforce.Client.prototype.CLOSE_HEADER = "</soapenv:Header>\n";
/** @ignore */
Sforce.Client.prototype.OPEN_BODY = "<soapenv:Body>\n";
/** @ignore */
Sforce.Client.prototype.CLOSE_BODY = "</soapenv:Body>\n";
/** @ignore */
Sforce.Client.prototype.CLOSE_ENV = "</soapenv:Envelope>\n";
/** @ignore */
Sforce.Client.prototype.OPEN_ENV = "<?xml version='1.0' encoding='UTF-8' ?><soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>\n";
/** @ignore */ 
Sforce.Client.prototype.getClientId = function() {
    return this.clientId;
};
/** @ignore */ 
Sforce.Client.prototype.setClientId = function(id) {
    this.clientId = id;
};
/** @ignore */ 
Sforce.Client.prototype.openXMLFile = function(filename) {};
/**
 * Registers a listener for the init complete event.  The init complete event is called directly after the init method has completed.
 * The event no values.
 * <BR><BR>Example: This example sets the setup function to be called after initialization is complete.<BR><BR>
 * <pre><code>function initPage() {
 *    sforceClient.useCookies = true;
 *    sforceClient.registerInitCallback(setup);
 *    sforceClient.init("{!API_Session_ID}", "{!API_Partner_Server_URL_60}", true);
 *  }
 *  function setup() {
 *    var dg = sforceClient.DescribeGlobal();
 *    var sel = Sforce.doc.getElementById("cboType");
 *    sel.options.length = 0;
 *    for (var i=0;i&lt;dg.types.length;i++) {
 *      var opt = doc.createElement("OPTION");
 *      opt.value = dg.types[i];
 *      opt.appendChild(doc.createTextNode(dg.types[i]));
 *      sel.appendChild(opt);
 *    }
 *  }
 * </code></pre>
 * @param {Function} callBack The function to call when event is raised.
 */
Sforce.Client.prototype.registerInitCallback = function( callBack ) { this.onInitCallback = callBack; };
Sforce.Client.prototype.verbose = false;

/**
 * Returns the version of this toolkit.
 * @return The version of the toolkit.
 * @type <String> string
 */
Sforce.Client.prototype.getVersion = function() { return version; };
/** @ignore */ 
Sforce.Client.prototype.buildRequest = function(operation) {
    var out = this.OPEN_ENV;
    out += this.OPEN_HEADER;
    out += this.getSessionHeader();
    out += this.getBatchHeader();
    if (this.getClientId() != null) {
        out += this.getCallOptionsHeader();
        alert(this.getCallOptionsHeader());
    }
    out += this.CLOSE_HEADER + this.OPEN_BODY + operation + this.CLOSE_BODY + this.CLOSE_ENV;
    return out;
};
/** @ignore */ Sforce.Client.prototype.getBatchHeader = function() {	return "<QueryOptions soapenv:mustUnderstand='0'><ns4:batchSize xmlns:ns4='urn:partner.soap.sforce.com'>" + this.getBatchSize() + "</ns4:batchSize></QueryOptions>";	};
/** @ignore */ Sforce.Client.prototype.getSessionHeader = function() {	return "<ns1:SessionHeader soapenv:mustUnderstand='0' xmlns:ns1='SforceService'><ns2:sessionId xmlns:ns2='urn:partner.soap.sforce.com'>" + 	this.getSessionId() +  "</ns2:sessionId></ns1:SessionHeader>";	};
/** @ignore */ Sforce.Client.prototype.getCallOptionsHeader = function() {	return "<ns1:CallOptions soapenv:mustUnderstand='0' xmlns:ns1='SforceService'><ns2:client xmlns:ns2='urn:partner.soap.sforce.com'>" + this.getClientId() +  "</ns2:client></ns1:CallOptions>";	};
/** @ignore */ Sforce.Client.prototype.setUserInfo = function(uinfo) { 
	_userInfo = uinfo; 
};
/**
 * Gets the current session id.
 * @return A session id {@link String} 
 * @type <String> string
 */
Sforce.Client.prototype.getSessionId = function() { return this.sessionId; };
/**
 * Sets the session id, typically called by the Init function.
 * @param {String} sessionId The session id to use.
 * @type <String> string
 */
Sforce.Client.prototype.setSessionId = function(sessionId) { this.sessionId = sessionId; };
/**
 * Gets the current user's id.
 * @return A user id {@link String} 
 * @type <String> string
 */
Sforce.Client.prototype.getUserId = function() { 
	return this.userInfo.userId; 
};
/** @ignore */
Sforce.Client.prototype.setUserId = function(userID) { this.userId = userID; };
/**
 * Gets the current endpoint url.
 * @return endpoint url {@link String}
 * @type <String> string
 */
Sforce.Client.prototype.getUrl = function() { 
    var t = new Date().getTime();
    return this.url + "?nocache=" + t; 
};
/**
 * Sets the endpoint url.  You can use this to override the url returned from login or to set from the merge field {!...ServerURL}
 * @param {String} endpointURL A valid url to the salesforce.ocm endpoint.
 */
Sforce.Client.prototype.setUrl = function(endpointURL) { this.url = endpointURL; };
/**
 * Get the url that will be used for login
 * @return The login url {@link String}
 * @type <String> string
 */
Sforce.Client.prototype.getLoginUrl = function() { return this.loginUrl; };
/**
 * Sets the url to use for the login call.
 * @param {String} loginURL The url to use for login.
 */
Sforce.Client.prototype.setLoginUrl = function(loginURL) { this.loginUrl = loginURL; };
/**
 * Gets the username for this instance of SforceClient for authentication to salesforce.com
 * @return The username for this instance.
 * @type <String> string
 */
Sforce.Client.prototype.getUsername = function() { return this.username; };
/**
 * Sets the username for this instance of SforceClient for authentication to salesforce.com
 * @param {String) userName The username for this instance.
 */
Sforce.Client.prototype.setUsername = function(userName) { this.username = userName; };
/**
 * Gets the password for this instance of SforceClient for authentication to salesforce.com
 * @return The password for this instance.
 * @type <String> string
 */
Sforce.Client.prototype.getPassword = function () { return this.password; };
/**
 * Sets the password for this instance of SforceClient for authentication to salesforce.com
 * @param {String) password The password for this instance.
 */
Sforce.Client.prototype.setLocalPassword = function(password) { this.password = password; };
/**
 * Gets the current query batch size setting.
 * @return The current batch size
 * @type {Integer}
 */
Sforce.Client.prototype.getBatchSize = function() { return this.batchSize; };
/**
 * Set the batch size for query operations.  Max size is 2000.
 * @param {Integer} size The batch size.
 */
Sforce.Client.prototype.setBatchSize = function(size) { this.batchSize = size; };
/**
 * Reserved for future use
 */
Sforce.Client.prototype.getQSParm = function() { return this.qsParm; };
/**
 * Reserved for future use
 */
Sforce.Client.prototype.setQSParm = function(value) { this.qsParm = value; };

//Public Methods
/**
 * Returns a cross browser http request object suitable for post/get operations.
 *
 */
 //Sforce.Client.getXMLHttpRequest = getXMLHttpRequest;
 
/**
 * Initialize an sforceClient using the merge fields for session id and server url
 * from an sforce control.
 *
 * @param {String} sessId A valid session id from an sforce control merge field.
 * @param {String} serverUrl The api server endpoint merge field from an sforce control.
 */
Sforce.Client.prototype.init = function(sessId, serverUrl, useBuiltInLoginScreen) { 
	if (Sforce.ready == false) {
		//this assumes Sforce.ready was set to false to load the browser support.  
		//Browser support will set Sforce.read to true when it has loaded completely.
		window.setTimeout(new Function("sforceClient.init('" + sessId + "', '" + serverUrl + "', " + useBuiltInLoginScreen + ");"), 30);
	} else {
		if (sessId != undefined && sessId.length == 0) { 
			sessId = null;
		} else if (sessId == undefined) {		
			sessId = null;		
		}

		if (serverUrl != undefined && serverUrl.length == 0) { 
			serverUrl = null;
		} else if (serverUrl == undefined) {		
			serverUrl = null;		
		}

		if (Sforce.haveBrowserSupport == true) {
			this.initb(sessId, serverUrl, useBuiltInLoginScreen);
		} else {
			this.setSessionId(sessId);   
			this.setUrl(serverUrl);

			if (sessId == null || sessId == "{!API_Session_ID}") {
				this.onInitCallback();
			} else if (sessId != "{!API_Session_ID}"){
				this.setUserInfo(this.getUserInfo());
				this.onInitCallback();
			}
		}
	}	
};
/** @ignore */
Sforce.Client.prototype.Init = Sforce.Client.prototype.init;
	/** @ignore */
Sforce.Client.prototype.XMLHttpRequests = new Array();
Sforce.Client.prototype.onTimingCallback = function(operation, elapsedTime) {
};	
/**
 * Registers a listener for the timing event.  The timing event is called when a timed event has completed.  Timing events are specific to API requests and responses and are implemented as a diagnostic feature.
 * The event returns two values, the name of the API call and the elapsed time in ms for the call.
 * <BR><BR>Example:<BR><BR>
 * <code>
 * sforceClient.registerTimingCallback(handleTimingEvent);<BR><BR>
 * function HandleTimingEvent(op, et) {<BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;alert("The " + op + " call took + " + et + " ms.");<BR>
 * }<BR>
 * </code>
 * @param {Function} callBack The function to call when event is raised.
 */
Sforce.Client.prototype.registerTimingCallback = function(callBack) { this.onTimingCallback = callBack; };


/** @ignore */
Sforce.XmlHttp = function (callback, soapMessage, async, f) {
	this.callback = callback || null;
	this.req = null;
	this.soapMessage = soapMessage || null;
	
	var appType = new Sforce.Application();
	var retValue = null;
	
	var getControlPrefix = function () {
		if (getControlPrefix.prefix) {
			return getControlPrefix.prefix;
		}
		
		var prefixes = ["MSXML2", "Microsoft", "MSXML", "MSXML3"];
		var o, o2;
		for (var i = 0; i < prefixes.length; i++) {
			try {
				// try to create the objects
				o = new ActiveXObject(prefixes[i] + ".XmlHttp");
				o2 = new ActiveXObject(prefixes[i] + ".XmlDom");
				return getControlPrefix.prefix = prefixes[i];
			}
			catch (ex) {};
		}
   
		throw new Error("Could not find an installed XML parser");
	};
	
	try {
		if (sforceClient.appType != Sforce.Application.Type.InternetExplorer) {
			this.req = new XMLHttpRequest();
         
			// some older versions of Moz did not support the readyState property
			// and the onreadystate event so we patch it!
			if (this.req.readyState == null) {
				this.req.readyState = 1;
				this.req.addEventListener("load", function () {
					this.req.readyState = 4;
					if (typeof this.req.onreadystatechange == "function")
						this.req.onreadystatechange();
					}, false);
			}
			
			try {
			/** @ignore */
			Document.prototype.loadXML = function (s) {
				var doc2 = (new DOMParser()).parseFromString(s, "text/xml");
				while (this.hasChildNodes()) {
					this.removeChild(this.lastChild);
				}
				for (var i = 0; i < doc2.childNodes.length; i++) {
					this.appendChild(this.importNode(doc2.childNodes[i], true));
				}
			};

			/** @ignore */
			Document.prototype.__defineGetter__("xml", function () {
				return (new XMLSerializer()).serializeToString(this);
			});
			} catch (ex) {
			}
		}
		if (window.ActiveXObject) {
			this.req = new ActiveXObject(getControlPrefix() + ".XmlHttp");
		}
		try {
			if (Url) {
				this.req = new Url();
			}
		} catch(e) {}
		if (async == true) {
			this.req.onreadystatechange = f;
		}
		return this;
	}
	catch (ex) {alert(ex)}
	// fell through
	throw new Error("Your browser does not support XmlHttp objects");
};
//Sender
/**
 * @ignore
 * This is the method that sends a request to the web service.  The url that is used
 * is the url that is returned from getServerUrl and set by setServerUrl.  This kind of
 * limits this call to be specific to the sforceClient and should not be reused for other
 * arbitrary http requests.  
 * @param {String} request A fully formed SOAP message.
 * @param {Function} handler The handler that will consume the response SOAP message.  Each
 * API call contains an internal handler that will deserialize the response into the appropriate
 * object for that particular call.  This is NOT the asynchronous handler specified for an API call.
 * @param {String} operation This is an informational field indicating what kind of soap request is
 * being made.
 * @param {Boolean} async Flag to control whether or not the call is to made asynchronously or not.
 */
Sforce.Client.prototype.SendRequest = function(soapMessage, handler, operation, async, url) {
	if (soapMessage == null || handler == null || operation == null || async == null || url == null) {
		if (soapMessage == null) throw "The soapMessage parameter must not be null."; else if (handler == null) throw "The handler parameter must not be null."; else if (operation == null) throw "The operation parameter must not be null."; else if (async == null)	throw "The async parameter must not be null."; else	throw "The url parameter must not be null.";
		return;
	}
	
	var me = this;
	var _operation = operation;
	var _soapMessage = soapMessage;
	this.internalCallBack = function(i) {
		try { if (window.XMLHttpRequest) { netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");	}	} catch(e) {}
		if (me.XMLHttpRequests[i].req.readyState == 4) {
			var endTime = Sforce.Util.time_object.EndTiming();
			if (this.onTimingCallback) this.onTimingCallback(_operation, endTime);
			if (this.timerlog) this.timerlog.writeln(_operation + ": " + endTime.toString());
			var h = me.XMLHttpRequests[i].callback;
			if (me.hideWait) me.hideWait();
			if( h ) {
				if (this.logSoapMessages == true) { 
					this.soapMessages.push({"operation": _operation, "request": _soapMessage, "response": me.XMLHttpRequests[i].req.responseText}) 
				};
				if (this.inboundDataEventHandler != null) this.inboundDataEventHandler(_operation, _soapMessage, me.XMLHttpRequests[i].req);
				h(me.XMLHttpRequests[i].req);
				me.XMLHttpRequests[i] = null;
			} else {
				eval('f = function() { internalCallBack(' + i + '); }');
				setTimeout( f, 100 );
			}
			me.XMLHttpRequest_count -= 1;
		}
	}
	
	var i = this.XMLHttpRequests.length;
	eval('f = function() { me.internalCallBack(' + i + '); }');
	this.XMLHttpRequests.push( new Sforce.XmlHttp(handler, soapMessage, async, f));
	_this = this;
	
	try { if (sforceClient.appType == Sforce.Application.Type.FireFox) { netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");	}	} catch(e) {}

	if( soapMessage == null ) {
		me.XMLHttpRequests[i].req.open('GET', url, async);
		me.XMLHttpRequests[i].req.send( null );
	} else {
		me.XMLHttpRequests[i].req.open('POST', url, async);
		me.XMLHttpRequests[i].req.setRequestHeader("Content-Type", "text/xml; charset=utf-8");
		me.XMLHttpRequests[i].req.setRequestHeader("SOAPAction", "m");
		Sforce.Util.time_object.StartTiming();
		if (this.soaplog) this.soaplog.writeln(soapMessage);
		if (async == true) {
			if (me.showWait) {
				me.showWait();
			}
			window.setTimeout('Sforce.SendIt(' +  i + ', "' + async + '", "' + _operation + '")', 50);
		} else {
			Sforce.SendIt(i, "false", _operation, this.onTimingCallback);
		}
	}
	me.XMLHttpRequest_count += 1;
}
Sforce.SendIt = function(reqIndex, async, operation, otcb) {
	sforceClient.XMLHttpRequests[reqIndex].req.send( sforceClient.XMLHttpRequests[reqIndex].soapMessage );
	if (async.toLowerCase() == "false") {
		var endTime = Sforce.Util.time_object.EndTiming();
		if (sforceClient.timerlog) sforceClient.timerlog.writeln(operation + ": " + endTime.toString());
		if (sforceClient.logSoapMessages == true) { 
			sforceClient.soapMessages.push({"operation": operation, "request": sforceClient.XMLHttpRequests[reqIndex].soapMessage, "response": sforceClient.XMLHttpRequests[reqIndex].req.responseText}) 
		};
		if (otcb) otcb(operation, Sforce.Util.time_object.EndTiming().toString());
		sforceClient.XMLHttpRequests[reqIndex].callback(sforceClient.XMLHttpRequests[reqIndex].req);
		sforceClient.XMLHttpRequests[reqIndex] = null;
	}		
}
/**
 * Performs a login to the salesforce.com web service.  Although this method supports
 * an asynchronous callback, it is wise to always use this call synchronously.  As with
 * all API calls, the return value can be a SoapFault object in the case of a server side
 * exception (this includes a failed login due to bad username or password).
 * @param {String} userName A salesforce.com username in the form of an email address.
 * @param {String} password A salesforce.com password.
 * @param {Function} callback A pointer to a function to be called once the http request has returned.
 * @param {Boolean} async A flag to indicate that the call should be made asynchronously or not.  A
 * value of true will cause the method to return immediately and once a response is recieved, the callback
 * function will be invoked and passed the results of the call.
 * @type LoginResult/SoapFault
 */
Sforce.Client.prototype.login = function(userName, password, callback) { 
	this.setUrl(this.getLoginUrl()); 
	var sfClient = this;
	var returnValue;
	internalCallback = function (req) {
		if (req.readyState == 4) {
			returnValue = Sforce.createSforceObject(req);
			if (Sforce.Util.dltypeof(returnValue) == "LoginResult") {
				if (sfClient.maintainLoginUrl == false) {
					sfClient.setUrl(returnValue.serverUrl);
				}
				sfClient.setSessionId(returnValue.sessionId);
				sfClient.setUserInfo(returnValue.userInfo);

			}
			if (callback) { 
				callback(returnValue);
			}
		}
	};
	makeLoginRequest = function(un, pwd) { if (sfClient.getUsername() == null || un != sfClient.getUsername()) { sfClient.setUsername(un); }if (sfClient.getPassword() == null || pwd != sfClient.getPassword()) { sfClient.setLocalPassword(pwd); } return sfClient.OPEN_ENV + sfClient.OPEN_BODY + "<login xmlns=\"urn:partner.soap.sforce.com\"><username>" + sfClient.getUsername() + "</username><password>" + sfClient.getPassword() + "</password>" + "</login>" + sfClient.CLOSE_BODY + sfClient.CLOSE_ENV; };
	var async = (callback != undefined);
	this.SendRequest(makeLoginRequest(userName, password), internalCallback, "login", async, this.getUrl());
	return returnValue;
};
/** @ignore */
Sforce.Client.prototype.Login = Sforce.Client.prototype.login;
/**
 * Performs a lead convert operation
 * @param {LeadConverts} leadConverts A LeadConverts structure.
 * @param {Function} callback A pointer to a function to be called once the http request has returned.
 * @param {Boolean} async A flag to indicate that the call should be made asynchronously or not.  A
 * value of true will cause the method to return immediately and once a response is recieved, the callback
 * function will be invoked and passed the results of the call.
 * @type ConvertLeadResult[]/SoapFault
 */
Sforce.Client.prototype.convertLead = function(leadConverts, callback) {
	var sfClient = this;
	var returnValue;
	internalCallback = function(req) {returnValue = Sforce.createSforceObject(req);if (callback) {callback(returnValue);}};
	makeConvertLeadRequest = function() { var soap = "<convertLead xmlns=\"urn:partner.soap.sforce.com\">";if (Sforce.Util.dltypeof(leadConverts) == "array") {for (var i=0;i<leadConverts.length;i++) {soap += leadConverts[i].toSoap();}} else {soap += leadConverts.toSoap();}soap += "</convertLead>";return sfClient.buildRequest(soap);}
	var async = (callback != undefined);
	this.SendRequest(makeConvertLeadRequest(), internalCallback, "leadConvert", async, this.getUrl());
	return returnValue;
};
/** @ignore */
Sforce.Client.prototype.ConvertLead	= Sforce.Client.prototype.convertLead;

/**
 * Performs a describe sobject operation.  The results are cached in a hashmap implementation for 
 * the lifetime of the javascript session.
 * @param {String} objectType The type of object to describe.
 * @param {Function} callback A pointer to a function to be called once the http request has returned.
 * @param {Boolean} async A flag to indicate that the call should be made asynchronously or not.  A
 * value of true will cause the method to return immediately and once a response is recieved, the callback
 * function will be invoked and passed the results of the call.
 * @type DescribeSObjectResult/SoapFault
 */
Sforce.Client.prototype.describeSObject = function(objectType, callback) {
	var sfClient = this;
	var returnValue;
	internalCallback = function(req) {
	    returnValue = Sforce.createSforceObject(req);
	    if (Sforce.Util.dltypeof(returnValue) != "Fault") {
	        sfClient.describeCache.addItem(objectType.toLowerCase(), returnValue);
	    }
	    if (callback) callback(returnValue);
	};
	if (this.describeCache.containsItem(objectType.toLowerCase()) == false) {
		makeDescribeSObjectRequest = function(objectType) { 
			return sfClient.buildRequest("<describeSObject xmlns=\"urn:partner.soap.sforce.com\"><sObjectType>" + objectType + "</sObjectType></describeSObject>");	
		};
		var async = (callback != undefined);
		sfClient.SendRequest(makeDescribeSObjectRequest(objectType), internalCallback, "describe", async, sfClient.getUrl());
	} else {
		returnValue = this.describeCache.getItem(objectType.toLowerCase());
		if (callback) callback(returnValue);
	}
	return returnValue;
};
/** @ignore */
Sforce.Client.prototype.DescribeSObject = Sforce.Client.prototype.describeSObject;

/**
 * Similiar to describSObject but you can describe multiple objects with one call.
 * @see @describeSObject
 * @param {String} objectType The type of object to describe.
 * @param {Function} callback A pointer to a function to be called once the http request has returned.
 * @param {Boolean} async A flag to indicate that the call should be made asynchronously or not.  A
 * value of true will cause the method to return immediately and once a response is recieved, the callback
 * function will be invoked and passed the results of the call.
 * @type DescribeSObjectResult/SoapFault
 */
Sforce.Client.prototype.describeSObjects = function(objectTypes, callback) {
	var sfClient = this;
	var returnValue = null;
	internalCallback = function(req) {
	    debugger;
	    var r = new Array();
	    returnValue = Sforce.createSforceObject(req);
	    if (returnValue.className != "Fault") {
	        for (var ii=0;ii<objectTypes.length;ii++) {
                var n = objectTypes[ii].toLowerCase();
                if (sfClient.describeCache.containsItem(n.toLowerCase()) == false) {
	                for (var jj=0;jj<returnValue.length;jj++) {
	                    var n2 = returnValue[jj].name.toLowerCase();
	                    if (n2 == n) {
	                        sfClient.describeCache.addItem(n.toLowerCase(), returnValue[jj]);
	                        break;
	                    }
	                }
	            }
	            r.push(sfClient.describeCache.getItem(n.toLowerCase()));
	        }
	        returnValue = r;
	    }
	    if (callback) callback(returnValue);
	};
	var nonCachedObjectTypes = new Array();
	for (var i=0;i<objectTypes.length;i++) {
	    if (this.describeCache.containsItem(objectTypes[i].toLowerCase()) == false) {
	        nonCachedObjectTypes.push(objectTypes[i]);
	    }
	}
	if (nonCachedObjectTypes.length == 0) {
	    var retArray = new Array();
	    for (var i=0;i<objectTypes.length;i++) {
	        retArray.push(this.describeCache.getItem(objectTypes[i].toLowerCase()));
	    }
	    returnValue = retArray;
	    if (callback) callback(returnValue);
	} else {
	    makeDescribeSObjectsRequest = function(nonCachedObjectTypes) { 
	        var soapMsg = "<describeSObjects xmlns=\"urn:partner.soap.sforce.com\">";
	        for (var i=0;i<nonCachedObjectTypes.length;i++) {
	            soapMsg += "<sObjectType>" + nonCachedObjectTypes[i] + "</sObjectType>";
	        }
	        soapMsg += "</describeSObjects>";
	        return sfClient.buildRequest(soapMsg);
        };
	    var async = (callback != undefined);
	    this.SendRequest(makeDescribeSObjectsRequest(nonCachedObjectTypes), internalCallback, "describe", async, this.getUrl());
	}
	return returnValue;
};
/** @ignore */
Sforce.Client.prototype.DescribeSObjects = Sforce.Client.prototype.describeSObjects;
/**
 * Performs a describe global operation to retrieve all the available sforce objects.
 * @param {Function} callback A pointer to a function to be called once the http request has returned.
 * @param {Boolean} async A flag to indicate that the call should be made asynchronously or not.  A
 * value of true will cause the method to return immediately and once a response is recieved, the callback
 * function will be invoked and passed the results of the call.
 * @type DescribeGlobalResult/SoapFault
 */
Sforce.Client.prototype.describeGlobal = function(callback) {
	var sfClient = this;
	var returnValue;
	internalCallback = function(req) {
		returnValue = Sforce.createSforceObject(req);
		if (callback) { 
			callback(returnValue); 
		}
	};
	makeDescribeGlobalRequest = function() { return sfClient.buildRequest("<describeGlobal xmlns='urn:partner.soap.sforce.com'></describeGlobal>"); };
	async = (callback != undefined);
	this.SendRequest(makeDescribeGlobalRequest(), internalCallback, "describeGlobal", async, this.getUrl());
	return returnValue;
};
/** @ignore */
Sforce.Client.prototype.DescribeGlobal = Sforce.Client.prototype.describeGlobal;
/**
 * Performs a describe layout operation
 * @param {String} objectType The type of object to describe the layout for.
 * @param {Function} callback A pointer to a function to be called once the http request has returned.
 * @param {Boolean} async A flag to indicate that the call should be made asynchronously or not.  A
 * value of true will cause the method to return immediately and once a response is recieved, the callback
 * function will be invoked and passed the results of the call.
 * @type DescribeLayoutResult/SoapFault
 */
Sforce.Client.prototype.describeLayout = function(objectType, callback) {
	var sfClient = this;
	var returnValue;
	internalCallback = function(req) {returnValue = Sforce.createSforceObject(req); if (Sforce.Util.dltypeof(returnValue) != "SoapFault") {sfClient.describeLayoutCache.addItem(objectType.toLowerCase(), returnValue);}if (callback) callback(returnValue);};
	if (this.describeLayoutCache.containsItem(objectType.toLowerCase()) == false) {makeDescribeLayoutRequest = function(objectType) { return sfClient.buildRequest("<describeLayout xmlns=\"urn:partner.soap.sforce.com\"><sObjectType>" + objectType + "</sObjectType></describeLayout>");};async = (callback != undefined);this.SendRequest(makeDescribeLayoutRequest(objectType), internalCallback, "describeLayout", async, this.getUrl());} else {returnValue = this.describeLayoutCache.getItem(objectType.toLowerCase());if (callback) callback(returnValue);}
	return returnValue;
};
/** @ignore */
Sforce.Client.prototype.DescribeLayout = Sforce.Client.prototype.describeLayout;
/**
 * Performs a describe tabs operation
 * @param {Function} callback A pointer to a function to be called once the http request has returned.
 * @param {Boolean} async A flag to indicate that the call should be made asynchronously or not.  A
 * value of true will cause the method to return immediately and once a response is recieved, the callback
 * function will be invoked and passed the results of the call.
 * @type DescribeTabSetResult[]/SoapFault
 */
Sforce.Client.prototype.describeTabs = function(callback) {
	var sfClient = this;
	var returnValue;
	internalCallback = function(req) {
		returnValue = Sforce.createSforceObject(req); 
		if (Sforce.Util.dltypeof(returnValue) != "SoapFault") {
			sfClient.describeTabsCache.addItem("tabs", returnValue);
		}
		if (callback) callback(returnValue);
	}
	if (this.describeTabsCache.containsItem("tabs") == false) {
		makeDescribeTabsRequest = function() { return sfClient.buildRequest("<describeTabs xmlns=\"urn:partner.soap.sforce.com\"></describeTabs>");};
		async = (callback != undefined);
		this.SendRequest(makeDescribeTabsRequest(), internalCallback, "describeTabs", async, this.getUrl());
	} else {
		returnValue = this.describeTabsCache.getItem("tabs");
		if (callback) callback(returnValue);
	}
	return returnValue;
};
/** @ignore */
Sforce.Client.prototype.DescribeTabs = Sforce.Client.prototype.describeTabs;
/**
 * Performs a get server timestamp operation
 * @param {Function} callback A pointer to a function to be called once the http request has returned.
 * @param {Boolean} async A flag to indicate that the call should be made asynchronously or not.  A
 * value of true will cause the method to return immediately and once a response is recieved, the callback
 * function will be invoked and passed the results of the call.
 * @type GetServerTimestampResult/SoapFault
 */
Sforce.Client.prototype.getServerTimestamp = function(callback) {
	var sfClient = this;
	var returnValue = null;
	internalCallback = function(req) {
		returnValue = Sforce.createSforceObject(req); 
		if (callback) callback(returnValue);
	}
	makeGetServerTimestampRequest = function() {	return sfClient.buildRequest("<getServerTimestamp xmlns='urn:partner.soap.sforce.com' />"); };
	async = (callback != undefined);
	this.SendRequest(makeGetServerTimestampRequest(), internalCallback, "getServerTimeStamp", async, this.getUrl());
	if (callback) callback(returnValue);
	return returnValue;
};
/** @ignore */
Sforce.Client.prototype.GetServerTimestamp =Sforce.Client.prototype.getServerTimestamp;
/**
 * Performs a get user info operation
 * @param {Function} callback A pointer to a function to be called once the http request has returned.
 * @param {Boolean} async A flag to indicate that the call should be made asynchronously or not.  A
 * value of true will cause the method to return immediately and once a response is recieved, the callback
 * function will be invoked and passed the results of the call.
 * @type GetUserInfoResult/SoapFault
 */
Sforce.Client.prototype.getUserInfo = function(callback) {
	var sfClient = this;
	var returnValue;
	internalCallback = function(req) {
		returnValue = Sforce.createSforceObject(req);
		if (returnValue.className = "UserInfoResult") {
			sfClient.setUserInfo(returnValue);
		}
		if (callback) callback(returnValue);
	}
	makeGetUserInfoRequest = function() {	return sfClient.buildRequest("<getUserInfo xmlns='urn:partner.soap.sforce.com' />"); };
	async = (callback != undefined);
	this.SendRequest(makeGetUserInfoRequest(), internalCallback, "getUserInfo", async, this.getUrl());
	if (callback) callback(returnValue);
	return returnValue;
};
/** @ignore */
Sforce.Client.prototype.GetUserInfo = Sforce.Client.prototype.getUserInfo;
/**
 * Performs a get updated operation
 * @param {String} objectType The type of object to poll.
 * @param {Date} startDate The lower boundary of the polling window.
 * @param {Date} endDate The upper boundary of the polling window.
 * @param {Function} callback A pointer to a function to be called once the http request has returned.
 * @param {Boolean} async A flag to indicate that the call should be made asynchronously or not.  A
 * value of true will cause the method to return immediately and once a response is recieved, the callback
 * function will be invoked and passed the results of the call.
 * @type GetUpdatedResult/SoapFault
 */
Sforce.Client.prototype.getUpdated = function(objectType, startDate, endDate, callback) {
	var sfClient = this;
	var returnValue;
	internalCallback = function(req) {
		returnValue = Sforce.createSforceObject(req); 
		if (callback) callback(returnValue);
	}
	makeGetUpdatedRequest = function() {return sfClient.buildRequest("<getUpdated xmlns='urn:partner.soap.sforce.com'><sObjectType>" + objectType + "</sObjectType><startDate>" + Sforce.Util.ToIsoDateTime(startDate) + "</startDate><endDate>" + Sforce.Util.ToIsoDateTime(endDate) + "</endDate></getUpdated>"); };
	async = (callback != undefined);
	this.SendRequest(makeGetUpdatedRequest(), internalCallback, "getUpdated", async, this.getUrl());
	if (callback) callback(returnValue);
	return returnValue;
};
/** @ignore */
Sforce.Client.prototype.GetUpdated = Sforce.Client.prototype.getUpdated;
/**
 * Performs a get deleted operation
 * @param {String} objectType The type of object to poll.
 * @param {Date} startDate The lower boundary of the polling window.
 * @param {Date} endDate The upper boundary of the polling window.
 * @param {Function} callback A pointer to a function to be called once the http request has returned.
 * @param {Boolean} async A flag to indicate that the call should be made asynchronously or not.  A
 * value of true will cause the method to return immediately and once a response is recieved, the callback
 * function will be invoked and passed the results of the call.
 * @type GetDeletedResult/SoapFault
 */
Sforce.Client.prototype.getDeleted = function(objectType, startDate, endDate, callback) {
	var sfClient = this;
	var returnValue;
	internalCallback = function(req) {
		returnValue = Sforce.createSforceObject(req); 
		if (callback) callback(returnValue);
	}
	makeGetDeletedRequest = function() {	return sfClient.buildRequest("<getDeleted xmlns='urn:partner.soap.sforce.com'><sObjectType>" + objectType + "</sObjectType><startDate>" + Sforce.Util.ToIsoDateTime(startDate) + "</startDate><endDate>" + Sforce.Util.ToIsoDateTime(endDate) + "</endDate></getDeleted>"); };
	async = (callback != undefined);
	this.SendRequest(makeGetDeletedRequest(), internalCallback, "getDeleted", async, this.getUrl());
	if (callback) callback(returnValue);
	return returnValue;
};
/** @ignore */
Sforce.Client.prototype.GetDeleted = Sforce.Client.prototype.getDeleted;
/**
 * Performs a query operation
 * @param {String} soql The sforce object query language that constitutes a selection.
 * @param {Function} callback A pointer to a function to be called once the http request has returned.
 * @param {Boolean} async A flag to indicate that the call should be made asynchronously or not.  A
 * value of true will cause the method to return immediately and once a response is recieved, the callback
 * function will be invoked and passed the results of the call.
 * @type QueryResult/SoapFault
 */
Sforce.Client.prototype.selectAllQuery = function(object, whereClause, callback) {
	var sfClient = this;
	var returnValue;
	var soql = "Select " + sforceClient.DescribeSObject(object).fieldList + " From " + object;
	if (Sforce.Util.dltypeof(whereClause).toLowerCase() == "string") {
		soql += " " + whereClause;
	}
	internalCallback = function(req) {
		returnValue = Sforce.createSforceObject(req);
		returnValue["SOQL"] = soql;
		if (callback) {
			callback(returnValue);
		}
	}
	makeQueryRequest = function(SOQL) {	return sfClient.buildRequest("<query xmlns='urn:partner.soap.sforce.com'><queryString><![CDATA[" + SOQL + "]]></queryString></query>"); };
	async = (callback != undefined);
	this.SendRequest(makeQueryRequest(soql), internalCallback, "query", async, this.getUrl());
	return returnValue;
};
/** @ignore */
Sforce.Client.prototype.SelectAllQuery = Sforce.Client.prototype.selectAllQuery;
/**
 * Performs a query operation
 * @param {String} soql The sforce object query language that constitutes a selection.
 * @param {Function} callback A pointer to a function to be called once the http request has returned.
 * @param {Boolean} async A flag to indicate that the call should be made asynchronously or not.  A
 * value of true will cause the method to return immediately and once a response is recieved, the callback
 * function will be invoked and passed the results of the call.
 * @type QueryResult/SoapFault
 */
Sforce.Client.prototype.query = function(soql, callback) {
	var sfClient = this;
	var returnValue;
	internalCallback = function(req) {
		var t = new Sforce.Util.Timestamp_class();
		t.StartTiming();
		returnValue = Sforce.createSforceObject(req);
		if (sforceClient.timerlog) sforceClient.timerlog.writeln("Query Deserialize: " + t.EndTiming());
		returnValue["SOQL"] = soql;
		returnValue["RequestedColumns"] = Sforce.Util.ParseSelectListFromSOQL(soql);
		if (callback) {
			callback(returnValue);
		}
	}
	
	makeQueryRequest = function(SOQL) {	
		return sfClient.buildRequest("<query xmlns='urn:partner.soap.sforce.com'><queryString><![CDATA[" + SOQL + "]]></queryString></query>"); 
	};
	async = (callback != undefined);
	sfClient.SendRequest(makeQueryRequest(soql), internalCallback, "query", async, sfClient.getUrl());
	return returnValue;
};
/** @ignore */
Sforce.Client.prototype.Query = Sforce.Client.prototype.query;
/**
 * Performs a query more operation
 * @param {String} queryLocation The query "cursor" to fetch.
 * @param {Function} callback A pointer to a function to be called once the http request has returned.
 * @param {Boolean} async A flag to indicate that the call should be made asynchronously or not.  A
 * value of true will cause the method to return immediately and once a response is recieved, the callback
 * function will be invoked and passed the results of the call.
 * @type QueryResult/SoapFault
 */
Sforce.Client.prototype.queryMore = function(queryLocator, callback) {
	var sfClient = this;
	var returnValue;
	internalCallback = function(req) {
		returnValue = Sforce.createSforceObject(req); //sfClient._queryHandler(req);
		if (callback) {
			callback(returnValue);
		}
	};
	makeQueryMoreRequest = function(queryLocator) {	return sfClient.buildRequest("<queryMore xmlns=\"urn:partner.soap.sforce.com\"><queryLocator>" + queryLocator + "</queryLocator></queryMore>"); };
	async = (callback != undefined);
	sfClient.SendRequest(makeQueryMoreRequest(queryLocator), internalCallback, "querymore", async, sfClient.getUrl());
	return returnValue;
};
/** @ignore */
Sforce.Client.prototype.QueryMore = Sforce.Client.prototype.queryMore;
/**
 * Performs a retrieve operation
 * @param {String} fieldList A comma separated list of fields to retrieve.
 * @param {String} objectType The type of object that the id array represents.
 * @param {Array} idArray An array of id strings to retrieve data for.  This is different than the
 * standard API (at least for JAVA) in that it takes id strings rather than id objects.
 * @param {Function} callback A pointer to a function to be called once the http request has returned.
 * @param {Boolean} async A flag to indicate that the call should be made asynchronously or not.  A
 * value of true will cause the method to return immediately and once a response is recieved, the callback
 * function will be invoked and passed the results of the call.
 * @type SObject[]/SoapFault
 */
Sforce.Client.prototype.retrieve = function(fieldList, objectType, idArray, callback) {
	var sfClient = this;
	var returnValue;
	internalCallback = function(req) {
		returnValue = Sforce.createSforceObject(req);
		if (callback) {
			callback(returnValue);
		}
	};
	makeRetrieveRequest = function() {
		var _ids = ""; 
		if (Sforce.Util.dltypeof(idArray) == "array") { 
			for ( var i=0;i<idArray.length;i++) {
				_ids += "<ids>" + idArray[i] + "</ids>"; 
			}	
		} else { 
			_ids = "<ids>" + idArray + "</ids>"; 
		}
		return sfClient.buildRequest("<retrieve xmlns=\"urn:partner.soap.sforce.com\"><fieldList>" + fieldList + "</fieldList><sObjectType>" + objectType + "</sObjectType>" + _ids + "</retrieve>"); 
	};
	async = (callback != undefined);
	this.SendRequest(makeRetrieveRequest(), internalCallback, "retrieve", async, this.getUrl());
	return returnValue;
};
/** @ignore */
Sforce.Client.prototype.Retrieve = Sforce.Client.prototype.retrieve;
/**
 * Performs a search operation
 * @param {String} searchString This parameter must be a well formed SOSL string.
 * @param {Function} callback A pointer to a function to be called once the http request has returned.
 * @param {Boolean} async A flag to indicate that the call should be made asynchronously or not.  A
 * value of true will cause the method to return immediately and once a response is recieved, the callback
 * function will be invoked and passed the results of the call.
 * @type SearchResult/SoapFault
 */
Sforce.Client.prototype.search = function(searchString, callback) {
	var sfClient = this;
	var returnValue;
	internalCallback = function(req) {
		returnValue = Sforce.createSforceObject(req);
		if (callback) {
			callback(returnValue);
		}
	};
	makeSearchRequest = function() { return sfClient.buildRequest("<search xmlns=\"urn:partner.soap.sforce.com\"><searchString><![CDATA[" + searchString + "]]></searchString></search>");};
	async = (callback != undefined);
	this.SendRequest(makeSearchRequest(), internalCallback, "search", async, this.getUrl());
	return returnValue;
};
/** @ignore */
Sforce.Client.prototype.Search = Sforce.Client.prototype.search;
/**
 * Performs a set password operation
 * @param {String} userId The id of the user whose password will be changed.
 * @param {String} password The new password to set for the indicated user.
 * @param {Function} callback A pointer to a function to be called once the http request has returned.
 * @param {Boolean} async A flag to indicate that the call should be made asynchronously or not.  A
 * value of true will cause the method to return immediately and once a response is recieved, the callback
 * function will be invoked and passed the results of the call.
 * @type SetPasswordResult/SoapFault
 */
Sforce.Client.prototype.setPassword = function(userId, password, callback) {
	var sfClient = this;
	var returnValue;
	internalCallback = function(req) {
		returnValue = Sforce.createSforceObject(req);
		if (callback) {
			callback(returnValue);
		}
	};
	makeSetPasswordRequest = function() { return sfClient.buildRequest("<setPassword xmlns=\"urn:partner.soap.sforce.com\"><userId><![CDATA[" + userId + "]]></userId><password>" + password + "</password></setPassword>");};
	async = (callback != undefined);
	this.SendRequest(makeSetPasswordRequest(), internalCallback, "setPassword", async, this.getUrl());
	return returnValue;
};
/** @ignore */
Sforce.Client.prototype.SetPassword = Sforce.Client.prototype.setPassword;
/**
 * Performs a reset password operation (causes a system generated password to be assigned to the user).
 * @param {String} userId The id of the user whose password will be reset.
 * @param {Function} callback A pointer to a function to be called once the http request has returned.
 * @param {Boolean} async A flag to indicate that the call should be made asynchronously or not.  A
 * value of true will cause the method to return immediately and once a response is recieved, the callback
 * function will be invoked and passed the results of the call.
 * @type ResetPasswordResult/SoapFault
 */
Sforce.Client.prototype.resetPassword = function(userId, callback) {
	var sfClient = this;
	var returnValue;
	internalCallback = function(req) {
		returnValue = Sforce.createSforceObject(req);
		if (callback) {
			callback(returnValue);
		}
	};
	makeResetPasswordRequest = function() { return sfClient.buildRequest("<resetPassword xmlns=\"urn:partner.soap.sforce.com\"><userId>" + userId + "</userId></resetPassword>");};
	async = (callback != undefined);
	this.SendRequest(makeResetPasswordRequest(), internalCallback, "resetPassword", async, this.getUrl());
	return returnValue;
};
/** @ignore */
Sforce.Client.prototype.ResetPassword = Sforce.Client.prototype.resetPassword;
/**
 * Performs a delete operation
 * @param {Array} ids An array of ids to delete (in practice this function can take a single id string as well).
 * @param {Function} callback A pointer to a function to be called once the http request has returned.
 * @param {Boolean} async A flag to indicate that the call should be made asynchronously or not.  A
 * value of true will cause the method to return immediately and once a response is recieved, the callback
 * function will be invoked and passed the results of the call.
 * @type SaveResult[]/SoapFault
 */
Sforce.Client.prototype._delete = function(ids, callback) {
	var sfClient = this;
	var returnValue;
	internalCallback = function(req) {
		returnValue = Sforce.createSforceObject(req); //sfClient._deleteHandler(req);
		if (callback) {
			callback(returnValue);
		}
	};
	makeDeleteRequest = function() {	var _ids = ""; if (Sforce.Util.dltypeof(ids) == "array") { for (var i=0;i<ids.length;i++) {	_ids += "<ids>" + ids[i] + "</ids>"; }	} else { _ids = "<ids>" + ids + "</ids>"; }	return sfClient.buildRequest("<delete xmlns=\"urn:partner.soap.sforce.com\">" + _ids + "</delete>"); };
	async = (callback != undefined);
	this.SendRequest(makeDeleteRequest(), internalCallback, "delete", async, this.getUrl());
	return returnValue;
};
/** @ignore */
Sforce.Client.prototype.Delete = Sforce.Client.prototype._delete;
/**
 * Performs a create operation operation
 * @param {Array} objects An array of sobjects to create, must be of the same object type.
 * @param {Function} callback A pointer to a function to be called once the http request has returned.
 * @param {Boolean} async A flag to indicate that the call should be made asynchronously or not.  A
 * value of true will cause the method to return immediately and once a response is recieved, the callback
 * function will be invoked and passed the results of the call.
 * @type SaveResult[]/SoapFault
 */
Sforce.Client.prototype.create = function(objects, callback) {
	var sfClient = this;
	var returnValue;
	internalCallback = function(req) {
		returnValue = Sforce.createSforceObject(req); //sfClient._createHandler(req);
		if (callback) {
			callback(returnValue);
		}
	};
	makeCreateRequest = function(sobjects) { 
		return sfClient.buildRequest("<create xmlns=\"urn:partner.soap.sforce.com\">" + sobjects + "</create>"); 
	};
	async = (callback != undefined);
	this.SendRequest(makeCreateRequest(Sforce.Serialization.SerializeBean(objects, "forcreate")), internalCallback, "create", async, this.getUrl());
	return returnValue;
}
/** @ignore */
Sforce.Client.prototype.Create = Sforce.Client.prototype.create;
/**
 * Performs an update operation operation
 * @param {Array} objects An array of sobjects to update, must be of the same object type.
 * @param {Function} callback A pointer to a function to be called once the http request has returned.
 * @param {Boolean} async A flag to indicate that the call should be made asynchronously or not.  A
 * value of true will cause the method to return immediately and once a response is recieved, the callback
 * function will be invoked and passed the results of the call.
 * @type SaveResult[]/SoapFault
 */
Sforce.Client.prototype.update = function(objects, callback) {
	var sfClient = this;
	var returnValue;
	internalCallback = function(req) {
		returnValue = Sforce.createSforceObject(req); 
		if (returnValue.className = "array") {
			if (objects.clearDirtyFlag) {
				objects.clearDirtyFlag();
			}
		} else {
			for (var i=0;i<objects.length;i++) {
				objects[i].clearDirtyFlag();
			}
		}
		if (callback) {
			callback(returnValue);
		}
	};
	makeUpdateRequest = function(sobjects) { 
		return sfClient.buildRequest("<update xmlns=\"urn:partner.soap.sforce.com\">" + sobjects + "</update>"); };
	async = (callback != undefined);
	this.SendRequest(makeUpdateRequest(Sforce.Serialization.SerializeBean(objects, "forupdate")), internalCallback, "update", async, this.getUrl());
	return returnValue;
};
/** @ignore */
Sforce.Client.prototype.Update = Sforce.Client.prototype.update;
/**
 * Performs an update operation operation
 * @param {Array} objects An array of sobjects to update, must be of the same object type.
 * @param {Function} callback A pointer to a function to be called once the http request has returned.
 * @param {Boolean} async A flag to indicate that the call should be made asynchronously or not.  A
 * value of true will cause the method to return immediately and once a response is recieved, the callback
 * function will be invoked and passed the results of the call.
 * @type SaveResult[]/SoapFault
 */
Sforce.Client.prototype.upsert= function(externalIdFieldName, objects, callback) {
	var sfClient = this;
	var returnValue;
	internalCallback = function(req) {
		returnValue = Sforce.createSforceObject(req); 
		if (returnValue.className = "array") {
			if (objects.clearDirtyFlag) {
				objects.clearDirtyFlag();
			} else {
				for (var i=0;i<objects.length;i++) {
					objects[i].clearDirtyFlag();
				}
			}
		}
		if (callback) {
			callback(returnValue);
		}
	};
	makeUpdateRequest = function(sobjects) { 
		return sfClient.buildRequest("<upsert xmlns=\"urn:partner.soap.sforce.com\"><externalIDFieldName>" + externalIdFieldName + "</externalIDFieldName>" + sobjects + "</upsert>"); };
	async = (callback != undefined);
	this.SendRequest(makeUpdateRequest(Sforce.Serialization.SerializeBean(objects, "forupsert")), internalCallback, "upsert", async, this.getUrl());
	return returnValue;
};
/** @ignore */
Sforce.Client.prototype.Upsert = Sforce.Client.prototype.upsert;
 
var sforceClient = new Sforce.Client();

// SoapObject.js
// JScript source code
/*
 * Copyright (c) 2005, salesforce.com, inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 *    Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 *    following disclaimer.
 *  
 *    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and 
 *    the following disclaimer in the documentation and/or other materials provided with the distribution. 
 *    
 *    Neither the name of salesforce.com, inc. nor the names of its contributors may be used to endorse or 
 *    promote products derived from this software without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED 
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR 
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED 
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 */

Sforce.SoapObject = function() {}
/** @return String 
 * @type String
 */
Sforce.SoapObject.prototype.toHtmlString = function(tab) { return Sforce.objectToHtmlString(this, tab); };
/** @return String 
 * @type String
 */
Sforce.SoapObject.prototype.toString = function() { return Sforce.objectToString(this); };

Sforce.SoapObject.FieldType = new Object();
Sforce.SoapObject.FieldType.STRING = "string";
Sforce.SoapObject.FieldType.PICKLIST = "picklist";
Sforce.SoapObject.FieldType.MULTIPICKLIST = "multipicklist";
Sforce.SoapObject.FieldType.COMBOBOX = "combobox";
Sforce.SoapObject.FieldType.REFERENCE = "reference";
Sforce.SoapObject.FieldType.BASE64 = "base64";
Sforce.SoapObject.FieldType.BOOLEAN = "boolean";
Sforce.SoapObject.FieldType.CURRENCY = "currency";
Sforce.SoapObject.FieldType.TEXTAREA = "textarea";
Sforce.SoapObject.FieldType.INT = "int";
Sforce.SoapObject.FieldType.DOUBLE = "double";
Sforce.SoapObject.FieldType.PERCENT = "percent";
Sforce.SoapObject.FieldType.PHONE = "phone";
Sforce.SoapObject.FieldType.ID = "id";
Sforce.SoapObject.FieldType.DATE = "date";
Sforce.SoapObject.FieldType.DATETIME = "datetime";
Sforce.SoapObject.FieldType.URL = "url";
Sforce.SoapObject.FieldType.EMAIL = "email";

Sforce.SoapObject.SoapType = new Object();
Sforce.SoapObject.SoapType.ID = "tns:ID";
Sforce.SoapObject.SoapType.BASE64BINARY = "xsd:base64Binary";
Sforce.SoapObject.SoapType.BOOLEAN = "xsd:boolean";
Sforce.SoapObject.SoapType.DOUBLE = "xsd:double";
Sforce.SoapObject.SoapType.INT = "xsd:int";
Sforce.SoapObject.SoapType.STRING = "xsd:string";
Sforce.SoapObject.SoapType.DATE = "xsd:date";
Sforce.SoapObject.SoapType.DATETIME = "xsd:dateTime";

Sforce.fault = function(_detail) {
	
	this.base = Sforce.SoapObject;
	this.base();
	this.className = "fault";
	if (_detail) {
		Sforce.loadObject(this, _detail);
		//this.exceptionCode = Sforce.DOM.GetElementValue (_detail, "exceptionCode");
		//this.exceptionMessage = Sforce.DOM.GetElementValue (_detail, "exceptionMessage");
		//this.type = Sforce.DOM.GetAttributeValue(_detail, "xsi:type");
	}
}
Sforce.fault.prototype = new Sforce.SoapObject;
/** @type String */
Sforce.fault.prototype.exceptionCode = new String();
/** @type String */
Sforce.fault.prototype.exceptionMessage = new String();

Sforce.detail = function(soap) {
	this.base = Sforce.SoapObject;
	this.base();
	this.className = "detail";
	if (soap) {
		Sforce.loadObject(this, soap);
	}
}
Sforce.detail.prototype = new Sforce.SoapObject;
Sforce.detail.prototype.fault = new Sforce.fault();
Sforce.detail.prototype.type = new String();

Sforce.Fault = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "Fault";
	if (soap) {
		Sforce.loadObject(this, soap);
	}
}
Sforce.Fault.prototype = new Sforce.SoapObject;
/** @type String */
Sforce.Fault.prototype.faultcode = new String();
/** @type String */
Sforce.Fault.prototype.faultstring = new String();
Sforce.Fault.prototype.detail = new Sforce.detail();

Sforce.GetUserInfoResult = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "GetUserInfoResult";
	
	if (soap) {
		Sforce.loadObject(this, soap);
	}
}
Sforce.GetUserInfoResult.prototype = new Sforce.SoapObject;
Sforce.GetUserInfoResult.prototype.accessibilityMode = new Boolean();
Sforce.GetUserInfoResult.prototype.currencySymbol = new String();
Sforce.GetUserInfoResult.prototype.organizationId = new String();
Sforce.GetUserInfoResult.prototype.organizationMultiCurrency = new Boolean();
Sforce.GetUserInfoResult.prototype.organizationName = new String();
Sforce.GetUserInfoResult.prototype.userDefaultCurrencyIsoCode = new String();
Sforce.GetUserInfoResult.prototype.userEmail = new String();
Sforce.GetUserInfoResult.prototype.userFullName = new String();
Sforce.GetUserInfoResult.prototype.userId = new String();
Sforce.GetUserInfoResult.prototype.userLanguage = new String();
Sforce.GetUserInfoResult.prototype.userLocale = new String();
Sforce.GetUserInfoResult.prototype.userTimeZone = new String();
Sforce.GetUserInfoResult.prototype.userUiSkin = new String();

Sforce.LoginResult = function(soap) {
	this.base = Sforce.SoapObject;
	this.className = "LoginResult";
	if (soap) {
		Sforce.loadObject(this, soap);		
	}
	/*function loadMe(obj, node) {
		if (new Sforce.Application().get_type() == Sforce.Application.Type.InternetExplorer) {
			var nodeName = "baseName";
		} else {
			var nodeName = "localName";
		}
		for (var i=0;i<node.childNodes.length;i++) {
			var name  = node.childNodes[i][nodeName];
			if ((node.childNodes[i].childNodes.length > 0 && node.childNodes[i].childNodes[0].nodeType != 3) == true) {
				var newobj = new Sforce[obj[name].className];
				loadMe(newobj, node.childNodes[i]);
				obj[name] = newobj;
			} else {
				obj[name] = Sforce.getTypedValue(node.childNodes[i], obj, name);
			}
		}
	};*/
}
Sforce.LoginResult.prototype = new Sforce.SoapObject;
/** @type Boolean */
Sforce.LoginResult.prototype.passwordExpired = new Boolean();
/** @type String */
Sforce.LoginResult.prototype.serverUrl = new String();
/** @type String */
Sforce.LoginResult.prototype.sessionId = new String();
/** @type String */
Sforce.LoginResult.prototype.userId = new String();
/** @type GetUserInfoResult */
Sforce.LoginResult.prototype.userInfo = new Sforce.GetUserInfoResult();

Sforce.QueryResult = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "QueryResult";
	if (soap) {
		this.records = new Array();
		Sforce.loadObject(this, soap);
		if (this.size > 0) {
			var recs = Sforce.DOM.GetImmediateChildElementsByName(soap, "records");
			//var recs = soap.getElementsByTagName("records");
			this.records = Sforce.Serialization.DeserializeBeans(recs);
		}
	}
};
Sforce.QueryResult.prototype = new Sforce.SoapObject;
/** @type Integer */
Sforce.QueryResult.prototype.size = 0;
/** @type String */
Sforce.QueryResult.prototype.queryLocator = new String();
/** @type Boolean */
Sforce.QueryResult.prototype.done = new Boolean();
/** @type DynaBean[] */
Sforce.QueryResult.prototype.records = new Array();
Sforce.QueryResult.prototype.toString = function(tab) {
	if (tab == undefined) {
		tab = "";
	}
	ind++;
	var output = "\n" + tab + "Query Result [" + ind +"]:\n";
	output += tab + "size: " + this.size + "\n";
	output += tab + "queryLocator: " + this.queryLocator + "\n";
	output += tab + "done: " + this.done + "\n";
	var newTab = tab + "    ";
	for (var i=0;i<this.records.length;i++) {
		var db = this.records[i];
		output += tab + "record " + (i + 1) + " [" + ind + "]:\n";
		for (key in db.keys) {
			var v = db.getItem(key).value;
			if (v == null) {
				output += newTab + key + ": (null)\n";
			} else {
				try {
					if (db.getItem(key).value.className == "Dynabean") {
						output += newTab + key + ": " + db.getItem(key).value.toString(newTab + "    ") + "\n";
					} else if (db.getItem(key).value.className == "QueryResult") {
						output += newTab + key + ": " + db.getItem(key).value.toString(newTab + "    ") + "\n";
					} else {
						output += newTab + key + ": " + db.getItem(key).value.toString(newTab) + "\n";
					}
				} catch(e) {
					output += newTab + key + ": " + db.getItem(key).value + "\n";
				}
			}
		}
	}
	output += tab + "QueryResult [" + ind + "]  *********************** \n";
	ind--;
	return output;
};

Sforce.LeadConvert = function() {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "LeadConverts";
}
Sforce.LeadConvert.prototype = new Sforce.SoapObject;
/** Id of the account to add the converted lead to.
 * @type String */
Sforce.LeadConvert.prototype.accountId = new String();
/** Id of the contact to merge the lead info with.
 * @type String */
Sforce.LeadConvert.prototype.contactId = new String();
/** The status to assign to the converted lead record (must be an existing status).
 * @type String */
Sforce.LeadConvert.prototype.convertedStatus = new String();
/** Indication whether a new opportunity should be created during conversion.
 * @type Boolean */
Sforce.LeadConvert.prototype.doNotCreateOpportunity = new Boolean();
/** The id of the lead to convert.
 * @type String */
Sforce.LeadConvert.prototype.leadId = new String();
/** If creating a new opportunity, this is the name that will be assigned to it.
 * @type String */
Sforce.LeadConvert.prototype.opportunityName = new String();
/** @type Boolean */
Sforce.LeadConvert.prototype.overwriteLeadSource = new Boolean();
/** @type String */
Sforce.LeadConvert.prototype.ownerId = new String();
/** Indication whether or not to send a notification email to the converted lead's email address.
 * @type Boolean */
Sforce.LeadConvert.prototype.sendNotificationEmail = new Boolean();
/** @return String 
 * @type String
 */
Sforce.LeadConvert.prototype.toSoap = function() {
	var output = "<leadConverts>";
	for (key in this) {
		if (key != "className") {
			if (Sforce.Util.dltypeof(this[key]) == "string" || Sforce.Util.dltypeof(this[key]) == "boolean") {
				if (Sforce.Util.dltypeof(this[key]) == "string") {
					if (this[key].length == 0) {
						output += "<" + key + " xsi:nil=\"true\"/>";
					} else {
						output += "<" + key + ">" + this[key] + "</" + key + ">";
					}
				} else {
					output += "<" + key + ">" + this[key].toString() + "</" + key + ">";
				}
			}
		}
	}
	return output + "</leadConverts>";
};


Sforce.LeadConvertResult = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "LeadConvertResult";

	if (soap) {
		this.errors = new Array();
		Sforce.loadObject(this, soap);
	}
}
Sforce.LeadConvertResult.prototype = new Sforce.SoapObject;
Sforce.LeadConvertResult.prototype.accountId = new String();
Sforce.LeadConvertResult.prototype.contactId = new String();
Sforce.LeadConvertResult.prototype.errors = new Array();
Sforce.LeadConvertResult.prototype.leadid = new String()
Sforce.LeadConvertResult.prototype.opportunityId = new String();
Sforce.LeadConvertResult.prototype.success = new Boolean();

Sforce.DescribeGlobalResult = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "DescribeGlobalResult";

	if (soap) {
		this.types = new Array();
		Sforce.loadObject(this, soap);
		//var t = soap.getElementsByTagName("types");
		//for (var x=0;x<t.length;x++) {
		//	this.types[x] = Sforce.DOM.GetNodeValue(t[x]);
		//}
	}
}
Sforce.DescribeGlobalResult.prototype = new Sforce.SoapObject;
Sforce.DescribeGlobalResult.prototype.encoding = new String();
Sforce.DescribeGlobalResult.prototype.maxBatchSize = 0;
Sforce.DescribeGlobalResult.prototype.types = new Array();

Sforce.DescribeGlobalResult.prototype.toString = function() {
	var out = "maxBatchsize: " + this.maxBatchSize + "\n";
	out += "encoding: " + this.encoding + "\n";
	out += "types: \n";
	for (var i=0;i<this.types.length;i++) {
		out += "    " + this.types[i] + "\n";
	}
	return out;
};

Sforce.DescribeLayoutResult = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "DescribeLayoutResult";

	if (soap) {
		this.layouts = new Array();
		this.recordTypeMappings = new Array();
		Sforce.loadObject(this, soap);
	}
}
Sforce.DescribeLayoutResult.prototype = new Sforce.SoapObject;
Sforce.DescribeLayoutResult.prototype.layouts = new Array();
Sforce.DescribeLayoutResult.prototype.recordTypeMappings = new Array();

Sforce.DescribeLayout = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "DescribeLayout";

	if (soap) {
		this.detailLayoutSections = new Array();
		this.editLayoutSections = new Array();
		Sforce.loadObject(this, soap);
	}
}
Sforce.DescribeLayout.prototype = new Sforce.SoapObject;
Sforce.DescribeLayout.prototype.detailLayoutSections = new Array();
Sforce.DescribeLayout.prototype.editLayoutSections = new Array();
Sforce.DescribeLayout.prototype.id = new String();

Sforce.RecordTypeMapping = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "RecordTypeMapping";

	if (soap) {
		this.picklistsForRecordType = new Array();
		Sforce.loadObject(this, soap);
	}
}
Sforce.RecordTypeMapping.prototype = new Sforce.SoapObject;
Sforce.RecordTypeMapping.prototype.available = new Boolean();
Sforce.RecordTypeMapping.prototype.defaultRecordTypeMapping = new Boolean();
Sforce.RecordTypeMapping.prototype.layoutId = new String();
Sforce.RecordTypeMapping.prototype.name = new String();
Sforce.RecordTypeMapping.prototype.picklistsForRecordType = new Array();
Sforce.RecordTypeMapping.prototype.recordTypeId = new String();

Sforce.PicklistForRecordType = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "PicklistForRecordType";

	if (soap) {
		this.picklistValues = new Array();
		Sforce.loadObject(this, soap);
	}
}
Sforce.PicklistForRecordType.prototype = new Sforce.SoapObject;
Sforce.PicklistForRecordType.prototype.picklistName = new String();
Sforce.PicklistForRecordType.prototype.picklistValues = new Array();

Sforce.LayoutComponentType = new Object();
Sforce.LayoutComponentType.Field = "Field";
Sforce.LayoutComponentType.Separator = "Separator";

Sforce.DescribeLayoutSection = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "DescribeLayoutSection";

	if (soap) {
		this.layoutRows = new Array();
		Sforce.loadObject(this, soap);
	}
}
Sforce.DescribeLayoutSection.prototype = new Sforce.SoapObject;
Sforce.DescribeLayoutSection.prototype.columns = 0;
Sforce.DescribeLayoutSection.prototype.heading = new String();
Sforce.DescribeLayoutSection.prototype.layoutRows = new Array();
Sforce.DescribeLayoutSection.prototype.rows = 0;
Sforce.DescribeLayoutSection.prototype.useCollapsibleSection = new Boolean();
Sforce.DescribeLayoutSection.prototype.useHeading = new Boolean();

Sforce.DescribeLayoutRow = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "DescribeLayoutRow";

	if (soap) {
		this.layoutItems = new Array();
		Sforce.loadObject(this, soap);
	}
}
Sforce.DescribeLayoutRow.prototype = new Sforce.SoapObject;
Sforce.DescribeLayoutRow.prototype.layoutItems = new Array();
Sforce.DescribeLayoutRow.prototype.numItems = 0;

Sforce.DescribeLayoutItem = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "DescribeLayoutItem";

	if (soap) {
		this.layoutComponents = new Array();
		Sforce.loadObject(this, soap);
	}
}
Sforce.DescribeLayoutItem.prototype = new Sforce.SoapObject;
Sforce.DescribeLayoutItem.prototype.editable = new Boolean();
Sforce.DescribeLayoutItem.prototype.label = new String();
Sforce.DescribeLayoutItem.prototype.layoutComponents = new Array();
Sforce.DescribeLayoutItem.prototype.placeholder = new Boolean();
Sforce.DescribeLayoutItem.prototype.required = new Boolean();

Sforce.DescribeLayoutComponent = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "DescribeLayoutComponent";

	if (soap) {
		Sforce.loadObject(this, soap);
	}
}
Sforce.DescribeLayoutComponent.prototype = new Sforce.SoapObject;
Sforce.DescribeLayoutComponent.prototype.tabOrder = 0;
Sforce.DescribeLayoutComponent.prototype.type = new String();
Sforce.DescribeLayoutComponent.prototype.value = new String();

/*
 * 2/27/2006 DJC - Fixed label and sobjectName fields to be strings instead of boolean.
*/
Sforce.DescribeTab = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "DescribeTab";

	if (soap) {
		Sforce.loadObject(this, soap);
	}
}
Sforce.DescribeTab.prototype = new Sforce.SoapObject;
Sforce.DescribeTab.prototype.custom = new Boolean();
Sforce.DescribeTab.prototype.label = new String();
Sforce.DescribeTab.prototype.sobjectName = new String();
Sforce.DescribeTab.prototype.url = new String();

Sforce.DescribeTabSetResult = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "DescribeTabSetResult";

	if (soap) {
		this.tabs = new Array();
		Sforce.loadObject(this, soap);
	}
}
Sforce.DescribeTabSetResult.prototype = new Sforce.SoapObject;
Sforce.DescribeTabSetResult.prototype.label = new String();
Sforce.DescribeTabSetResult.prototype.logoUrl = new String();
Sforce.DescribeTabSetResult.prototype.selected = new Boolean();
Sforce.DescribeTabSetResult.prototype.tabs = new Array();

Sforce.GetDeletedResult = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "GetDeletedResults";
	
	if (soap) {
		this.deletedRecords = new Array();
		Sforce.loadObject(this, soap);
	}
}
Sforce.GetDeletedResult.prototype = new Sforce.SoapObject;
Sforce.GetDeletedResult.prototype.deletedRecords = new Array();
Sforce.GetDeletedResult.prototype.sforceReserved = new String();

Sforce.DeletedRecord = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "GetDeletedResult";

	if (soap) {
		Sforce.loadObject(this, soap);
	}
}
Sforce.DeletedRecord.prototype = new Sforce.SoapObject;
Sforce.DeletedRecord.prototype.id = new String();
Sforce.DeletedRecord.prototype.deletedDate = new Date();

Sforce.GetUpdatedResult = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "GetUpdatedResult";

	if (soap) {
		this.ids = new Array();
		Sforce.loadObject(this, soap);
	}
}
Sforce.GetUpdatedResult.prototype = new Sforce.SoapObject;
Sforce.GetUpdatedResult.prototype.ids = new Array();
Sforce.GetUpdatedResult.prototype.sforceReserved = new String();

Sforce.GetUpdatedResult.prototype.toString = function() {
	var out = "";
	if (this.ids.length > 0) {
		for (var i=0;i<this.ids.length;i++) {
			out += (i + 1) + this.ids[i] + "\n";
		}
	} else {
		out += "No updated records found.";
	}
	return out;
};
Sforce.GetServerTimestampResult = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "GetServerTimestampResult";

	if (soap) {
		Sforce.loadObject(this, soap);
	}
	this.timeStamp = this.timestamp;
}
Sforce.GetServerTimestampResult.prototype = new Sforce.SoapObject;
Sforce.GetServerTimestampResult.prototype.timestamp = new Date();

Sforce.ResetPasswordResult = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "ResetPasswordResult";

	if (soap) {
		Sforce.loadObject(this, soap);
	}
}
Sforce.ResetPasswordResult.prototype = new Sforce.SoapObject;
Sforce.ResetPasswordResult.prototype.password = new String();

Sforce.SetPasswordResult = function(soap) {
	this.base = Sforce.SoapObject;
	this.base();
	this.className = "SetPasswordResult";
}
Sforce.SetPasswordResult.prototype = new Sforce.SoapObject;
Sforce.SetPasswordResult.prototype.toString = function() {
	return "setPasswordResult has no properties.";
};

Sforce.SearchResult = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "SearchResult";

	if (soap) {
		this.searchRecords = new Array();
		Sforce.loadObject(this, soap);
	}
}
Sforce.SearchResult.prototype = new Sforce.SoapObject;
Sforce.SearchResult.prototype.searchRecords = new Array();
Sforce.SearchResult.prototype.sforceReserved = new String();

/** @constructor */
Sforce.SaveResults = function() { var a = new Array(); a.className = "SaveResults"; return a;};
/** @ignore */
Sforce.SaveResults.prototype.noop = function() {};

Sforce.SaveResult = function(soap) {
	this.base = Sforce.SoapObject;
	this.base();
	this.className = "SaveResult";

	if (soap) {
		this.errors = new Array();
		Sforce.loadObject(this, soap);
	}
}
Sforce.SaveResult.prototype = new Sforce.SoapObject;
Sforce.SaveResult.prototype.id = new String();
Sforce.SaveResult.prototype.success = new Boolean();
Sforce.SaveResult.prototype.errors = new Array();

/** @constructor */
Sforce.DeleteResults = function() { var a = new Array(); a.className = "DeleteResults"; return a;};
/** @ignore */
Sforce.DeleteResults.prototype.noop = function() {};

Sforce.DeleteResult = function(soap) {
	this.base = Sforce.SoapObject;
	this.base();
	this.className = "DeleteResult";

	if (soap) {
		this.errors = new Array();
		Sforce.loadObject(this, soap);
	}
}
Sforce.DeleteResult.prototype = new Sforce.SoapObject;
Sforce.DeleteResult.prototype.id = new String();
Sforce.DeleteResult.prototype.success = new Boolean();
Sforce.DeleteResult.prototype.errors = new Array();

/** @constructor */
Sforce.UpsertResults = function() { var a = new Array(); a.className = "UpsertResults"; return a;};
/** @ignore */
Sforce.UpsertResults.prototype.noop = function() {};

Sforce.UpsertResult = function(soap) {
	this.base = Sforce.SoapObject;
	this.base();
	this.className = "UpsertResult";
	
	if (soap) {
		this.errors = new Array();
		Sforce.loadObject(this, soap);
	}
}
Sforce.UpsertResult.prototype = new Sforce.SoapObject;
Sforce.UpsertResult.prototype.created = new Boolean();
Sforce.UpsertResult.prototype.id = new String();
Sforce.UpsertResult.prototype.success = new Boolean();

Sforce.Error = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "Errors";

	if (soap) {
		this.fields = new Array();
		Sforce.loadObject(this, soap);
	}
}
Sforce.Error.prototype = new Sforce.SoapObject;
Sforce.Error.prototype.fields = new Array();
Sforce.Error.prototype.message = new String();
Sforce.Error.prototype.statusCode = new String();

Sforce.DescribeSObjectResult = function(soap) {
	this.base = Sforce.SoapObject;
	this.base();
	this.className = "DescribeSObjectResult";
	
	createChildRelationships = function(node) {
		if (node.length == 0) {
			return new Sforce.Hashtable();
		} else {
			var ret = new Sforce.Hashtable();
			for (var i=0;i<node.length;i++) {
				var cr = new Sforce.ChildRelationship();
				cr.cascadeDelete = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (node[i], "cascadeDelete"));
				cr.childSObject = Sforce.DOM.GetElementValue (node[i], "childSObject");
				cr.field = Sforce.DOM.GetElementValue (node[i], "field");
				cr.relationshipName = Sforce.DOM.GetElementValue (node[i], "relationshipName");
				if (cr.relationshipName == null) {
					ret.addItem(cr.childSObject, cr);
				} else {
					ret.addItem(cr.relationshipName, cr);
				}
			}
			return ret;
		}
	};
	createPicklistValues = function(node) {if (node.length == 0) {return new Array();} else {var ret = new Array();for (var i=0;i<node.length;i++) {var picklistEntry = new Sforce.PicklistEntry();picklistEntry.active = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (node[i], "active"));picklistEntry.defaultValue = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (node[i], "defaultValue"));picklistEntry.label = Sforce.DOM.GetElementValue (node[i], "label");picklistEntry.value = Sforce.DOM.GetElementValue (node[i], "value");ret[i] = picklistEntry;}return ret;}};
	createFields = function(node, _this) {
		if (node[0].getAttribute("xsi:nil") == "true") {
			return new Array();
		} else {
			var ret = new Array();
			for (var i=0;i<node.length;i++) {
				var field = new Sforce.Field();
				field.type = Sforce.DOM.GetElementValue (node[i], "type");
				field.autoNumber = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (node[i], "autoNumber"));
				field.byteLength = parseInt(Sforce.DOM.GetElementValue (node[i], "byteLength"));
				field.calculated = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (node[i], "calculated"));
				field.controllerName = Sforce.DOM.GetElementValue(node[i], "controllerName");
				field.createable = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (node[i], "createable"));
				field.custom = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (node[i], "custom"));
				field.defaultedOnCreate = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (node[i], "defaultedOnCreate"));
				field.dependentPicklist = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue(node[i], "dependentPicklist"));
				field.digits = parseInt(Sforce.DOM.GetElementValue (node[i], "digits"));
				field.externalId = Sforce.DOM.GetElementValue(node[i], "externalId");
				field.filterable = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (node[i], "filterable"));
				field.htmlFormatted = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue(node[i], "htmlFormatted"));
				field.label = Sforce.DOM.GetElementValue (node[i], "label");
				field.length = parseInt(Sforce.DOM.GetElementValue (node[i], "length"));
				field.name = Sforce.DOM.GetElementValue (node[i], "name");
				field.nameField = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (node[i], "nameField"));
				field.nillable = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (node[i], "nillable"));
				if (field.type == "picklist" || field.type == "multipicklist" || field.type == "combobox" ) {
					field.picklistValues = createPicklistValues(node[i].getElementsByTagName("picklistValues"));
				}
				field.precision = parseInt(Sforce.DOM.GetElementValue (node[i], "precision"));
				if (field.type == "reference") {
					var relationshipName = Sforce.DOM.GetElementValue (node[i], "relationshipName");
					if (relationshipName != null) {
						field.relationshipName = relationshipName;
						_this.parentRelationships.addItem(field.relationshipName, field);
					}
					var refs = node[i].getElementsByTagName("referenceTo");
					if (refs.length == 0) {
						field.referenceTo = new Array();
					} else if (refs[0].getAttribute("xsi:nil") == "true") {
						field.referenceTo = new Array();
					} else {
						var refs_f = new Array();
						for (var j=0;j<refs.length;j++) {
							refs_f[j] = Sforce.DOM.GetNodeValue(refs[j]);
						}
						field.referenceTo = refs_f;
					}
				}
				field.restrictedPicklist = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (node[i], "restrictedPicklist"));
				field.scale = parseInt(Sforce.DOM.GetElementValue (node[i], "scale"));
				field.soapType = Sforce.DOM.GetElementValue (node[i], "soapType");
				field.updateable = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (node[i], "updateable"));
				ret[i] = field;
				_this.fieldMap.addItem(field.name.toLowerCase(), field);
				if (_this.fieldList.length > 0) {
					_this.fieldList += ", ";
				}
				_this.fieldList += field.name;
			}
			return ret;
		}
	};
	counter = 1;


	if (soap){
		this.activateable = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (soap, "activateable"));
		this.childRelationships = createChildRelationships(soap.getElementsByTagName("childRelationships"));
		this.createable = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (soap, "creatable"));
		this.custom = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (soap, "custom"));
		this.deletable = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (soap, "deleteable"));
		this.fieldMap = new Sforce.Hashtable();
		this.parentRelationships = new Sforce.Hashtable();
		this.fieldList = "";
		this.fields = createFields(soap.getElementsByTagName("fields"), this);
		this.keyPrefix = Sforce.DOM.GetElementValue (soap, "keyPrefix");
		this.label = Sforce.DOM.GetElementValue (soap, "label");
		this.labelPlural = Sforce.DOM.GetElementValue (soap, "labelPlural");
		this.layoutable = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (soap, "layoutable"));
		this.name = Sforce.DOM.GetNodeValue(Sforce.DOM.GetImmediateChildElementByName(soap, "name"));
		this.queryable = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (soap, "queryable"));
		this.replicateable = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (soap, "replicateable"));
		this.retrieveable = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (soap, "retrieveable"));
		this.searchable = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (soap, "searchable"));
		this.undeletable = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (soap, "undeleteable"));
		this.updateable = Sforce.DOM.GetBool(Sforce.DOM.GetElementValue (soap, "updateable"));
		this.urlDetail = Sforce.DOM.GetElementValue (soap, "urlDetail");
		this.urlEdit = Sforce.DOM.GetElementValue (soap, "urlEdit");
		this.urlNew = Sforce.DOM.GetElementValue (soap, "urlNew");
	}
}
Sforce.DescribeSObjectResult.prototype = new Sforce.SoapObject;
Sforce.DescribeSObjectResult.prototype.activateable = new Boolean();
Sforce.DescribeSObjectResult.prototype.childRelationships = new Sforce.Hashtable();
Sforce.DescribeSObjectResult.prototype.createable = new Boolean();
Sforce.DescribeSObjectResult.prototype.custom = new Boolean();
Sforce.DescribeSObjectResult.prototype.deletable = new Boolean();
Sforce.DescribeSObjectResult.prototype.fieldMap = new Sforce.Hashtable();
Sforce.DescribeSObjectResult.prototype.parentRelationships = new Sforce.Hashtable();
Sforce.DescribeSObjectResult.prototype.fieldList = new String();
Sforce.DescribeSObjectResult.prototype.fields = new Array();
Sforce.DescribeSObjectResult.prototype.keyPrefix = new String();
Sforce.DescribeSObjectResult.prototype.label = new String();
Sforce.DescribeSObjectResult.prototype.labelPlural = new String();
Sforce.DescribeSObjectResult.prototype.layoutable = new Boolean();
Sforce.DescribeSObjectResult.prototype.name = new String();
Sforce.DescribeSObjectResult.prototype.queryable = new Boolean();
Sforce.DescribeSObjectResult.prototype.replicateable = new Boolean();
Sforce.DescribeSObjectResult.prototype.retrieveable = new Boolean();
Sforce.DescribeSObjectResult.prototype.searchable = new Boolean();
Sforce.DescribeSObjectResult.prototype.undeletable = new Boolean();
Sforce.DescribeSObjectResult.prototype.updateable = new Boolean();
Sforce.DescribeSObjectResult.prototype.urlDetail = new String();
Sforce.DescribeSObjectResult.prototype.urlEdit = new String();
Sforce.DescribeSObjectResult.prototype.urlNew = new String();
Sforce.DescribeSObjectResult.prototype.contains = function(fieldName) { return this.fieldMap.containsItem(fieldName); };
Sforce.DescribeSObjectResult.prototype.getNameField = function() {
	var out = "Id";
	for (key in this.fieldMap.getKeys()) {
		if (this.fieldMap.getItem(key).nameField == true) {
			if (out == "Id") {
				out = this.fieldMap.getItem(key).name;
			} else {
				out += "," + this.fieldMap.getItem(key).name;
			}
		}
	}
	
	return out;
};
Sforce.DescribeSObjectResult.prototype.getFieldsAsSelectList = function() {
	var output = "";
	for (key in this.fieldMap.getKeys()) {
		output += key + ",";
	}
	return output.substring(output.length - 1);
}
var ind = 0;

Sforce.ChildRelationship = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "ChildRelationship";

	if (soap) {
		Sforce.loadObject(this, soap);
	}
}
Sforce.ChildRelationship.prototype = new Sforce.SoapObject;
Sforce.ChildRelationship.prototype.cascadeDelete = new Boolean();
Sforce.ChildRelationship.prototype.childSObject = new String();
Sforce.ChildRelationship.prototype.field = new String();
Sforce.ChildRelationship.prototype.relationshipName = new String();

Sforce.Field = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "Field";

	if (soap) {	
		this.picklistValues = new Array();
		this.referenceTo = new Array();  //strings
		Sforce.loadObject(this, soap);
	}
	counter = 1;

}
Sforce.Field.prototype = new Sforce.SoapObject;
Sforce.Field.prototype.autoNumber = new Boolean();
Sforce.Field.prototype.byteLength = 0;
Sforce.Field.prototype.calculated = new Boolean();
Sforce.Field.prototype.controllerName = new String();
Sforce.Field.prototype.createable = new Boolean();
Sforce.Field.prototype.custom = new Boolean();
Sforce.Field.prototype.defaultedOnCreate = new Boolean();
Sforce.Field.prototype.dependentPicklist = new Boolean();
Sforce.Field.prototype.digits = 0;
Sforce.Field.prototype.externalId = new String();
Sforce.Field.prototype.filterable = new Boolean();
Sforce.Field.prototype.htmlFormatted = new Boolean();
Sforce.Field.prototype.label = new String();
Sforce.Field.prototype.length = 0;
Sforce.Field.prototype.name = new String();
Sforce.Field.prototype.nameField = new Boolean();
Sforce.Field.prototype.nillable = new Boolean();
Sforce.Field.prototype.picklistValues = new Array();
Sforce.Field.prototype.precision = 0;
Sforce.Field.prototype.referenceTo = new Array();  //strings
Sforce.Field.prototype.relationshipName = new String();
Sforce.Field.prototype.restrictedPicklist = new Boolean();
Sforce.Field.prototype.scale = 0;
Sforce.Field.prototype.soapType = new String();
Sforce.Field.prototype.type = new String();
Sforce.Field.prototype.updateable = new Boolean();

Sforce.PicklistEntry = function(soap) {

	this.base = Sforce.SoapObject;
	this.base();
	this.className = "PicklistEntry";

	if (soap) {
		Sforce.loadObject(this, soap);
	}
}
Sforce.PicklistEntry.prototype = new Sforce.SoapObject;
Sforce.PicklistEntry.prototype.active = new Boolean();
Sforce.PicklistEntry.prototype.defaultValue = new Boolean();
Sforce.PicklistEntry.prototype.label = new String();
Sforce.PicklistEntry.prototype.validFor = new Array();
Sforce.PicklistEntry.prototype.value = new String();

/** @ignore */
Sforce.getResponseNode = function(response) {
	if (sforceClient.appType != Sforce.Application.Type.InternetExplorer) {
		var bNode = response.getElementsByTagName("Body")[0];
		for (i=0;i<bNode.childNodes.length;i++) {
			if (bNode.childNodes[i].nodeType == 1) {
				return bNode.childNodes[i];
			}
		}
	} else {
		return response.getElementsByTagName("soapenv:Body")[0].childNodes[0];
	}
}

/** @ignore */
Sforce.getResponseName = function(responseNode) {
	if (sforceClient.appType != Sforce.Application.Type.InternetExplorer) {
		return responseNode.localName;
	} else {
		return responseNode.baseName;
	}
}

/** @ignore */
Sforce.createSforceObject = function(response) {

	Sforce.Util.time_object.StartTiming();

	var responseDOM = response.responseXML;
	var returnvValue = null;
	if ((responseDOM.getElementsByTagName("soapenv:Fault").length > 0) || (responseDOM.getElementsByTagName("Fault").length > 0)) {
	/*<?xml version=\"1.0\"?>
<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">
	<soapenv:Body>
		<soapenv:Fault>
			<faultcode xmlns:ns1=\"urn:fault.partner.soap.sforce.com\">ns1:INVALID_LOGIN</faultcode>
			<faultstring>INVALID_LOGIN: Invalid username or password or locked out.</faultstring>
			<detail>
				<sf:fault xsi:type=\"sf:LoginFault\" xmlns:sf=\"urn:fault.partner.soap.sforce.com\">
					<sf:exceptionCode>INVALID_LOGIN</sf:exceptionCode>
					<sf:exceptionMessage>Invalid username or password or locked out.</sf:exceptionMessage>
				</sf:fault>
			</detail>
		</soapenv:Fault>
	</soapenv:Body>
</soapenv:Envelope>*/
		var responseNode = Sforce.getResponseNode(responseDOM);
		
		returnValue = new Sforce.Fault(responseNode);
	} else {
		var responseNode = Sforce.getResponseNode(responseDOM);

		var results = responseNode.getElementsByTagName("result");
		var name = Sforce.getResponseName(responseNode);
		
		switch (name) {
			case "loginResponse":
				returnValue = new Sforce.LoginResult(results[0]);
				break;
			case "queryResponse":
			case "queryMoreResponse":
				returnValue = new Sforce.QueryResult(results[0]);
				break;
			case "createResponse":
			case "updateResponse":
				var ret = new Sforce.SaveResults(); //Array();
				for (var i=0;i<results.length;i++) {
					ret[i] = new Sforce.SaveResult(results[i]); 
				}
				returnValue = ret;
				break;
			case "deleteResponse":
				var ret = new Sforce.DeleteResults(); //Array();
				for (var i=0;i<results.length;i++) {
					ret[i] = new Sforce.DeleteResult(results[i]); 
				}
				returnValue = ret;
				break;
			case "upsertResponse":
				var ret = new Sforce.UpsertResults();
				for (var i=0;i<results.length;i++) {
					ret[i] = new Sforce.UpsertResult(results[i]);
				}
				returnValue = ret;
				break;
			case "describeSObjectResponse":
				returnValue = new Sforce.DescribeSObjectResult(results[0]); 
				break;
			case "describeSObjectsResponse":
			    var desORet = new Array();
			    for (var i=0;i<results.length;i++) {
			        desORet.push(new Sforce.DescribeSObjectResult(results[i])); 
			    }
				returnValue = desORet; 
				break;
			case "describeGlobalResponse":
				returnValue = new Sforce.DescribeGlobalResult(results[0]);
				break;
			case "describeLayoutResponse":
				returnValue = new Sforce.DescribeLayoutResult(results[0]);
				break;
			case "describeTabsResponse":
				var tabret = new Array();
				for (var i=0;i<results.length;i++) {
					tabret.push(new Sforce.DescribeTabSetResult(results[i]));
				}
				returnValue = tabret;
				break;
			case "getServerTimestampResponse":
				returnValue = new Sforce.GetServerTimestampResult(results[0]);
				break;
			case "retrieveResponse":
				returnValue = Sforce.Serialization.DeserializeBeans(results);
				break;
			case "searchResponse":
				returnValue = new Sforce.SearchResult(results[0]);
				break;
			case "setPasswordResponse":
				returnValue = new Sforce.SetPasswordResult(results[0]);
				break;
			case "resetPasswordResponse":
				returnValue = new Sforce.ResetPasswordResult(results[0]);
				break;
			case "getUserInfoResponse":
				returnValue = new Sforce.GetUserInfoResult(results[0]);
				break;
			case "getUpdatedResponse":
				returnValue = new Sforce.GetUpdatedResult(results[0]);
				break;
			case "getDeletedResponse":
				returnValue = new Sforce.GetDeletedResult(results[0]);
				break;
			case "convertLeadResponse":
				var leadret = new Array();
				for (var i=0;i<results.length;i++) {
					leadret.push(new Sforce.LeadConvertResult(results[i]));
				}
				returnValue = leadret;
				break;
		}															
	}
	if (sforceClient.verbose == true) returnValue.__soap__ = response.responseText;
	return returnValue;
};
	
/** @ignore */
Sforce.getTypedValue = function(node, thisObject, key) {
	var target = key;
	var value = Sforce.DOM.GetNodeValue(node);
	
	window.setTimeout("", 50);
	switch (Sforce.Util.dltypeof(thisObject[key]).toLowerCase()) {
		case "boolean": 
			return Sforce.DOM.GetBool(value);
		case "function":
			return value;
		case "number":
			return parseInt(value);
		case "string":
			return value;
		case "undefined":
			return value;
		case "arguments":
			return value;
		case "hashtable":
			switch (key) {
				case "childRelationships":
					return new Sforce.ChildRelationship(node)
					break;
			}
			return retval;
		case "array":
			/*For the array, we will have to see what kind of object we*/
			/*are creating an array from based on the xsi type in the xml*/
			var arrayNode = node.parentNode.getElementsByTagName(key);
			var retval = new Array();
			for (var i=0;i<arrayNode.length;i++) {
				switch (key) {
					case "layouts":
						retval.push(new Sforce.DescribeLayout(arrayNode[i]));
						break;
					case "detailLayoutSections":
						retval.push(new Sforce.DescribeLayoutSection(arrayNode[i]));
						break;
					case "editLayoutSections":
						retval.push(new Sforce.DescribeLayoutSection(arrayNode[i]));
						break;
					case "recordTypeMappings":
						retval.push(new Sforce.RecordTypeMapping(arrayNode[i]));
						break;
					case "layoutRows":
						retval.push(new Sforce.DescribeLayoutRow(arrayNode[i]));
						break;
					case "layoutItems":
						retval.push(new Sforce.DescribeLayoutItem(arrayNode[i]));
						break;
					case "layoutComponents":
						retval.push(new Sforce.DescribeLayoutComponent(arrayNode[i]));
						break;
					case "picklistsForRecordType":
						retval.push(new Sforce.PicklistForRecordType(arrayNode[i]));
						break;
					case "tabs":
						retval.push(new Sforce.DescribeTab(arrayNode[i]));
						break;
					case "searchRecords":
						retval[i] = Sforce.Serialization.DeserializeBean(arrayNode[i].getElementsByTagName("record")[0]);
						break;
					case "types":
						retval.push(Sforce.DOM.GetNodeValue(arrayNode[i]));
						break;
					case "ids":
						retval.push(Sforce.DOM.GetNodeValue(arrayNode[i]));
						break;
					case "deletedRecords":
						retval.push(new Sforce.DeletedRecord(arrayNode[i]));
						break;
					case "errors":
						retval.push(new Sforce.Error(arrayNode[i]));
						break;
					case "childRelationships":
						retval.push(new Sforce.ChildRelationship(arrayNode[i]));
						break;
					case "fields":
						var fld = new Sforce.Field(arrayNode[i]);
						if (fld.type != "picklist") {
							fld.picklistValues = null;
						}
						if (fld.type != "reference") {
							fld.referenceTo = null;
						}
						retval.push(fld);
						break;
					case "picklistValues":
						retval.push(new Sforce.PicklistEntry(arrayNode[i]));
						break;
					case "referenceTo":
						retval.push(Sforce.DOM.GetNodeValue(arrayNode[i]));
						break;
				}
			}
			return retval;
		case "date":
			return Sforce.Util.FromIsoDateTime(value);
		case "error":
			return value;
		case "math":
			return value;
		case "null":
			return value;
		case "jsobject":
			return value;
		case "regexp":
			return value;
		case "getuserinforesult":
			return new Sforce.GetUserInfoResult(node);
	}
}

/** @ignore */
Sforce.setTypedValue = function(thisObject, key) {
	var target = key;
	var value = thisObject[key]; 
	switch (Sforce.Util.dltypeof(thisObject[key]).toLowerCase()) {
		case "boolean": 
			return value.toString();
		case "function":
			return value.toString();
		case "number":
			return value.toString();
		case "string":
			return value.toString();
		case "undefined":
			return value.toString();
		case "arguments":
			return value.toString();
		case "date":
			return Sforce.Util.ToIsoDateTime(value);
		case "error":
			return value.toString();
		case "math":
			return value.toString();
		case "null":
			return value.toString();
		case "jsobject":
			return value.toString();
		case "regexp":
			return value.toString();
	}
}

/** @ignore */
Sforce.hasGeocodeSchema = function(tableName) {
	var desc = sforceClient.DescribeSObject(tableName);
	var fldMap = desc.fieldMap;
	return (fldMap["lat__c"] != null && fldMap["lon__c"] != null);
}

Sforce.xloadObject = function(obj, node) {
	if (new Sforce.Application().get_type() == Sforce.Application.Type.InternetExplorer) {
		var nodeName = "baseName";
	} else {
		var nodeName = "localName";
	}
	for (var i=0;i<node.childNodes.length;i++) {
		var name  = node.childNodes[i][nodeName];
		var thisNode = node.childNodes[i];
		if (thisNode.getAttribute) {
			var t = thisNode.getAttribute("xsi:type");
		} else {
			var atts = thisNode.attributes;
			if (atts != undefined) {
				var t = atts.getNamedItem("type");
			} else {
				var t = null;
			}
		}
		if (t != null && t.indexOf(":") > -1) t = t.substring(t.indexOf(":") + 1);
		if (t != null) {
		//if ((thisNode.childNodes.length > 0 && thisNode.childNodes[0].nodeType != 3) == true) {
			//This could be an array, in which case we need to look at the attributes to determine
			//what kind of object to create.
			if (Sforce.Util.dltypeof(obj[name]) == "array") {
				switch (t.toLowerCase()) {
					case "sobject":
						obj[name].push(new Sforce.Dynabean("", true, thisNode));
						//obj[name].push(Sforce.Serialization.DeserializeBean(thisNode));
						break;
					case "saveresult":
						break;
					case "deleteresult":
						break;
				}
			} else if (obj.className && obj.className == "Dynabean") {
				if (obj[name] != undefined) {
					obj[name] = Sforce.getTypedValue(thisNode, obj, name);
					if (name.toLowerCase() == "type") obj.setType(obj[name]);
				} else {
					if (t != undefined) {
						var v = new Sforce[t](thisNode)
						obj.set(name, v);
					} else {
						obj.set(name, Sforce.getTypedValue(thisNode, obj, name));
					}
				}
			} else if (obj[name].className == "Hashtable") {
				//add a new hash entry
			} else {
				obj[name] = new Sforce[obj[name].className](thisNode);
			}
			//loadMe(newobj, node.childNodes[i]);
			//obj[name] = newobj;
		} else {
			if (obj.className && obj.className == "Dynabean") {
				if (obj[name] != undefined) {
					obj[name] = Sforce.getTypedValue(thisNode, obj, name);
					if (name.toLowerCase() == "type") obj.setType(obj[name]);
				} else {
					if (thisNode.getAttribute("xsi:nil") != "true") {
						obj.set(name, Sforce.getTypedValue(thisNode, obj, name));
					} else { 
						obj.set(name, null);
					}
				}
			} else if (obj[name] && obj[name].className) {
				if (obj[name].className == "Hashtable") {
					if (name == "childRelationships") {
						var ht = new Sforce.ChildRelationship(thisNode);
					} else if (name == "fields") {
						var ht = new Sforce.Field(thisNode);
					} else if (name == "parentRelationships") {
						//var ht = new Sforce.
					}
					obj[name].addItem(ht.childSObject, ht);
				} else {
					obj[name] = new Sforce[obj[name].className](thisNode);
				}			
			} else {
				obj[name] = Sforce.getTypedValue(thisNode, obj, name);
			}
		}
		//if (thisNode.hasAttributes() == true) {
			if (thisNode.attributes) {
				for (var j=0;j<thisNode.attributes.length;j++) {
					var att = thisNode.attributes[j];
					var attName = att[nodeName];
					if (att.name.indexOf("xmlns") == -1) {
						if (obj[attName] != undefined && obj[attName].length == 0) {
							obj[attName] == Sforce.getTypedValue(att, obj, attName);
						}
					}
				}
			}
		//}
	}
};

/** @ignore */
Sforce.loadObject = function(thisObject, soap) {
	Sforce.Util.time_object.StartTiming();
	for (key in thisObject) {
		var objType = Sforce.Util.dltypeof(thisObject[key]).toLowerCase();
		if (objType != "function") { 
			var xyz = Sforce.DOM.GetImmediateChildElementByName(soap, key);
			if(xyz != null) {
				if (soap.getElementsByTagName(key).length > 0) {
					thisObject[key] = Sforce.getTypedValue(xyz, thisObject, key);
				}
			} 
		}
	}
}

/** @ignore */
Sforce.objectToHtmlString = function(obj, tab) {
	var output = "";
	if (tab == null) tab = "";
	for (key in obj) {
		var keyval = key.toString();
		if (Sforce.Util.dltypeof(obj[keyval]) != "function" && Sforce.Util.dltypeof(obj[keyval]) != "Field") {
			if (Sforce.Util.dltypeof(obj[keyval]) == "array") {
				if (obj[keyval].length > 0) {
					output += tab + "<B>" + keyval + "</B>";
					for (var i=0;i<obj[keyval].length;i++) {
						output += Sforce.objectToHtmlString(obj[keyval][i], tab + "&nbsp;&nbsp;&nbsp;&nbsp;");
					}
				}
			} else {
				output += tab + "<B>" + keyval + "</B>: ";
				if (obj[keyval] != undefined) {
					if (obj[keyval].toHtmlString) {
						output += obj[keyval].toHtmlString(tab + "&nbsp;&nbsp;&nbsp;&nbsp;");
					} else {
						output += obj[keyval].toString() + "<br>";
					}
				} else {
					output += "<br>";
				}
			}
		}
	}
	return output + "<BR>";
}

/** @ignore */
Sforce.objectToString = function(obj, x) {
	var output = "\n";
	if (x) output += x + ": ";
	for (key in obj) {
		var keyval = key.toString();
		if (Sforce.Util.dltypeof(obj[keyval]) != "function" && Sforce.Util.dltypeof(obj[keyval]) != "Field") {
			if (Sforce.Util.dltypeof(obj[keyval]).toLowerCase() == "array") {
				//if (obj[keyval].length > 0) {
					output += keyval + "\n";
					for (var i=0;i<obj[keyval].length;i++) {
						output += obj[keyval][i].toString();//Sforce.objectToString(obj[keyval][i], i);
					}
				//}
			} else {
				if (keyval != "definition") {
					output += keyval + ": ";
					if (obj[keyval] != undefined) {
							output += obj[keyval].toString() + "\n";
					} else {
						output += "\n";
					}
				}
			}
		}
	}
	return output;
}
// DOMFUNC.JS
/*
 * Copyright (c) 2005, salesforce.com, inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 *    Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 *    following disclaimer.
 *  
 *    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and 
 *    the following disclaimer in the documentation and/or other materials provided with the distribution. 
 *    
 *    Neither the name of salesforce.com, inc. nor the names of its contributors may be used to endorse or 
 *    promote products derived from this software without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 	sforceClient.registerInitCallback( function() {
		showDiv(soql_tester);
		doDescribeGlobal();
	});
AND ANY EXPRESS OR IMPLIED 
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR 
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED 
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 */
 /** 
 * @fileoverview The sforceclient.js file is the main interface for using
 * the sforce API from javascript.  Most of the methods exposed in this file
 * very closely match the interfaces described for in the sforce API documentation
 * for the web service.  It will be noted where the two interfaces diverge.
 * {@link http://www.sforce.com/resources/api.jsp Sforce API Documentation}
 *
 */

//DOM Functions
Sforce.DOM = function() {};
Sforce.DOM.prototype = new Function;
Sforce.DOM.GetElementValueByIndex = function(node, name, index) { 
	if (sforceClient.appType != Sforce.Application.Type.InternetExplorer) {
        if (node.getElementsByTagName(name)[0].firstChild == null) {return null;} else {return node.getElementsByTagName(name)[0].firstChild.data; }} else { try {return node.getElementsByTagName(name).item(index).text; } catch (e) {return node.getElementsByTagName("sf:" + name).item(index).text; }} };
Sforce.DOM.GetNodeByIndex = function(node, name, index) { 
	if (sforceClient.appType != Sforce.Application.Type.InternetExplorer) {
        if (node.getElementsByTagName(name)[0].firstChild == null) {return null;} else {var mNode = node.getElementsByTagName(name)[0];for (var i=0;i<mNode.childNodes.length;i++) {if (mNode.childNodes[i].nodeType == 1) {return mNode.childNodes[i];}}return null; }} else { try {return node.getElementsByTagName(name).item(index); } catch (e) {return node.getElementsByTagName("sf:" + name).item(index); }} };
Sforce.DOM.GetImmediateChildElementByName = function(node, name) {
	var ret = Sforce.DOM.GetImmediateChildElementsByName(node, name);
	if (ret == null) {
		return null;
	} else {
		return ret[0];
	}
};
Sforce.DOM.GetImmediateChildElementsByName = function(node, name) {
	if (sforceClient.appType != Sforce.Application.Type.InternetExplorer) {
		if (node.getElementsByTagName(name) == null) {
			return null;
		} else {
			var xnode = node.getElementsByTagName(name); 
			if (xnode.length > 0) {
				if (xnode.length == 1) {
					return [xnode[0]];
				} else {
					var nodes = new Array();
					for (var i=0;i<xnode.length;i++) {
						if (xnode[i].parentNode == node ) {
							nodes.push(xnode[i]);
							//return xnode[i];
						}
					}
					return nodes;
				}
				//return null;
			} else {
				return null;
			} 
		}
	} else { 
		var ret = node.getElementsByTagName(name);
		if (ret.length == 0) {
			ret = node.getElementsByTagName("sf:" + name);
		}
		if (ret.length > 0) {
			var nodes = new Array();
			for (var i=0;i<ret.length;i++) {
				if (node.baseName != "") {
					if (ret[i].parentNode == node) {
						//return ret[i];
						nodes.push(ret[i]);
					}
				} else {
					//return ret[i];
					nodes.push(ret[i]);
				} 
			}
			return nodes;
			//return null;
		} else {
			return null;
		}
	} 
};
Sforce.DOM.GetElementsByNameNS = function(node, name, ns) {
	if (sforceClient.appType != Sforce.Application.Type.InternetExplorer) {
        if (node.getElementsByTagName(name) == null) {return null;} else {return node.getElementsByTagName(name); }} else { try {var ret = node.getElementsByTagName(name);if (ret.length == 0) {ret = node.getElementsByTagName(ns + ":" + name);}return ret; } catch (e) {return node.getElementsByTagName(ns + ":" + name); }} };
Sforce.DOM.GetElementsByName = function(node, name) {
	if (sforceClient.appType != Sforce.Application.Type.InternetExplorer) {
		if (node.getElementsByTagName(name) == null) {
			return null;
		} else {
			return node.getElementsByTagName(name); 
		}
	} else { 
		try {
			var ret = node.getElementsByTagName(name);
			if (ret.length == 0) {
				ret = node.getElementsByTagName("sf:" + name);
			}
			return ret; 
		} catch (e) {
			return node.getElementsByTagName("sf:" + name); 
		}
	}
};

Sforce.DOM.GetElementValue = function(node, name) { 
	if (sforceClient.appType != Sforce.Application.Type.InternetExplorer) {
		var n = node.getElementsByTagName(name);
		if (n == null) {
			return null;
		} else if (n[0] == null) {
			return null;
		} else if (n[0].childNodes.length > 1) {
			return n[0];
		} else if (n[0].firstChild == null) {
			return null;
		} else {
			return n[0].firstChild.nodeValue; 
		}
	} else { 
		try {
			var n = node.getElementsByTagName(name)[0];
			if (n == null) 
				n = node.getElementsByTagName("sf:" + name)[0];
			if (n == null) 
				return null;
			if (n.childNodes.length > 1) { 
				return n;
			} else {
				return n.text;
			} 
		} catch (e) {
			var en = node.getElementsByTagName(name)[0];
			if (n.childNodes.length > 1) {
				return en;
			} else {
				return node.getElementsByTagName("sf:" + name)[0].text; 
			}
		}
	}
};
Sforce.DOM.GetAttributeValue = function(node, name) {
	var val = node.attributes.getNamedItem(name); 
	if (val.nodeValue.indexOf(":") != -1) { 
		return val.nodeValue.substring(3); } else { return val.nodeValue; } };
Sforce.DOM.GetNodeValue = function(node) {
	if (sforceClient.appType != Sforce.Application.Type.InternetExplorer) {
        if (node.nodeValue == null && node.childNodes.length == 1) {return node.childNodes[0].nodeValue;} else {return node.nodeValue;}} else {return node.text;}};
Sforce.DOM.GetNodeName = function(node) {
	if (sforceClient.appType != Sforce.Application.Type.InternetExplorer) {
        return node.localName;} else {return node.baseName;}};
Sforce.DOM.GetBool = function(val) {if (val == null) return new Boolean(false);if (val.toLowerCase() == "true") {return new Boolean(true);} else {return new Boolean(false);}};
Sforce.DOM.ParseVal = function(value, name ,desc) {
	var fldDef = desc.fieldMap.getItem(name.toLowerCase());
	if (fldDef == null) {
		var cr = desc.childRelationships.getItem(name.toLowerCase());
		if (cr != null) {
			//This is an object definition for a child relationship
			//This should be a queryResult with all the records of the child object
			return new Sforce.QueryResult(value);
		} else {
			return Sforce.Serialization.DeserializeBean(value);
		}

	} else {
		if (value == null || value.length == 0) {
			return null;
		}
		var fldType = fldDef.type;
		if (fldType == "string" || fldType == "picklist" || fldType == "multipicklist" || fldType == "combobox" || fldType == "reference" || fldType == "textarea" || fldType == "phone" || fldType == "id" || fldType == "url" || fldType == "email") {
			return value;
		} else if (fldType == "boolean") {
			if (value.toLowerCase() == "false") {
				return false;
			} else {
				return true;
			}
		} else if (fldType == "currency" || fldType == "double" || fldType == "percent") {
			return parseFloat(value);
		} else if (fldType == "date" || fldType == "datetime") {
			return Sforce.Util.FromIsoDateTime(value);
		} else {
			return value;
		}
	}
};
Sforce.DOM.LoadXmlDoc = function(a) {try { if (typeof ActiveXObject!="undefined" && typeof GetObject!="undefined"){var b = new ActiveXObject("Microsoft.XMLDOM");b.load(a);return b;} else if (typeof DOMParser!="undefined") {var req = new XMLHttpRequest();req.open("GET", a, false); req.send(null);return dom = req.responseXML;} else {return null;}} catch(c) {w.incompatible("xmlparse")}};
Sforce.DOM.CreateXmlDoc = function(a) {try { if (typeof ActiveXObject!="undefined" && typeof GetObject!="undefined"){var b = new ActiveXObject("Microsoft.XMLDOM");b.loadXML(a);return b;} else if (typeof DOMParser!="undefined") {return (new DOMParser()).parseFromString(a,"text/xml")} else {return null;}} catch(c) {w.incompatible("xmlparse")}};

Sforce.Serialization = function() {};
Sforce.Serialization.prototype = new Function;
Sforce.Serialization.cDeserializeBean = function(node) {	
	if (new Sforce.Application().get_type() == Sforce.Application.Type.InternetExplorer) {
		var nodeName = "baseName";
	} else {
		var nodeName = "localName";
	}

	var numNodes = node.childNodes.length;
	var beanType = "";
	var fields = new Array();
	for (var i=0;i<numNodes;i++) {
		var thisNode = node.childNodes[i];
		var elementName = thisNode[nodeName];
		if (elementName == "type") {
			beanType = elementName;
		} else {
			fields.push([elementName, thisNode]);
		}
	}
	var bean = new Sforce.Dynabean(beanType);
	for (var i=0;i<fields.length;i++) {
		bean.set(fields[i][0], Sforce.DOM.ParseVal(fields[i][1], fields[i][0], bean.definition));
	}
	return bean;
};

Sforce.Serialization.DeserializeBean = function(node) {	
	var numNodes = node.childNodes.length ;	
	var typeName = Sforce.DOM.GetElementValue (node, "type");
	if (typeName == null) 
		return null;
	var bean = new Sforce.Dynabean(typeName, true);	
	var desc = bean.definition; 
	for ( var i = 0;i<numNodes ; i++) {	
		if (node.childNodes.item(i).nodeType == 1) {
			var CurrNode = node.childNodes.item(i); 
			if (Sforce.DOM.GetNodeName(CurrNode) != "type") { 
				var elName = Sforce.DOM.GetNodeName(CurrNode);
				var elVal = Sforce.DOM.ParseVal(Sforce.DOM.GetElementValue (node, elName), elName, desc);
				bean.set(elName, elVal);
			}
		}
	} 
	//if (node.getXML != undefined) {
	//	bean.setSoap(node.getXML());
	//} else {
	//	bean.setSoap(node.xml);
	//}
	return bean; 
};
Sforce.Serialization.SerializeBean = function(beans, filter) { 
	var output	= ""; 
	if (Sforce.Util.dltypeof(beans) == "array") {
		for (var i=0;i<beans.length;i++) { 
			output += beans[i].toSObject(filter); 
		} 
	} else {
		output += beans.toSObject(filter);
	}	
	/*if (beans.className != undefined) {
		output += beans.toSObject(filter);
	} else {
		for (var i=0;i<beans.length;i++) { 
			output += beans[i].toSObject(filter); 
		} 
	}*/
	return output;
};
Sforce.Serialization.DeserializeBeans = function(records) { var beans = new Array();	for (var i=0;i<records.length;i++) { var node = records[i]; var so = Sforce.Serialization.DeserializeBean(node);if (so != null)  {beans[i] = so; }} return beans; };
// DLTYPEOF.JS
/* dltypeof.js
*  by Peter Belesis. v1.0 040823
*  Copyright (c) 2004 Peter Belesis. All Rights Reserved.
*  Originally published and documented at http://www.dhtmlab.com/
*/
/*
 * Copyright (c) 2005, salesforce.com, inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 *    Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 *    following disclaimer.
 *  
 *    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and 
 *    the following disclaimer in the documentation and/or other materials provided with the distribution. 
 *    
 *    Neither the name of salesforce.com, inc. nor the names of its contributors may be used to endorse or 
 *    promote products derived from this software without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED 
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR 
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED 
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 */
Sforce.Util.dltypeof = function( vExpression ){	
	if (vExpression != null && vExpression.className) {
		return vExpression.className;
	}
	
	var sTypeOf = typeof vExpression;
	if( sTypeOf == "function" ){
		var sFunction = vExpression.toString();
		if( ( /^\/.*\/$/ ).test( sFunction ) ){
			return "regexp";
		} else if ( ( /^\[object.*\]$/i ).test( sFunction ) ){
			sTypeOf = "object"}
		}
		if ( sTypeOf != "object" ){
			return sTypeOf;
		}
		switch( vExpression ){
			case null:
				return "null";
			case window:
				return "window";
			case window.event:	
				return "event";
		}
		if( window.event && ( event.type == vExpression.type ) ){
			return "event";
		}
		var fConstructor = vExpression.constructor;
		if( fConstructor != null ){
			switch( fConstructor ){
				case Array:
					sTypeOf = "array";
					break;
				case Date:
					return "date";
				case RegExp:
					return "regexp";
				case Object:
					sTypeOf = "jsobject";
					break;
				case ReferenceError:
					return "error";
				default:
					var sConstructor = fConstructor.toString();
					var aMatch = sConstructor.match( /\s*function (.*)\(/ );
					if( aMatch != null ){
						return aMatch[ 1 ];
					}
			}
		}
		var nNodeType = vExpression.nodeType;
		if( nNodeType != null ){	
			switch( nNodeType ){
				case 1:
					if( vExpression.item == null ){
						return "domelement";
					}
					break;
				case 3:
					return "textnode";
			}
		}
	/*if( vExpression.toString != null ){
		var sExpression = vExpression.toString();
		var aMatch = sExpression.match( /^\[object (.*)\]$/i );
		if( aMatch != null ){
			var sMatch = aMatch[ 1 ];
			switch( sMatch.toLowerCase() ){
				case "event":
					return "event";
				case "math":
					return "math";
				case "error":	
					return "error";
				case "mimetypearray":
					return "mimetypecollection";
				case "pluginarray":
					return "plugincollection";
				case "windowcollection":
					return "window";
				case "nodelist":
				case "htmlcollection":
				case "elementarray":
					return "domcollection";
			}
		}
	}*/
	if( vExpression.moveToBookmark && vExpression.moveToElementText ){
		return "textrange";
	} else if( vExpression.callee != null ){
		return "arguments";
	} else if ( vExpression.item != null ){
		return "domcollection";
	}
	return sTypeOf;
};
Sforce.Util.Base64 = function() {
	keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	this.result = null;
};
Sforce.Util.Base64.prototype.encode = function (input) {
	return this.bencode(input);
};
Sforce.Util.Base64.prototype.bencode = function(input) {
	var output = "";
	var chr1, chr2, chr3 = "";
	var enc1, enc2, enc3, enc4 = "";
	var i = 0;
	do {	
		chr1 = input.charCodeAt(i++);
		chr2 = input.charCodeAt(i++);
		chr3 = input.charCodeAt(i++);
		enc1 = chr1 >> 2;
		enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
		enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
		enc4 = chr3 & 63;
		if (isNaN(chr2)) {
			enc3 = enc4 = 64;
		} else if (isNaN(chr3)) {
			enc4 = 64;
		}
		output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);
		chr1 = chr2 = chr3 = "";
		enc1 = enc2 = enc3 = enc4 = "";
	} while (i < input.length);
	return output;
};
Sforce.Util.Base64.prototype.decode = function (input, callback) {
	if (callback != undefined) {
		setTimeout(this.bdecode(input, callback), 200);
	} else {
		return this.bdecode(input);
	}
};
Sforce.Util.Base64.prototype.bdecode = function(input, callback){
	var output = "";
	var chr1, chr2, chr3 = "";
	var enc1, enc2, enc3, enc4 = "";
	var i = 0;
	var base64test = /[^A-Za-z0-9\+\/\=]/g;
	if (base64test.exec(input)) {
		alert("There were invalid base64 characters in the input text.\n" +"Valid base64 characters are A-Z, a-z, 0-9, '+', '/', and '='\n" +"Expect errors in decoding.");
	}
	input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
	do {
		enc1 = keyStr.indexOf(input.charAt(i++));
		enc2 = keyStr.indexOf(input.charAt(i++));
		enc3 = keyStr.indexOf(input.charAt(i++));
		enc4 = keyStr.indexOf(input.charAt(i++));
		chr1 = (enc1 << 2) | (enc2 >> 4);
		chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
		chr3 = ((enc3 & 3) << 6) | enc4;
		output = output + String.fromCharCode(chr1);
		if (enc3 != 64) {
			output = output + String.fromCharCode(chr2);
		}
		if (enc4 != 64) {
			output = output + String.fromCharCode(chr3);
		}
		chr1 = chr2 = chr3 = "";
		enc1 = enc2 = enc3 = enc4 = "";
	} while (i < input.length);
	if (callback != undefined) {
		setTimeout(callback(output), 200);
	} else {
		return output;
	}
};

/*
 * Copyright (c) 2005, salesforce.com, inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 *    Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 *    following disclaimer.
 *  
 *    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and 
 *    the following disclaimer in the documentation and/or other materials provided with the distribution. 
 *    
 *    Neither the name of salesforce.com, inc. nor the names of its contributors may be used to endorse or 
 *    promote products derived from this software without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED 
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR 
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED 
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 */


Sforce.Dynabean = function(objectType, fromServer)
{
	this.base = Sforce.Hashtable;
	this.base();
	this.className = "Dynabean";
	this.definition = sforceClient.DescribeSObject(objectType);

	setUrls = function() {
		if (this.definition != undefined && this.definition.urlDetail != undefined) {
			this.urlPrefix = this.definition.urlDetail.substring(this.definition.urlDetail.indexOf("{") - 1);
			this.urlDetail = this.definition.urlDetail;
			this.urlEdit = this.definition.urlEdit;
			this.urlNew = this.definition.urlNew;
		}	
	}

	this.urlPrefix = null;
	this.urlDetail = null;
	this.urlEdit = null;
	this.urlNew = null;
	this.uid = (new Date().getTime());
	this.dirty = false;
	this.fieldsToNull = [];
	this.fromServer = fromServer || false;
	
	//this._properties = new Sforce.Hashtable();
	this.name = objectType;
	this.type = objectType;
	
	/* To String internal helper */
	this.ts = function(instance, tab, cr) {
		var output = instance.getName() + cr;
		if (tab == undefined) { tab = "    "; }
		for (key in instance.getKeys()) {
			if (instance.map[key].className == "Property") {
				var pstring = instance.getItem(key).toString();
				if (tab != undefined) {
					output += tab;
				}
			}
			output += tab + key + ": " + pstring;
			if (cr != undefined) {
				output += cr;
			}
		}
		return output + cr;
	};
	this.dataChanged = null;
	setUrls();
};
Sforce.Dynabean.prototype = new Sforce.Hashtable;
Sforce.Dynabean.prototype.setType = function(objectType) {
	this.name = objectType;
	this.type = objectType;
	this.definition = sforceClient.DescribeSObject(objectType);
	setUrls();
}
/**
 * Returns the Name of the bean.  The name is the same as the object type that it represents.  This can be considered the "class" name of the bean.
 * @type String
 */
Sforce.Dynabean.prototype.getName = function() { return this.type;};
Sforce.Dynabean.prototype.getSoap = function (){return this.soap;};
Sforce.Dynabean.prototype.setSoap = function (s){ this.soap = s; };
Sforce.Dynabean.prototype.save = function() {
	if (this.fromServer == true || this.containsItem("id") == true) {
		var sr = sforceClient.Update([this])[0];
	} else {
		var sr = sforceClient.Create([this])[0];
	}
	return sr;
};

/**
 * Returns all the dynamically created properties of a bean
 * @type DynaProperty[]
 */
//Sforce.Dynabean.prototype.getProperties = function () { return this.getProperties(); };
/**
 * Returns a text representation of the bean with each property on a tabbed line followed by a carriage return
 * @type String
 */
Sforce.Dynabean.prototype.toString = function(tab) { return this.ts(this, (tab != undefined) ? tab : "\t", "\n"); };
/**
 * Returns an html string representation of the bean with each property on a tabbed line followed by a line break
 * @type String
 */
Sforce.Dynabean.prototype.toHTMLString = function() { return ts("&nbsp;&nbsp;&nbsp;&nbsp;", "<br>"); };
/**
 * Returns a single named property from the bean
 * @type DynaProperty
 */
Sforce.Dynabean.prototype.getProperty = function(propName) { 
	return this.getItem(propName.toLowerCase()); };
/**
 * Adds a new property to the collection of properties on the bean
 * @param {DynaProperty} prop The property to add to the collection.
 * @type void
 */
Sforce.Dynabean.prototype.addProperty = function(prop) { 
	if (this.definition.fieldMap.containsItem(prop.getName()) == null) {	
		throw "The property " + prop.getName() + " is not a valid field.";	
	} else { 
		prop.label = this.definition.fieldMap.map.getItem(prop.getName()).label; 
		this.addItem(prop.getName(), prop); 
	}
};
/**
 * Returns the value of the property specified in the propName param
 * @param {String} propName The name of the property value to get. This parameter is NOT case sensitive.  The type of the value returned is dependent on the schema type for that field.
 * @type Typed Object
 */
Sforce.Dynabean.prototype.get = function(propName) { 
	var msg;	
	try { 
		return this.getItem(propName).value; 
	} catch (e) { 
		msg = "ERROR: Your " + this.type + " object does not contain a " + propName + " field."; 
	} 
	throw(msg);	
};
/**
 * Replaces the entire collection of properties on the bean.
 * @param {DynaProperty[]} properties The collection (array) of properties to set for the bean.
 * @type DynaProperty
 */
//Sforce.Dynabean.prototype.setProperties = function(properties) { for (var i=0;i<this.getProperties().length;i++) { if (this.getDefinition().fieldMap.getItem(properties[i].getName().toLowerCase()) == null) { throw "The property " + properties[i].getName() + " is not a valid field."; }	}setProperties(properties);	};
/**
 * Creates or modifies the a property with the specified name.  If the property does not yet exist on the bean a new property is created, otherwise the existing property value is replaced.
 * @param {String} propName The name of the property to set. This parameter is NOT case sensitive.
 * @param {Varies} propName The value of the property to set.
 * @type void
 */
Sforce.Dynabean.prototype.set = function(propName, value) { 
	var fldDef = this.definition.fieldMap.getItem(propName);
	var cr = this.definition.childRelationships.getItem(propName.toLowerCase());
	var rn = this.definition.parentRelationships.getItem(propName.toLowerCase());

	if (fldDef == null && cr == null && rn == null) { 
		throw "The property " + propName + " is not a valid field."; 
	} else { 
		//Validate type if possible
		//TODO validate other types
		if (fldDef != null) {
			if (fldDef.type == "date" || fldDef.type == "datetime") {
				if (Sforce.Util.dltypeof(value) != "date" && Sforce.Util.dltypeof(value) != "datetime" && value != null) {
					throw "Invalid type: You passed a " + Sforce.Util.dltypeof(value) + " but the field requires a " + fldDef.type + ".";
				} 
			}
		}
		if (this.containsItem(propName) == false) { 
			//this[lname] = value; 
			if (fldDef != null) {
				this.addItem(propName, new Sforce.Property(value, this, fldDef));	
			} else if (cr != null) {
				this.addItem(propName, new Sforce.Property(value, this, cr));
			} else {
				this.addItem(propName, new Sforce.Property(value, this, null, propName));
			}
		} else { 
			this.getItem(propName).setValue(value); 
		} 
		if (propName.toLowerCase() == "id") {
			if (this.urlEdit != undefined) {
				this.urlEdit = this.urlEdit.replace(/{ID}/, value);
				this.urlDetail = this.urlDetail.replace(/{ID}/, value);
			}
		}
	} 
};
/**
 * Returns the metadata definition of the bean.  This definition is obtained when the bean is constructed based on the results of a DescribeSObject call.  The describe result is cached.  This means that if the definition was not cached prior to instantiating a bean of a certain there may be a slignt delay during instantiation, otherwise, this value is retrieved from a cache.
 * @type DescribeSObjectResult
 */
Sforce.Dynabean.prototype.getDefinition = function() { return this.definition; };
/**
 * This is the serializer method that converts the bean into an SObject xml snippet.
 * @type String
 */
Sforce.Dynabean.prototype.toSObject = function beanToSObject(filter) { 
	var output = "<sObjects xmlns:ns3=\"urn:sobject.partner.soap.sforce.com\">"; 
	output += "<type xmlns=\"urn:sobject.partner.soap.sforce.com\">" + this.getName() + "</type>";
	for (var i = 0;i<this.fieldsToNull.length;i++) {
		output += "<fieldsToNull>" + this.fieldsToNull[i] + "</fieldsToNull>";
	}
	for (key in this.getKeys()) {	
		var prop = this.getItem(key); 
		if (prop && prop.className != undefined && prop.className == "Property") { 
			var fldDef = this.definition.fieldMap.getItem(prop.name.toLowerCase());
			if (fldDef != null) {	
				var addField = true;
				if (filter != undefined) {
					if (filter == "forupdate") {
						addField = (fldDef.updateable  == true || fldDef.name.toLowerCase() == "id");
					} else if (filter == "forcreate") {
						addField = (fldDef.createable == true);
						if (prop.element != undefined) {
							addField = addField && (prop.dirty == true);
						}
						//addField = (addField && (prop.element != undefined && prop.dirty == true))
					} else if (filter == "forupdate") {
						addField = (fldDef.updateable  == true || fldDef.name.toLowerCase() == "id");
						addField = (addField && fldDef.createable == true);
						addField = (addField && (prop.element != undefined && prop.dirty == true))
					}
				}		
				if (addField == true) {
					prop.type = fldDef.type; 
					output += prop.toSoap(); 
				}
			}	
		} 
	}	
	output += "</sObjects>"; 
	this.setSoap(output);
	return output;	
};
Sforce.Dynabean.prototype.toHeaderRow = function() {
	var tr = Sforce.doc.createElement("TR");
	for (key in this.getKeys()) {
		if (this.getItem(key).className && this.getItem(key).className == "Property") {
			tr.appendChild(this.getItem(key).toHeaderCell(null, "TH"));
		}
	}
	return tr;
};
Sforce.Dynabean.prototype.toRow = function(class_Name) {
	var tr = Sforce.doc.createElement("TR");
	for (key in this.getKeys()) {
		if (this.getItem(key).className && this.getItem(key).className == "Property") {
			tr.appendChild(this.getItem(key).toCell(class_Name));
		}
	}
	tr.className = class_Name
	return tr;
};

Sforce.Dynabean.prototype.clearDirtyFlag = function() {
	this.dirty = false;
	for (key in this.getKeys()) {
		if (this.getItem(key).dirty != undefined) {
			this.getItem(key).dirty = false;
		}
	}
};

// JScript source code
/* Propety Definition */
/**
  *@class This the base class for a DynaProperty, it can be considered an abstract class (no such thing in javascript really). 
  *- DO NOT USE THIS CLASS DIRECTLY
  */
Sforce.Property = function(value, parentBean, fldDef, name) {
	
	this.value = value;// || null;
	if (typeof(value) == "boolean") {
	    this.value = value;
	}
	if (fldDef == null) {
		if (parentBean == null) {
			this.name = name;
			this.type = "deferred";
			this.label = name;
			this.parentBean = null;
			this.fieldDef = null;
		} else {
			this.name = name;
			this.type = value.className;
			this.label = name;
			this.parentBean = parentBean;
			this.fieldDef = value.getDefinition();
		}
	} else if (fldDef.className == "ChildRelationship") {
		this.name = fldDef.relationshipName;
		this.type = fldDef.childSObject;
		this.label = this.name;
		this.parentBean = parentBean;
		this.fieldDef = fldDef;
	} else {
		this.name = fldDef.name;
		this.type = fldDef.type;
		this.label = fldDef.label;
		this.parentBean = parentBean;
		this.fieldDef = fldDef;
	}
	this.className = "Property";
	this.element = undefined;
	this.dirty = false;
	this.readOnly = false;

	this.onChange = undefined;
	this.onBeforeChange = undefined;	
	this.ts = function(tab) {
		if (this.value != null && this.value != "") {
			if (this.type == "date") {
				return "(" + this.type + ") " + Sforce.Util.FormatDate(this.value, "E NNN d yyyy");
			} else if (this.type == "datetime") {
				return "(" + this.type + ") " + Sforce.Util.FormatDate(this.value, "E NNN d HH:mm:ss yyyy");
			} else {
				return "(" + this.type + ") " + this.value.toString();
			} 
		} else {
			return this.name + ": (not set)";
		}
	};
}
/**
 * This method serializes a single property into a valid soap message element.  The element is namespace prefixed ns3.
 * @return String
 */
Sforce.Property.prototype.setOnChange = function(onchangeFunction) { this.onChanage = onchangeFunction; };
Sforce.Property.prototype.setOnBeforeChange = function(onBeforeChangeFunction) { this.onBeforeChange = onBeforeChangeFunction; };
//Sforce.Property.prototype.toSoap = function() { return this.toSoap(); };
Sforce.Property.prototype.toString = function() { return this.ts(); };
Sforce.Property.prototype.setValue = function(value) {
	var doChange = true;
	var obc = this.onBeforeChange;
	if (this.onBeforeChange != undefined) {
		doChange = this.onBeforeChange(this, value);
	}
	if (doChange == true) {
		parseValue(this, value);
		this.dirty = true;
		this.parentBean.dirty = true;
	} else {
		this.element.value = this.toFormattedValue();
	}
	if (this.onChange != undefined) {
		this.onChange(this);
	}
	function parseValue(prop, val) {
		switch (prop.type) {
			case "boolean": 
				prop.value = Boolean.parse(val); 
				break;
			case "int":
				prop.value = parseInt(val);
				break;
			case "currency":
			case "double":
			case "percent":
				prop.value = parseFloat(val);
				break;
			case "date":
			case "datetime":
				prop.value = Sforce.Util.ParseDate(val);
				break;
			default:
				prop.value = val;
				break;
		}
	};
};
Sforce.Property.prototype.toHeaderCell = function(className, type) { td = Sforce.doc.createElement(type); td.appendChild(Sforce.doc.createTextNode(this.label)); td.className = className;return td; }; 
Sforce.Property.prototype.toCell = function(className) {
	td = Sforce.doc.createElement("TD");
	var nb = Sforce.doc.createElement("NOBR");
	td.appendChild(nb);
	var tn = Sforce.doc.createTextNode( this.value == null ? "." : this.value.toString() );
	if (this.type == "id" || this.type == "reference") {
		var anch = Sforce.doc.createElement("A");
		if (Sforce.doc.location.href.indexOf("salesforce.com") > 0) {
			anch.setAttribute("href", this.parentBean.urlDetail);
		} else {
			anch.setAttribute("href", this.parentBean.urlPrefix + "/secur/frontdoor.jsp?sid=" + sforceClient.getSessionId() + "&retURL=/" + this.value);
		}
		anch.setAttribute("target", "_blank");
		anch.appendChild(tn);nb.appendChild(anch);
	} else {
		nb.appendChild(tn);
	}
	td.className = className;
	return td;
};
Sforce.Property.prototype.toSoap = function() { 
	if (this.value == null) return "";
	var xval; 
	switch (this.fieldDef.soapType) {
		case Sforce.SoapObject.SoapType.BASE64BINARY:
			var b64 = new Sforce.Util.Base64();
			xval = b64.encode(this.value);	
			break;
		case Sforce.SoapObject.SoapType.BOOLEAN:			xval = this.value;	break;
		case Sforce.SoapObject.SoapType.DOUBLE:			xval = this.value;	break;
		case Sforce.SoapObject.SoapType.INT:				xval = this.value;	break;
		case Sforce.SoapObject.SoapType.DATE:				if (this.value == null) {				xval = "";			} else {				xval = Sforce.Util.ToIsoDate(this.value);			}			break;
		case Sforce.SoapObject.SoapType.DATETIME:			if (this.value == null) {				xval = "";			} else {				xval = Sforce.Util.ToIsoDateTime(this.value); 			}			break;		
		default:			xval = this.value;			break;
	}
	//return "<ns3:" + this.name + "><![CDATA[" + xval + "]]></ns3:" + this.name + ">"; 
	if (this.parentBean.getName().toLowerCase() == "customsetup" && this.name.toLowerCase() == "value") {
	    return "<" + this.name.toLowerCase() + " xsi:type=\"xsd:string\" xmlns=\"\"><![CDATA[" + xval + "]]></" + this.name.toLowerCase() + ">"; 
	} else {
	    return "<ns3:" + this.name + "><![CDATA[" + xval + "]]></ns3:" + this.name + ">"; 
	}
	
};

Sforce.Property.prototype.toFormattedValue = function() {
	if (this.type == "date") {
		if (this.value != null) {
			return Sforce.Util.FormatDate(this.value, "MM/dd/yyyy");
		} else {
			return "";
		}
	} else if (this.type == "datetime") {
		if (this.value != null) {
			return Sforce.Util.FormatDate(this.value, "MM/dd/yyyy hh:mm:ss a");
		} else {
			return "";
		}
	} else if (this.type == "boolean") {
		return this.value == true ? "yes" : "no";
	} else if (this.type == "double") {
		return this.value = parseDouble(this.value);
	} else {
		return this.value;
	}
};

Sforce.Property.prototype.toPickList = function() {
	var plv = this.fieldDef.picklistValues;
	var sel = Sforce.doc.createElement("SELECT");
	for (var i=0;i<plv.length;i++) {
		var opt = Sforce.doc.createElement("OPTION");
		opt.value = plv[i].value;
		if (plv[i].label != null && plv[i].label != "") {
			opt.appendChild(doc.createTextNode(plv[i].label));
		} else {
			opt.appendChild(doc.createTextNode(plv[i].value));
		}
		if (plv[i].value == this.value) {
			opt.selected = true;
		}
		sel.appendChild(opt);
	}
	return sel;
}


Sforce.Util.Timestamp_class = function(current_time, start_time, end_time, time_difference) { 
	var this_current_time = current_time;
	var this_start_time = start_time;
	var this_end_time = end_time;
	var this_time_difference = time_difference;
	var timerStack = new Array();
	var _this = this;
	this.GetCurrentTime = function() {
		var my_current_timestamp = new Date();
		return my_current_timestamp.getTime();
	};
	this.StartTiming = function () {
		_this.this_start_time = _this.GetCurrentTime();
	};
	this.EndTiming = function() {
		_this.this_end_time = _this.GetCurrentTime();
		_this.this_time_difference = (this.this_end_time - this.this_start_time) / 1000;
		return _this.this_time_difference;
	};
};
Sforce.Util.time_object = new Sforce.Util.Timestamp_class(0, 0, 0, 0);
Sforce.Util.ParseSelectListFromSOQL = function(soql) {
	var x = soql.substring(soql.indexOf(" ") + 1);
	x = x.substring(0, x.toLowerCase().indexOf("from") - 1);
	x = x.split(",");
	for (var i=0;i<x.length;i++) {
		x[i] = x[i].trim();
	}
	return x;
};
</fileContent>
    <fileName>sforceclient_3.3.js</fileName>
    <name>Create New Opportunity 2</name>
    <supportsCaching>true</supportsCaching>
</Scontrol>
