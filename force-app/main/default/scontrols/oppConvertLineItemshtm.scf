<!-- saved from url=(0022)http://internet.e-mail -->
<html>
<head>
<title>Opportunity Line Items - 2 - Assets Converter ~ Powered by the Sforce AJAX Toolkit (Beta 1)</title>

<!--
THIS CUSTOM S-CONTROL USES THE SFORCE AJAX TOOLKIT TO ACCESS THE SFORCE API. THE SFORCE AJAX TOOLKIT
IS HOSTED ON BOTH SANDBOX.SFORCE.COM AND WWW.SFORCE.COM. THE VERSION ON SANDBOX.SFORCE.COM IS UPDATED
MORE FREQUENTLY. IF YOU CHOOSE TO MAINTAIN THE REFERENCE TO THE TOOLKIT HOSTED ON SFORCE YOU MUST ACCEPT
THAT CHANGES MADE THERE CAN CAUSE YOUR CUSTOM S-CONTROL TO BREAK. YOU MAY WISH, THEREFORE, TO COPY
THE LIBRARIES TO A KNOWN, CONTROLLED LOCATION TO PREVENT ADVERSE CONDITIONS.

THIS CUSTOM S-CONTROL WAS DISTRIBUTED ON 8/13/2005 AND HAS BEEN TESTED ON FIREFOX 1.0.4 AND IE 6.0.2
NO WARRANTIES OR SUPPORT ARE PROVIDED OR IMPLIED.
<script src="https://www.sforce.com/ajax/beta2/sforceclient.js" type="text/javascript"></script>

v3.5.06 added local date format, port to beta 3.3, add unit based button to flip this to line based convert
-->
<style type="text/css">
<!--
.TextLabel {FONT-WEIGHT: bold; FONT-SIZE: 9pt; COLOR: #000000; LINE-HEIGHT: 16px; FONT-FAMILY: 'Arial', 'Helvetica'; 
BACKGROUND-COLOR: #eeeeee; ReadOnly: True;BORDER-TOP-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; 
BORDER-BOTTOM-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; }
-->
</style>
<script src="https://www.salesforce.com/services/lib/ajax/beta3.3/sforceclient.js" type="text/javascript"></script>

<link href="/css/ie_global.css" rel="stylesheet" type="text/css">
<link href="/css/ie_navigation.css" rel="stylesheet" type="text/css">
<link href="/css/opportunities_styles.css" rel="stylesheet" type="text/css">

<script type="text/javascript" src="/js/functions.js"></script>
<link  href="/dCSS/Theme2/default/common.css" type="text/css" media="handheld,print,projection,screen,tty,tv" rel="stylesheet" >
<link  href="/dCSS/Theme2/default/custom.css" type="text/css" media="handheld,print,projection,screen,tty,tv" rel="stylesheet" >
<link  href="/css/assistive.css" type="text/css" media="aural,braille,embossed" rel="stylesheet" >


<script language="javascript">
<!--
// if true, each asset is created with a qty of 1, other wise match prod line items qty
var Unit_Based_Products = false; // this default matches asset qty to opp line items qty
var AddMoreFlag=false;
var AddMoreTimes=0;
var mTotalRows=0;// variable to hold the total number of rows displayed
var mTotalRowsDisplayed=0;

var dformat ; // format of the date this user normaly sees 
// following are for the popup calendar
// these variables define the date formatting we're expecting and outputting.
// If you want to use a different format by default, change the defaultDateSeparator
// and defaultDateFormat variables either here or on your HTML page.
// latest version tries to determine which format to use given your locale
var defaultDateSeparator = "/";		// common values would be "/" or "."
var defaultDateFormat = "mdy"	// valid values are "mdy", "dmy", and "ymd"
var dateSeparator = defaultDateSeparator;
var dateFormat = defaultDateFormat;
var Quantity_First_Row_Display_Unit_Based_Products="";
var AllBoxesCheckedFlag=false;
var qrProductLineVersion;

var arrOpportunityLineQuantity = new Array();


function initPage() {
//DescAsset();
    /**
    Including the two merge fields below will enable this sforce control when used in your account.
    */
    sforceClient.init("{!API.Session_ID}", "{!API.Partner_Server_URL_70}");
    var uInfo = sforceClient.GetUserInfo(); 
	if ( uInfo && uInfo.faultcode && uInfo.faultcode.indexOf("API_DISABLED_FOR_ORG")>0) {
		alert( uInfo.faultstring +
			"\nThis custom link utilizes the AppExchange API.\n" +
			"It appears that the Salesforce.com edition you are using does not have this feature enabled."
		);
		top.location.replace("/{!Opportunity.Id}"); 
		return; 
	}
	dformat = Sforce.Util.ParseDateFormat("{!Today}",uInfo.userLocale);
	
     	switch ( dformat.substr(0,1) ) { // also set defaultDateFormat for date picker now
		case 'd': defaultDateFormat = "dmy"; break;
		case 'm': defaultDateFormat = "mdy"; break;
		case 'y': defaultDateFormat = "ymd"; break;
	}
	
    /**
    Validating that the Opportunity is valid for consideration. In this case
    the Opportunity must have line items and be closed.
    */
    hasLineItems   = new Boolean({!Opportunity.HasOpportunityLineItem});
    isClosed       = new Boolean({!Opportunity.IsClosed});

    /**
    Look for the custom field that indicates when the assets were created from the
    line items on the opportunity. If the customer does not implement this custom field
    then the user will be asked before the Assets are created.
    */
    checkConverted = checkForCustomField("Assets_Created_Date__c","Opportunity");

    /**
    Getting this value (convertedDate) so we know whether to allow the conversion. If the customer has this
    field then it must be empty for the conversion to be accepted. This means they can only
    process the conversion once. 
    */
   	convertedDate  = check_converted();  
   	// will have to query the assets to see if one exists for the exact opportunity
	// instead products against for assets of this account, with this name and the same close date as purchase date...

     qrProductLineVersion = sforceClient.Query("Select  ProductLine__c,  Version__c from Asset_ProductLine_Version_Connector__c");
    
    /**
    Performing the validation that the opportunity is closed, has line items and if we have
    the ccustom date field that it is null.
    */
    if(hasLineItems == true && isClosed == true && (!checkConverted || convertedDate == "")) {
        //If we are here then this Opportunity is valid.

        //Remove the error div from the html page shown to the user.
        document.getElementById("divErrorMsg").style.display = "none";

        //Now we go out and get the Opportunity Line Items and associated PricebookEntries and
        //the associated Product information.
        unitbased_button(); 
		getLineItems();

    } else {
        /**
        Not validated. Show the user an error message indicating why the
        conversion operation can not be processed.
        */
        errorMsg = "";
		if (convertedDate != "") 
		{
		//errorMsg = "Opportunity already converted";
		redirect();
		}
          else 
          {
               errorMsg = "Cannot process conversion. Make sure the opportunity is closed and has line items.";
               alert(errorMsg);
               redirect();
               //outputError(errorMsg);
          }               
    }
//    CheckUnCheckkAssets();
    
}
function unitbased_button() { 
	var ub = document.getElementById('unitbased');
	if ( Unit_Based_Products)  
	{
	     ub.value = "Show Multiple Asset Quantities"; 
	     //document.all("AddMoreBlock").innerHTML="<input id='AddMore' type='button' class='button' value='Add More' onClick='AddMore_Click();' >";
	}     
	else
	{
	     ub.value = "Show Single Asset Quantities"; 
	     //if(document.getElementById("AddMoreBlock"))
	     //{
	       //   document.all("AddMoreBlock").innerHTML="";
          //}
          AddMoreTimes=1;
          AddMoreFlag=false;	     
     }	     
}
function unitbased_flip()
{ 
	Unit_Based_Products = ! Unit_Based_Products;
	unitbased_button(); 
	getLineItems(); // re-draw table
	
} 
function AddMore_Click()
{
     AddMoreTimes=AddMoreTimes+1;
     AddMoreFlag=true;
     getLineItems(); // re-draw table
}

function check_converted () {  // return an empty string if there are no matching assets OR the user knows what they are doing
	var qr = sforceClient.Query("select id,Name,Product2Id from Asset where AccountId = '{!Opportunity.AccountId}' ");
	if (qr.size < 1) { return ""; } // no assets, we have not converted from this opp before
	
	// if this account has assets, see if the match the products at this opp
	var oli = sforceClient.Query("select id, PricebookEntryId from OpportunityLineItem where OpportunityId = '{!Opportunity.Id}' ");
	if (oli.size < 1) { return ""; }
	// build a list of pricebook entry ID's to retreive product ID's
	var pbeid = new Array(); 
	for(var i = 0; i < oli.size ; i++) { 
		pbeid.push(oli.records[i].get("PricebookEntryId"));
	}
	var pbe = sforceClient.Retrieve(" Product2Id ", "PricebookEntry", pbeid);
	if (pbe.length < 1) { return ""; }
	
     var qr = sforceClient.Query("select id from Asset_Order_Connector__c where Opportunity__c = '{!Opportunity.Id}' ");
     if(qr.size>0)
     {
          //var ans=confirm("Warning: It appears that one or more of the products from this opportunity have already been converted to an asset! \n\n Do you want to continue ?");
          var ans=true;
          if(ans==true)
          {
               return "";
          }
          else
          {
               return "no dups please"
          }
     }          
	/*
    // if the asset name and account id match the line item name ( where the new asset will be created ) 
	// then we need to inform the user that these appear to be created already, proceed yes / no ?
	var j = 0;
	for (var j = 0; j < pbe.length; j++) { 
		var pid = pbe[j].get("Product2Id");
		for(var i = 0; i < qr.size ; i++) { 
			var assetPid = qr.records[0].get("Product2Id") ;
			if (assetPid == pid )
			{
				var cont = prompt("Warning: It appears that one or more of these \nProduct Line Items have already been converted to an asset, \nContinue ?","Yes, duplicate assets may result" );
				if ( cont.indexOf('Yes') > -1 ) 
				{
				     return "";
				}
				else 
				{
				     return "no dups please";
				}
 			}
		}
	}*/
	return "";
} 

/**
This is a function to retrieve the line items from the opportunity record. Any filters
that are appropriate to reduce the scope of records should be appended to the query.
*/
function getLineItems() {
mTotalRows=0;
mTotalRowsDisplayed=0;
//arrOpportunityLineQuantity[0][0]="Opportunity Line Item Id";
//arrOpportunityLineQuantity[0][1]="Quantity from Opportunity LineItem"
//arrOpportunityLineQuantity[0][2]="Sum of Quantity enterd by user for this product in the interface"
//arrOpportunityLineQuantity[0][3]="Product Name ";

 

    //Querying salesforce for the Line Items associated to the given opportunity.
    var qr = sforceClient.Query("Select Id, Quantity, UnitPrice, TotalPrice, ServiceDate, PricebookEntryId From OpportunityLineItem Where OpportunityId='{!Opportunity.Id}'");

    //Proceed only if the result of the query is a QueryResult. If it's not then it's an error.
    if (qr.className == "QueryResult") {

        //Get the data records from the QueryResult.
        oliArray = qr.records;

        //Declare the array variable for PricebookEntryIDs
        var idArray = new Array(qr.size);

        //Loop through the records in the QueryResult.
        for(var i=0;i<qr.size;i++) {
            oli = oliArray[i];

            //Assign the PricebookEntryID to the Array to be Retrieved later.
            idArray[i] = oli.get("PricebookEntryId");
            arrOpportunityLineQuantity[i] = new Array(3);
            arrOpportunityLineQuantity[i][0]= "";// Product2Id is assigned below
            arrOpportunityLineQuantity[i][1]= parseInt(oli.get("Quantity"));
            arrOpportunityLineQuantity[i][2]= parseInt("0");//value will be populated when the user clicks save
            arrOpportunityLineQuantity[0][3] ="";// Product Name is assigned below
        }

        /**
        Call retrieve on PricebookEntry to get the Product2Id and the Product Name which is the Name
        field on PricebookEntry (fortunately).
        */
        var pbeArray = sforceClient.Retrieve("Id,Product2Id,Name","PricebookEntry",idArray);

        //test for successful retrieve. this is a bit awkward since success returns an array and failure returns a single fault.
        if(pbeArray[0] != null) {
            //If the first value in the array is not null then we have PricebookEntry records.

            /**
            Calling the function to determine whether this org has a field on Product2
            named 'IsUnitBased'. If so then we will be checking for the value of that field
            for each unique Product2 to determine whether to provide one line per (oppty) line item
            or one line per unit of the respective (opportunity) line item.
            */
            //checkForUnitBased = checkForCustomField("Not_Unit_Based__c","Product2");

            var p2Array       = new Array(pbeArray.length);

            if(false) {
                /**
                The current org has the field. Now we retrieve the Product2 records to ascertain the value
                of this field for each Product2.
               */

                //Declare the array variable for the ID[] to send in the retrieve.
                var p2IdArray = new Array(pbeArray.length);

                //Loop through the records in the PricebookEntry array to get the Product2Ids.
                for(var i=0;i<pbeArray.length;i++) {
                    pbe = pbeArray[i];

                    //Assign the Product2Id to the Array to be Retrieved later.
                    p2IdArray[i] = pbe.get("Product2Id");
                }

                //Calling retrieve on Product2.
                p2Array = sforceClient.Retrieve("Id,Not_Unit_Based__c","Product2",p2IdArray);
            } 
            
           for(var i=0;i<pbeArray.length;i++)
          {
               pbe = pbeArray[i];
               //Assign the Product2Id and name to the Array to be Retrieved later.
               arrOpportunityLineQuantity[i][0]= pbe.get("Product2Id");
               arrOpportunityLineQuantity[i][3]= pbe.get("Name");
           }


            /**
            Call the outputList function which builds the html to display the list form to the
            user and then append the result to the named div on the page so it is visible.
            */
            
            document.getElementById("divMain").innerHTML = outputList(oliArray,pbeArray,p2Array,Unit_Based_Products);

        } else {
            /**
            This is the case where the response from Retrieve on PricebookEntry is an API Fault.
            It's also possible this would be reached if, somehow, a PricebookEntry on an
            OpportunityLineItem was not returned from the PricebookEntry table.
            */
            outputError(pricebookEntries.toHtmlString());
        }

    } else {
      //This is an API FAULT Case - the Query for Line items returned a fault.
      outputError(qr.toHtmlString());

    }

     document.getElementById("Status").value="Deployed - Owned"
     setAllPicklist(document.getElementById("Status"));
     
	if (Unit_Based_Products)  
	{
	     //document.all("AddMoreBlock").innerHTML="<input id='AddMore' type='button' class='button' value='Add More' onClick='AddMore_Click();' >";
	     document.all("AddMore").style.visibility="visible"
	     document.all("AddMore").style.width="100px"
	     document.all("AddMore").style.height="24px"
	}     
	else
	{
	     document.all("AddMore").style.visibility="hidden"
	     document.all("AddMore").style.width="0px"
	     document.all("AddMore").style.height="0px"	     
/*	     if(document.getElementById("AddMoreBlock"))
	     {
	          document.all("AddMoreBlock").innerHTML="";
          }
          AddMoreTimes=1;
          AddMoreFlag=false;	     */
     }	     

CheckUnCheckkAssets();
}

/**
This function takes a field name and an Object name and if the
field name is available to the current user the function will return
a boolean value of true, otherwise it will return false.
NOTE: You must append '__c' to the field and/or object name when
       they are custom.
*/
function checkForCustomField(field,object){

    //Perform describe on the given object.
    dsoResult = sforceClient.DescribeSObject(object);

    //Declare the boolean and set it to false.
    var checkForCustomField = new Boolean(false);

    //Get the array of field objects from the DescribeResult.
    fields = dsoResult.fields;

    //Loop through the field array to see if the field exists.
    for(var l=0;l<fields.length;l++){
        fieldFromDescribe = fields[l];
        if (fieldFromDescribe.name == field) {
            //Field found, set the response variable to true.
            var checkForCustomField = true;
        }
    }

    return checkForCustomField;

}

/**
This function takes an error string and outputs it to the named div
in the html page so the user knows what went wrong.
*/
function outputError(error) {

    output = "<br><br>";
    output += "<span style=\"font-weight: bold; font-size: 12pt; font-family: 'Arial', 'Helvetica';\">";
    output += "Error:"
    output += "</span><br>";
    output += "<span style=\"font-weight: normal; font-size: 10pt; font-family: 'Arial', 'Helvetica';\">";
    output += error;
    output += "</span><br>";
	if (arguments.callee.caller != null) { 
		output = output + " in function "+ arguments.callee.caller.toString().match(/function\s+(\w+)/)[1];
	} 

    document.getElementById("divErrorMsg").innerHTML = output;
    document.getElementById("divErrorMsg").style.display = "";

}

/**
This function is for reference and use if you wish to modify the code and use it to
help debug your changes. It is currently not called from the sample at the time it was
distributed.
*/
function outputDebug(msg) {
    document.getElementById("divDebugMsg").innerHTML = "<h1>DEBUG</h1><h2>" + msg + "</h2>";
    document.getElementById("divDebugMsg").style.display = "";

}

/**
This function takes the OpportunityLineItems, PricebookEntries and if necessary, Product2 records
and builds the html form to output to the page.
*/
function outputList(oliArray,pbeArray,p2Array,checkForUnitBased) {

    //TotalRows is calculated to determine how many rows will be presented in the form. This varies when
    //an org has products that are not converted to Unit-based assets.
    totalRows = oliArray.length;

    //Loop through the line items so we can add the quantity of each line item to TotalRows.
    //If there is a 'Not_Unit_Based__c' field on Product2 in this org then before adding the
    //quantity to TotalRows, the value of this field must be checked. If it is true then there
    //will be only one row in the form for this product and quantity will be the line item quantity
    //rather than 1 (unit based).
    for(var c=0;c<oliArray.length;c++) {
        oli = oliArray[c]
        if(checkForUnitBased == true) {
            //This conversion 
            //products are unit-based for asset conversion.

            //Add the quantity to the TotalRows and subtract 1 from the TotalRows so the count is
            //accurate.
            totalRows += (oli.get("Quantity")-1);

        } else {
            //This org DOES have the 'Not_Unit_Based__c' field on Product2, therefore we must check
            //each product to determine the value and thus whether to draw one line for the line item
            // or one line for each unit of the line item.

            p2 = p2Array[c];

           // if(p2.get("Not_Unit_Based__c") == false) {
           //    totalRows += (oli.get("Quantity")-1);
           // }

        }
    }

    var output = "";

    output += "<p><p><form name=\"assetForm\" id=\"assetForm\" >";
    
    //output += "<table cellpadding=1 cellspacing=1 border=0 width=\"500\">";
    output += "<TABLE cellSpacing='1' cellPadding='0' width='100%' border='0' bgcolor='Black' >";

    //output += "<tr><td colspan=\"8\">&nbsp;</td></tr>";

    output +="<tr align=left>"
    output +="<td width='20%' align=\"left\" class=\"dataLabels\" nowrap><input type=\"checkbox\" id=\"selectAll\" onClick=\"selectAssets(this);\"><label for=\"selectAll\"><b>" + getFieldLabel("Name","PricebookEntry") + "</b></label></td>";
    output +="<td class=\"dataLabels\" align=\"left\" nowrap><b>" + getFieldLabel("Quantity","Asset") + "</b></td>";
    //output +="<td align=\"left\" class=\"requiredInputs\"><b>" + getFieldLabel("Name","Asset") + "</b></td>";
    output +="<td align=\"left\" class=\"dataLabels\"><b>" + getFieldLabel("Name","Asset") + "</b></td>";
    output +="<td class=\"dataLabels\" align=\"left\" nowrap><b>" + getFieldLabel("Status","Asset") + "&nbsp;<br><select name=\"Status\" onChange=\"setAllPicklist(this);\">" + outputPicklist("Status","Asset") + "</select></b></td>";
    output +="<td class=\"dataLabels\" align=\"left\" nowrap><b>" + getFieldLabel("Name","Account") + "</b></td>";
    //output +="<td class=\"dataLabels\" align=\"left\" nowrap><b>" + getFieldLabel("PurchaseDate","Asset") + "</b></td>";
    output +="<td class=\"dataLabels\" align=\"left\" nowrap><b>" + getFieldLabel("Version__c","Asset") + "</b></td>";
    //output +="<td class=\"dataLabels\" align=\"left\" nowrap>" + getFieldLabel("InstallDate","Asset") + "</td>";
    //output +="<td class=\"dataLabels\" align=\"left\" nowrap>" + getFieldLabel("UsageEndDate","Asset") + "</td>";
    //output +="<td class=\"dataLabels\" align=\"left\" nowrap>" + getFieldLabel("SerialNumber","Asset") + "</td>";
    output +="</tr>";

    //currentRow keeps track of the current row being drawn so as to create the form element IDs appropriately.
    currentRow = 0;

    //Loop through the Line Items.
    for(var a=0;a<oliArray.length;a++) {
        oli = oliArray[a];
        pbe = pbeArray[a];
        p2  = p2Array[a];

        /**
        Checking to determine whether there needs to be one row drawn per line item
        OR one line per unit of the given line item. Default is unit-based, meaning
        one row will be drawn for each unit in the line item.
        */
        if(Unit_Based_Products == false ) 
        {
            //Here we only draw only ONE line PER OpportunityLineItem.
            mTotalRows=oliArray.length;
            //mTotalRowsDisplayed=mTotalRows;

            //Call the outputRow function for the given line item.
            
            output += outputRow(currentRow,oli,pbe,null,false);

            //increment the currentRow counter.
            
            currentRow++;

        } else {
            //Here we must draw one line PER UNIT of the current OpportunityLineItem.

            //Get the quantity from the current OpportunityLineItem.
            quantity = oli.get("Quantity");
            Quantity_First_Row_Display_Unit_Based_Products=quantity;
            if(AddMoreFlag==true)
            {
               if(quantity>10)
               {
                    if((quantity-(AddMoreTimes*10))>10)
                    {
                         quantity=(AddMoreTimes*10)+10;
                    }
               }
            }
            else
            {   
               if(quantity>10)
               {
                    quantity=10;
               }
            }
            mTotalRows=mTotalRows+quantity;
            //mTotalRowsDisplayed=mTotalRows;
            //Call outputRow for each Unit in the Quantity.
            for (u=0;u<quantity;u++) {
                output += outputRow(currentRow,oli,pbe,p2,true);

                //increment the currentRow counter.
                currentRow++;
                Quantity_First_Row_Display_Unit_Based_Products='';
            }
        }
        
    }

    //output += "<tr ><td colspan=\"8\" bgcolor=white>&nbsp;</td></tr>";
    output += "</table>";
    
    if(mTotalRowsDisplayed==0)
    {
          alert("The opportunity does not have any software product!");
          redirect();
    }
    output += "<br><br><table cellpadding=1 cellspacing=1 border=0 width=100%>";
    output += "<tr height=40 align=\"center\">";
    output += "<td colspan=\"8\" bgcolor=white >";
    output += "<input type=\"button\" class=\"button\" value=\"Save\" onClick=\"saveAssets()\" style='WIDTH: 100px; HEIGHT: 24px'>&nbsp;&nbsp;";
    output += "<input type=\"button\" class=\"button\" value=\"Cancel\" onClick=\"redirect()\" style='WIDTH: 100px; HEIGHT: 24px'>&nbsp;&nbsp;";
    output += "<input id='AddMore' type='button' class='button' value='Add More' onClick='AddMore_Click();' style='WIDTH: 0px; HEIGHT: 0px'>";

    output += "</td>";
    output += "</tr>";

    output += "</table>";

    output += "</form>";
   
   
    return output;

}

/**
This function draws the html for a single row in the form.
CurrentRow is used to identify each form element uniquely.
oli is the current OpportunityLineItem object
pbe is the current PricebookEntry object
p2 is the current Product2 object
unitBased is a boolean value indicating whether this row is based on a single unit (true)
or a single line item (false).
*/
function outputRow(currentRow,oli,pbe,p2,unitBased)
{
     output = "";
     var qrProductLine = sforceClient.Query("Select Revenue_Category__c, Product_Line__c from Product2 where Id='" + pbe.get("Product2Id") +"'");
     var tmpProductLine=qrProductLine.records[0].get("Product_Line__c"); 
     var tmpRevenueCategory=qrProductLine.records[0].get("Revenue_Category__c");
     
     if( (tmpRevenueCategory=="Maintenance") || (tmpRevenueCategory=="Services") )// to allow only software to appear
     {
          return output;
     }
     currentRow=mTotalRowsDisplayed;
     mTotalRowsDisplayed=mTotalRowsDisplayed+1;
     
        
        output += "<tr>";

        output +="<td class=\"dataField\" nowrap>"
        output +="<input type=\"checkbox\" id=\"" + currentRow + "-select\" onClick=\"selectThisAsset();\"  onFocus=\"closePicker()\">";
        //output += "<label for=\"" + currentRow + "-select\">" + pbe.get("Name") + "</label>";
        output += "<INPUT  class='TextLabel' readOnly name='" + currentRow + "-select' value='" + pbe.get("Name") +"' style='WIDTH: 225px; HEIGHT: 20px' title='" + pbe.get("Name") +"(" +tmpProductLine +")'></INPUT>";
        output += "<input type=\"hidden\" value=\"" + tmpProductLine + "\" name=\"ProductLine\" id=\"" + currentRow + "-ProductLine\">";        
        output += "</td>";

        if(unitBased)
        {
            /**
            When unitBased = true - there is only one row drawn per unit in the html form the quantity
            is defaulted to 1 and the Price field on Asset is set to the UnitPrice from the OpportunityLineItem
            Neither of these values are modifiable by the user.
            */
            output += "<td class=\"dataField\" nowrap>";
            //output += "1";
            //output += "<input type=\"hidden\" value=\"1\" name=\"Quantity\" id=\"" + currentRow + "-Quantity\">";
            output += "<input type='Text' onkeyup='fnQuantityChange(" + currentRow +")' name='Quantity' id='" + currentRow + "-Quantity'  value='"
            //output += oli.get("Quantity");
            output += Quantity_First_Row_Display_Unit_Based_Products;
            output +=  "' style='width: 40px; TEXT-ALIGN: right'></input>"
            
            
            output += "<input type=\"hidden\" value=\"" + oli.get("UnitPrice") + "\" name=\"Price\" id=\"" + currentRow + "-Price\">";
            output += "</td>";
        } else {
            /**
            When unitBased = false  there is only one row drawn for the OpportunityLineItem so the Quantity
            field on Asset is set to the QuantityField on the OpportunityLineItem and the Price field on
            Asset is set to the TotalPrice field on the OpportunityLineItem.
            */
            output += "<td class=\"dataField\" nowrap>";
            output += "<input type='Text' name='Quantity' id='" + currentRow + "-Quantity' value='"
            output += oli.get("Quantity");
            output +=  "' style='width: 40px;TEXT-ALIGN: right' onkeyup='fnQuantityChange(" + currentRow +")';></input>"
            
            output += "<input type=\"hidden\" value=\"" + oli.get("Quantity") + "\" name=\"Quantity\" id=\"" + currentRow + "-Quantity\">";
            output += "<input type=\"hidden\" value=\"" + oli.get("TotalPrice") + "\" name=\"Price\" id=\"" + currentRow + "-Price\">";
            output += "</td>";

        }

        output += "<td class=\"dataField\">";
        output += "<input type=\"text\" style='WIDTH: 225px; HEIGHT: 20px' value=\"" + pbe.get("Name") + "\" name=\"Name\" id=\"" + currentRow + "-Name\" onFocus=\"closePicker()\">";

        //The Product2Id is a hidden field and is taken from the PricebookEntry that was associated to the OpportunityLineItem.
        output += "<input type=\"hidden\" value=\"" + pbe.get("Product2Id") + "\" name=\"Product2Id\" id=\"" + currentRow + "-Product2Id\">";
        output += "</td>";

        output += "<td class=\"dataField\" align=\"right\">";
        output += "<select name=\"Status\" id=\"" + currentRow + "-Status\" onFocus=\"closePicker()\">";
        output += outputPicklist("Status","Asset");
        output += "</select>";
        output += "</td>";
        
        output += "<td class=\"dataField\" align=\"right\">";
        //output += "<input type=text name='AccountName' id='" +currentRow +"_AccountName' style='width:120px' value=\"{!Account.Name}\"></input>";
        
     var txtAccountBoxName=currentRow +"-AccountName";

     output += "<input type='hidden' name='" +txtAccountBoxName  + "_lkid' id='" + txtAccountBoxName  +"_lkid' value='000000000000000'>";
     output += "<input type='hidden' name='" + txtAccountBoxName + "_lkold' id='"+ txtAccountBoxName  + "_lkold' value='null'>";
     output += "<input type='hidden' name='" + txtAccountBoxName + "_lktp' id='" + txtAccountBoxName +"_lktp' value='001'>";
     output += "<input type='hidden' name='" + txtAccountBoxName + "_lspf' id='" + txtAccountBoxName + "_lspf' value='0'>";
     output += "<input type='hidden' name='" + txtAccountBoxName + "_mod' id='" + txtAccountBoxName +"_mod' value='0'>";
     output += "<span class='lookupInput'>";
     output += "<input type=text name='" + txtAccountBoxName +"' id='" +txtAccountBoxName +"' style='width:150px' value=\"{!Account.Name}\" onchange=\"document.getElementById('" + txtAccountBoxName +"_lkid').value='';document.getElementById('" + txtAccountBoxName +"_mod').value='1';\"></input>";
     //output += "<a href='JavaScript: openLookup(\"/_ui/common/data/LookupPage?lknm=" +  txtAccountBoxName +"&lkfm=assetForm&lktp=\" + document.getElementById(\"" +txtAccountBoxName +"_lktp\").value,500,document.getElementById(\"" + txtAccountBoxName +"_mod\").value,\"&lksrch=\" + escapeUTF(document.getElementById(\"" +txtAccountBoxName +"\").value),\"maxw\")'  title=\"Account Lookup (New Window)\" onclick=\"setLastMousePosition(event)\" id=" + txtAccountBoxName +"_lkwgt >";

     output +="<a href=\"JavaScript: openLookup('/_ui/common/data/LookupPage?lknm=" + txtAccountBoxName +"&lkfm=assetForm&lktp=' + document.getElementById('" + txtAccountBoxName +"_lktp').value,400,document.getElementById('" + txtAccountBoxName +"_mod').value,'&lksrch=' + escapeUTF(document.getElementById('" + txtAccountBoxName +"').value),'maxw')\"  title=\"Contact Name Lookup (New Window)\" onclick=\"setLastMousePosition(event)\" id=\"" + txtAccountBoxName +"_lkwgt\">";
     
     output += "<img src=\"s.gif\" alt=\"Account Lookup (New Window)\"  class=\"lookupPopup\"></a>"
     output += "</span>"

     output += "</td>";
        
        //output += "<td class=\"dataField\">";

        /**
        Here we default the PurchaseDate field on Asset to the Opportunity Closed Date. We can get this from a merge field
        Since we started from Opporunity as the context.
        */
        output += "<input type=\"hidden\" size=\"10\" value=\"{!Opportunity.CloseDate}\" name=\"PurchaseDate\" id=\"" + currentRow + "-PurchaseDate\" onFocus=\"displayDatePicker('PurchaseDate'," + currentRow + ");\">";
        //output += "</td>";
        
        output += "<td class=\"dataField\" align=\"right\">";
        output += "<select name='Version' id='" +currentRow +"-Version'  >"
        var arrVersion = new Array()
        for(var ProductLineVersionCount=0;ProductLineVersionCount<qrProductLineVersion.size;ProductLineVersionCount++)
        {
               if(tmpProductLine==qrProductLineVersion.records[ProductLineVersionCount].get("ProductLine__c"))
               {
                    arrVersion.push(qrProductLineVersion.records[ProductLineVersionCount].get("Version__c"));
               }
        }
        arrVersion.sort(SortDesc)
        for(var arrCnt=0;arrCnt<arrVersion.length;arrCnt++)
        {
          output +="<option value='" + arrVersion[arrCnt] +"'>" +arrVersion[arrCnt] +" </option>";
        }
        
        output += "</select></td>";

        /*output += "<td class=\"dataField\">";

        //InstallDate is defaulted to the ServiceDate field on the LineItem.

        //Declare a string variable for the date and format the date as desired.
        //if there is no date in the ServiceDate field on OpporutnityLineItem then set the string to an empty value.
        var dateString = ""; 
		var sd = oli.get("ServiceDate");
		if( sd && sd != "" ) { dateString = Sforce.Util.FormatDate (oli.get("ServiceDate"), dformat); }

        output += "<input type=\"text\" size=\"10\" value=\"" + dateString + "\" name=\"InstallDate\" id=\"" + currentRow + "-InstallDate\" onFocus=\"displayDatePicker('InstallDate'," + currentRow + ");\">";
        output += "</td>";

        output += "<td class=\"dataField\">";
        output += "<input type=\"text\" size=\"10\" value=\"\" name=\"UsageEndDate\" id=\"" + currentRow + "-UsageEndDate\" onFocus=\"displayDatePicker('UsageEndDate'," + currentRow + ");\">";
        output += "</td>";

        output += "<td class=\"dataField\">";
        output += "<input type=\"text\" size=\"20\" value=\"\" name=\"SerialNumber\" id=\"" + currentRow +  "-SerialNumber\" onFocus=\"closePicker()\">";
        output += "</td>";*/

        output += "</tr>";

        return output;
}

function SortDesc(a, b)
{
  if (a < b) return 1;
  if (a > b) return -1;
  return 0;
}
/**
This function sets the current checkBoxes to checked /unchecked if quantity is entered or not.
*/
function fnQuantityChange(currentRow)
{

     var thisQuantity=document.getElementById(currentRow + "-Quantity");
     if(thisQuantity!=null)
     {
          var txtQuantity=Trim(document.getElementById(currentRow + "-Quantity").value);
          if(txtQuantity=="" || txtQuantity == null)
          {
               document.getElementById(currentRow + "-select").checked=false;
               AllBoxesCheckedFlag=false;
          }
          else
          {
               document.getElementById(currentRow + "-select").checked=true;
          }          
          selectThisAsset();
     }
     
}     

/**
This function is to trim passed values.
*/

function Trim(str)
{
     return str.replace(/^\s*|\s*$/g,"");
}


function CheckUnCheckkAssets()
{
        AllBoxesCheckedFlag=true;
        
        for(var q=0;q<mTotalRowsDisplayed;q++)
        {
          fnQuantityChange(q);
        }
        if(AllBoxesCheckedFlag==true)
        {
          document.getElementById("selectAll").checked=true;
        }
        else
        {
         document.getElementById("selectAll").checked=false;
        }
}

/**
This function sets all select checkBoxes to checked or unchecked when the master checkbox value is changed.
*/

function selectAssets(checkbox)
{
   count=mTotalRowsDisplayed;
    if(checkbox.checked) {
     //select all
        for(var q=0;q<count;q++) {
            chkbox = document.getElementById(q + "-select");
            chkbox.checked=true;
        }

    } else {
     //select none
        for(var q=0;q<count;q++) {
            chkbox = document.getElementById(q + "-select");
            chkbox.checked=false;
        }
    }
}
/**
This function checks or unchecks the checkall check box, if all the checkboxes are checked or unchecked
*/

function selectThisAsset()
{
   count=mTotalRowsDisplayed;
   for(var q=0;q<count;q++) 
   {
       chkbox = document.getElementById(q + "-select");
       if(chkbox.checked==false)
       {
          document.getElementById("selectAll").checked=false;
          return;
       }
   }
document.getElementById("selectAll").checked=true;
}

/**
This function sets all picklists in the column to the value selected in the header.
*/
function setAllPicklist(picklist) {

    //get the currently selected value from the list.
    selectedStatus = picklist.options[picklist.selectedIndex].value;

    //Loop through all the rows
    for(var q=0;q<mTotalRowsDisplayed;q++) {
        thisPicklist = document.getElementById(q + "-" + picklist.name);
        if(thisPicklist!=null)
        {
          thisPicklist.selectedIndex = picklist.selectedIndex;
        }          
    }

}

/**
This function gets the given field label from the DescribeResult.
*/
function getFieldLabel(field,object) {
    var label = "";

    dsoResult = sforceClient.DescribeSObject(object);
    fields = dsoResult.fields;
    for(var l=0;l<fields.length;l++){
        fieldFromDescribe = fields[l];
        if (fieldFromDescribe.name == field) {
            l = fields.length;
            label = fieldFromDescribe.label;

        }

    }

    return label;
}

/**
This Function draws the options of a picklist field. It does not currently respect
the default value settings (if available). Given this control in it's original state
is invoked from an Opportunity, it may make sense to default the value of the Status picklist
to 'Purchased'. If that is desired the recommendation would be to take an additional
argument to this function for the default value and provide it as necessary when
calling the function. This is generic now and is not tied to the Status field per se as is.
*/
function outputPicklist(field,object) {

    var output = "";
    dsoResult = sforceClient.DescribeSObject(object);

    fields = dsoResult.fields;
    for(var l=0;l<fields.length;l++){
        fieldFromDescribe = fields[l];
        if (fieldFromDescribe.name == field) {
            l = fields.length;
            picklistValues = fieldFromDescribe.picklistValues;

            output += "<option value=\"\">--None--</option>";

            for(var j=0;j<picklistValues.length;j++) {
                picklistEntry = picklistValues[j];
                output += "<option value=\"" + picklistEntry.value + "\">" + picklistEntry.label + "</option>";
            }

        }

    }

    return output;

}
function escape_amp(s) { s = s.replace(/\&/,"\&amp\;");return s;}
function escape_singlequote(s) { s = s.replace(/\'/,"\\'");return s;}  


/**
This is the function that is called when the form is submitted. It
performs all the processing to create the arguments needed for the
create call to the sforce API.
*/
function saveAssets()
{
    /**
    We have to parse a date string so it's best to stick this into a try/catch block
    in the event the user fails to follow an expected format for a date string.
    */
    try {

        var output = "";

        //Get the number of name elements which will be the number of rows that
        //were available in the form.
        names = document.getElementsByName("Name");

        //Counter for the number of selected rows.
        count = 0;

        //Loop through each row in the form to identify the number of selected rows.
        for (r=0;r<names.length;r++) {
           var selected = document.getElementById(r + "-select");
           if(selected.checked) {
                count++;
            }
        }

          for(var arrbound=0;arrbound<arrOpportunityLineQuantity.length;arrbound++)
          {
               arrOpportunityLineQuantity[arrbound][2]=parseInt(0)//resetting the qty sum entered;
          }
        /**
        Declare an Array variable to store the Asset object records.
        The size at declaration is the number of rows that were selected
        by the user.
        */
        //var assets = new Array(names.length);
        var assets = new Array(count);

        //Count will now be reset and used to set the Array item.
        count = 0;
        var arrAccount = new Array();
        //loop through the rows in the form, creating Asset objects for each selected row.
        for(var b=0;b<names.length;b++){


            //Get the checkbox for this row.
            var selected = document.getElementById(b + "-select");

            //Is the checkbox checked?
            if(selected.checked) {
                //Checked - now create the Asset object (DynaBean).

                var asset    = new Sforce.Dynabean("Asset");

                //Set the fields on the Asset from the form element.
                var name     = document.getElementById(b + "-Name");
                var stat     = document.getElementById(b + "-Status");
                var sn       = document.getElementById(b + "-SerialNumber");
                var p2Id     = document.getElementById(b + "-Product2Id");
                var qty      = document.getElementById(b + "-Quantity");
                var price    = document.getElementById(b + "-Price");
                var pDate    = document.getElementById(b + "-PurchaseDate");
                var iDate    = document.getElementById(b + "-InstallDate");
                var ueDate   = document.getElementById(b + "-UsageEndDate");
                var accountname = document.getElementById(b + "-AccountName");
                var version=document.getElementById(b + "-Version");
                var ProductLine=document.getElementById(b +"-ProductLine");
                
                if(qty.value=="")
                {
                    alert("Please enter Quantity for all the selected rows!");
                    document.getElementById(b + "-Quantity").focus();
                    return;
                }
                else
                {
                    for(var arrbound=0;arrbound<arrOpportunityLineQuantity.length;arrbound++)
                    {
                         if(arrOpportunityLineQuantity[arrbound][0]==p2Id.value)
                         {
                              arrOpportunityLineQuantity[arrbound][2]=parseInt(arrOpportunityLineQuantity[arrbound][2])+ parseInt(qty.value);
                         }
                    }
                }
                
                if(version.value=="")
                {
                    alert("Please select Version for all the selected rows!");
                    document.getElementById(b + "-Version").focus();
                    return;
                }

               var strAccountName=new String(accountname.value);
               strAccountName=escape_singlequote(strAccountName)//;.replace(/'/g,"\'");
               
               
               var qrAccount=sforceClient.Query("Select Id, Name  from Account  where Name='" +strAccountName +"'");
               if(qrAccount.size==0)
               {
                    alert("Please enter a valid Account Name!");
                    document.getElementById(b + "-AccountName").focus();
                    return false;
               }
               else
               {
                    AccountId=qrAccount.records[0].get("Id");
                    arrAccount[b]=AccountId;
                    
               }

                for(var arrbound=0;arrbound<arrOpportunityLineQuantity.length;arrbound++)
                {
                    if(parseInt(arrOpportunityLineQuantity[arrbound][2])>parseInt(arrOpportunityLineQuantity[arrbound][1]))
                    {
                         alert("Quantity entered " + arrOpportunityLineQuantity[arrbound][2] +", exceeds Opportunity quantity " + + arrOpportunityLineQuantity[arrbound][1] + ", for Product " +arrOpportunityLineQuantity[arrbound][3] +"!");
                         return false;
                    }
                }
                  
                

                //Setting the AccountId field on the Asset to the same as from the Opportunity.
                //asset.set("AccountId","{!Opportunity.AccountId}");
                asset.set("AccountId",AccountId);
                asset.set("Name",escape_amp(name.value));
                asset.set("Product2Id",p2Id.value);
                asset.set("Status",stat.options[stat.selectedIndex].value);
                //asset.set("SerialNumber",sn.value);
                asset.set("Quantity",qty.value);
                asset.set("Price",price.value);

                //Check for null on the date fields before attempting to parse them.
                if(pDate.value != "") asset.set("PurchaseDate",Sforce.Util.ParseDate(pDate.value));
                //if(iDate.value !="") asset.set("InstallDate",Sforce.Util.ParseDate(iDate.value));
                //if(ueDate.value !="") asset.set("UsageEndDate",Sforce.Util.ParseDate(ueDate.value));

                //set this item in the array to the current Asset.
                asset.set("Version__c",version.value); 
                asset.set("Product_Line__c",ProductLine.value); 
                
                var qrCluster=sforceClient.Query("Select Id from Cluster__c where Name='{!Opportunity.MPE_Cluster__c}'");
                if(qrCluster.size>0)
                {
                    asset.set("MPE_Cluster__c",qrCluster.records[0].get("Id"));
               }                    
                assets[count] = asset;

                //increment the counter.
                count++;
            }
        }

        //If we have Assets to create, do it now.
        if(count>0){

        //Call Create on the array of Asset records.
        var saveResult = sforceClient.Create(assets);

        //If the first value in the result array is null then it's a fault.
        if(saveResult[0] == null) {
            //Output the fault message to the error function.
            outputError(saveResult.toString());

        } else {
            //Success! The Create call on the Assets resulted in SaveResults, not a fault.

                var errorMsg = "";

                //Check for success on each result
                for(var c=0;c<saveResult.length;c++) {
                    sr = saveResult[c];
                    if (sr.success == "false") {
                        errors = sr.errors;

                        //Append the errors to the errorMsg variable.
                        errorMsg += errors.toHtmlString + "<BR><BR>";
                    }
                }

                //If the errorMsg variable has information, output it to the error div on the page.
                if(errorMsg!="") {
                    outputError(errorMsg);
                } else {
                  // Make an entry into Asset_Order_Connector__c custom object
                   var AssetOrderConnectors = new Array(saveResult.length)
                   for(var c=0;c<saveResult.length;c++)
                   {
                         
                         sr = saveResult[c];
                         var AssetOrderConnector = new Sforce.Dynabean("Asset_Order_Connector__c");
                         
                        //Get the OpportunityId from the merge field.
                        AssetOrderConnector.set("Opportunity__c","{!Opportunity.Id}");
                        
                        AssetOrderConnector.set("Account__c",arrAccount[c]);
                        //AssetOrderConnector.set("Account__c","{!Opportunity.AccountId}");
                        
                        AssetOrderConnector.set("Asset__c",sr["id"]);
                        //AssetOrderConnector.set("License_Allocation__c","");
                        //AssetOrderConnector.set("Name","");

                        AssetOrderConnectors[c]=AssetOrderConnector;
                        //Call Update on the AssetOrderConnector.
                   }     
                   var saveResultAssetOrderConnector = sforceClient.Create(AssetOrderConnectors);
                   if(saveResultAssetOrderConnector[0] == null)
                   {
                         alert("SoapFault Received! ");
                         outputError(saveResult.toString());
                   }
                   
                  /*
                  // Make an entry into Cluster__c custom object
                   var Clusters = new Array(saveResult.length)
                   for(var c=0;c<saveResult.length;c++)
                   {
                         sr = saveResult[c];

                         var Cluster = new Sforce.Dynabean("Cluster__c");
                         
                        //Get the OpportunityId from the merge field.
                        Cluster.set("Opportunity__c","{!Opportunity.Id}");
                        Cluster.set("Version__c",document.getElementById(c + "-Version").value);
                        Cluster.set("Asset__c",sr["id"]);

                        Clusters[c]=Cluster;
                        //Call Update on the AssetOrderConnector.
                   }     
                   var saveResultCluster = sforceClient.Create(Clusters);
                   if(saveResultCluster[0] == null)
                   {
                         alert("SoapFault Received! ");
                         outputError(saveResult.toString());
                   }
                   */

                    //Complete Success! All SaveResults were successful.

                    //check for the custom field on opportunity to store the date of this conversion
                    //operation.
                    updateOpportunity = checkForCustomField("Assets_Created_Date__c","Opportunity");

                    if(updateOpportunity == true) {
                        /**
                        This org has the custom field so we need to update the opportunity with
                        today's date. If you need to put any other information on the Opportunity
                        following conversion (like who converted it) this is the place to do it.
                        */
                        var oppty = new Sforce.Dynabean("Opportunity");
                        var opptyArray = new Array(1);

                        //Get the OpportunityId from the merge field.
                        oppty.set("Id","{!Opportunity.Id}");

                        //Set the date field to today.
                        oppty.set("Assets_Created_Date__c", new Date());
                        opptyArray[0] = oppty;

                        //Call Update on the Opportunity.
                        var saveResult = sforceClient.Update(opptyArray);

                        if(saveResult[0] == null) {
                            alert("SoapFault Received! ");
                            outputError(saveResult.toString());
                        } else {
                            //On success of the Opportunity Update, redirect the user to the Opportunity
                            //so he/she can see the newly created Assets.
                            top.location.replace("/{!Opportunity.AccountId}");
                        }

                    } else {
                        /**
                        This org does NOT have the date field on Opportunity so we just redirect the user
                        to the Account so he/she can see the newly created assets.
                        NOTE: nothing prevents this conversion from happening again and creating duplicate
                              Asset records from the same opportunity. You should review this with the appropriate
                              personnel to define the proper Business Process to prevent duplicatation if the
                              current mechanism is not suitable.
                        */
                        top.location.replace("/{!Opportunity.AccountId}");
                    }
                }

            }

        } else {
            alert("You have not selected any products to convert to assets. Please select at least one product or cancel.")
        }

    } catch (e) {
        if (Sforce.Util.dltypeof(e) == "string") {
                alert(e);
        } else {
                alert(e.message);
        }
    }


}

/**
This function redirects the user back to the originating opportunity.
Currently used for the "Back to Oppty" link and cancel button.
*/
function redirect() {
    top.location.replace("/{!Opportunity.Id}");
}
function assert(fact) { if (!fact) { alert("Assert failure")} }
function assert(fact,dt) { if (!fact) { alert("Assert failure :"+dt)} }
function assert(fact) { if(fact) { return} 
	var msg = "Assert failure "; 
	if (arguments.callee.caller != null) { 
		msg = msg + " in function "+ arguments.callee.caller.toString().match(/function\s+(\w+)/)[1];
	} 
	alert(msg);
} 
/* ParseDateFormat ( "26/02/2006" ) == "d/M/y"
 * given a date string, report which format it is in, 
 * used to detect locale date formats 
*/
Sforce.Util.ParseDateFormat = function(val,lang) {lang = lang+"";
/* second paramater is one of these
API Name: LocaleSidKey
Type: picklist
ar
ca
ca_ES_EURO
ca_ES
zh
zh_CN
zh_HK
zh_TW
cs_CZ
da_DK
nl_BE
nl_NL
en_AU
en_CA
en_IE_EURO
en_IE
en_NZ
en_ZA
en_GB
en_US
fi_FI_EURO
fi_FI
fr
fr_BE
fr_CA
fr_FR_EURO
fr_FR
fr_LU
fr_CH
de
de_AT_EURO
de_AT
de_DE_EURO
de_DE
de_LU_EURO
de_LU
de_CH
el_GR
iw
it
it_IT
it_CH
ja
ja_JP
ko
ko_KR
no
no_NO
pl
pt
pt_BR
pt_PT
ru
es
es_AR
es_CO
es_MX
es_ES_EURO
es_ES
es_VE
sv
sv_SE
th
tr
*/
	var preferEuro = true;
	if ( /US/.test(lang) ) preferEuro = false; 
	generalFormats=new Array('y-M-d','MMM d, y','MMM d,y','y-MMM-d','d-MMM-y','MMM d');
	monthFirst=new Array('M/d/y','M-d-y','M.d.y','MMM-d','M/d','M-d');
	dateFirst =new Array('d/MM/y','d-M-y','d.M.y','d-MMM','d/M','d-M');
	var checkList= new Array(generalFormats,preferEuro?dateFirst:monthFirst,preferEuro?monthFirst:dateFirst);
	var d=null;
	for (var i=0; i<checkList.length; i++) {
		var l=checkList[i];
		for (var j=0; j<l.length; j++) {
			d=Sforce.Util.GetDateFromFormat(val,l[j]);
			if (d!=0) { return l[j] }
		}
	}
	return "M/d/y"; // default
} 

//-->
</script>

<!--
THIS NEXT SCRIPT SHOULD BE PLACED INTO ANOTHER LIBRARY AS EITHER A DOCUMENT IN SALESFORCE OR
A SEPARATE JS FILE ALONG WITH THE REST OF THE AJAX TOOLKIT.
-->

<script language="javascript">

var datePickerDivID = "datepicker";
var iFrameDivID = "datepickeriframe";

var dayArrayShort = new Array('Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa');
var dayArrayMed = new Array('Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat');
var dayArrayLong = new Array('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday');
var monthArrayShort = new Array('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec');
var monthArrayMed = new Array('Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec');
var monthArrayLong = new Array('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December');

	/**
    This is the main function you'll call from the onClick event of a button.
    Normally, you'll have something like this on your HTML page:

    Start Date: <input name="StartDate">
    <input type=button value="select" onclick="displayDatePicker('StartDate');">

    That will cause the datepicker to be displayed beneath the StartDate field and
    any date that is chosen will update the value of that field. If you'd rather have the
    datepicker display beneath the button that was clicked, you can code the button
    like this:

    <input type=button value="select" onclick="displayDatePicker('StartDate', this);">

    So, pretty much, the first argument (dateFieldName) is a string representing the
    name of the field that will be modified if the user picks a date, and the second
    argument (displayBelowThisObject) is optional and represents an actual node
    on the HTML document that the datepicker should be displayed below.

    In version 1.1 of this code, the dtFormat and dtSep variables were added, allowing
    you to use a specific date format or date separator for a given call to this function.
    Normally, you'll just want to set these defaults globally with the defaultDateSeparator
    and defaultDateFormat variables, but it doesn't hurt anything to add them as optional
    parameters here. An example of use is:

    <input type=button value="select" onclick="displayDatePicker('StartDate', false, 'dmy', '.');">

    This would display the datepicker beneath the StartDate field (because the
    displayBelowThisObject parameter was false), and update the StartDate field with
    the chosen value of the datepicker using a date format of dd.mm.yyyy
    */
    function displayDatePicker(dateFieldName, index, displayBelowThisObject, dtFormat, dtSep)
    {
      var targetDateField = document.getElementsByName(dateFieldName).item(index);

      // if we weren't told what node to display the datepicker beneath, just display it
      // beneath the date field we're updating
      if (!displayBelowThisObject)
        displayBelowThisObject = targetDateField;

      // if a date separator character was given, update the dateSeparator variable
      if (dtSep)
        dateSeparator = dtSep;
      else
        dateSeparator = defaultDateSeparator;

      // if a date format was given, update the dateFormat variable
      if (dtFormat)
        dateFormat = dtFormat;
      else
        dateFormat = defaultDateFormat;

      var x = displayBelowThisObject.offsetLeft;
      var y = displayBelowThisObject.offsetTop + displayBelowThisObject.offsetHeight;

      // deal with elements inside tables and such
      var parent = displayBelowThisObject;
      while (parent.offsetParent) {
        parent = parent.offsetParent;
        x += parent.offsetLeft;
        y += parent.offsetTop;
      }

      drawDatePicker(targetDateField, index, x, y);
    }


    /**
    Draw the datepicker object (which is just a table with calendar elements) at the
    specified x and y coordinates, using the targetDateField object as the input tag
    that will ultimately be populated with a date.

    This function will normally be called by the displayDatePicker function.
    */
    function drawDatePicker(targetDateField, index, x, y)
    {
      var dt = getFieldDate(targetDateField.value);

      // the datepicker table will be drawn inside of a <div> with an ID defined by the
      // global datePickerDivID variable. If such a div doesn't yet exist on the HTML
      // document we're working with, add one.
      if (!document.getElementById(datePickerDivID)) {
        // don't use innerHTML to update the body, because it can cause global variables
        // that are currently pointing to objects on the page to have bad references
        //document.body.innerHTML += "<div id='" + datePickerDivID + "' class='dpDiv'></div>";
        var newNode = document.createElement("div");
        newNode.setAttribute("id", datePickerDivID);
        newNode.setAttribute("class", "dpDiv");
        newNode.setAttribute("style", "visibility: hidden;");
        document.body.appendChild(newNode);
      }

      // move the datepicker div to the proper x,y coordinate and toggle the visiblity
      var pickerDiv = document.getElementById(datePickerDivID);
      pickerDiv.style.position = "absolute";
      pickerDiv.style.left = x + "px";
      pickerDiv.style.top = y + "px";
      pickerDiv.style.visibility = "visible";

      // draw the datepicker table
      refreshDatePicker(targetDateField.name, index, dt.getFullYear(), dt.getMonth(), dt.getDate());
    }


    /**
    This is the function that actually draws the datepicker calendar.
    */

    function refreshDatePicker(dateFieldName, index, year, month, day)
    {
      // if no arguments are passed, use today's date; otherwise, month and year
      // are required (if a day is passed, it will be highlighted later)
      var thisDay = new Date();

      if ((month >= 0) && (year > 0)) {
        thisDay = new Date(year, month, 1);
      } else {
        day = thisDay.getDate();
        thisDay.setDate(1);
      }

      // the calendar will be drawn as a table
      // you can customize the table elements with a global CSS style sheet,
      // or by hardcoding style and formatting elements below
      var crlf = "\r\n";
      var TABLE = "<table cols=7 class='dpTable'>" + crlf;
      var xTABLE = "</table>" + crlf;
      var TR = "<tr class='dpTR'>";
      var TR_title = "<tr class='dpTitleTR'>";
      var TR_days = "<tr class='dpDayTR'>";
      var TR_todaybutton = "<tr class='dpTodayButtonTR'>";
      var xTR = "</tr>" + crlf;
      var TD = "<td class='dpTD'";	// leave this tag open, because we'll be adding an onClick event
      var TD_title = "<td colspan=5 class='dpTitleTD'>";
      var TD_buttons = "<td class='dpButtonTD'>";
      var TD_todaybutton = "<td colspan=7 class='dpTodayButtonTD' nowrap>";
      var TD_days = "<td class='dpDayTD'>";
      var TD_selected = "<td class='dpDayHighlightTD'";	// leave this tag open, because we'll be adding an onClick event
      var xTD = "</td>" + crlf;
      var DIV_title = "<div class='dpTitleText'>";
      var DIV_selected = "<div class='dpDayHighlight'>";
      var xDIV = "</div>";

      // start generating the code for the calendar table
      var html = TABLE;

      // this is the title bar, which displays the month and the buttons to
      // go back to a previous month or forward to the next month
      html += TR_title;
      html += TD_buttons + getButtonCode(dateFieldName, index, thisDay, -1, "&lt;") + xTD;
      html += TD_title + DIV_title + monthArrayLong[thisDay.getMonth()] + " " + thisDay.getFullYear() + xDIV + xTD;
      html += TD_buttons + getButtonCode(dateFieldName, index, thisDay, 1, "&gt;") + xTD;
      html += xTR;

      // this is the row that indicates which day of the week we're on
      html += TR_days;
      for(var i = 0; i < dayArrayShort.length; i++)
        html += TD_days + dayArrayShort[i] + xTD;
      html += xTR;

      // now we'll start populating the table with days of the month
      html += TR;

      // first, the leading blanks
      for (i = 0; i < thisDay.getDay(); i++)
        html += TD + "&nbsp;" + xTD;

      // now, the days of the month
      do {
        dayNum = thisDay.getDate();
        TD_onclick = " onclick=\"updateDateField('" + dateFieldName + "', '" + index + "', '" + getDateString(thisDay) + "');\">";

        if (dayNum == day)
          html += TD_selected + TD_onclick + DIV_selected + dayNum + xDIV + xTD;
        else
          html += TD + TD_onclick + dayNum + xTD;

        // if this is a Saturday, start a new row
        if (thisDay.getDay() == 6)
          html += xTR + TR;

        // increment the day
        thisDay.setDate(thisDay.getDate() + 1);
      } while (thisDay.getDate() > 1)

      // fill in any trailing blanks
      if (thisDay.getDay() > 0) {
        for (i = 6; i > thisDay.getDay(); i--)
          html += TD + "&nbsp;" + xTD;
      }
      html += xTR;

      // add a button to allow the user to easily return to today, or close the calendar
      var today = new Date();
      var todayString = "Today is " + dayArrayMed[today.getDay()] + ", " + monthArrayMed[today.getMonth()] + " " + today.getDate();
      html += TR_todaybutton + TD_todaybutton;
      html += "&nbsp;<button class='dpTodayButton' onClick='updateAllFields(\"" + dateFieldName + "\"," + index + ");'>update remaining</button> ";
      html += "&nbsp;<button class='dpTodayButton' onClick='closeDatePicker(\"" + dateFieldName + "\"," + index + ");'>close</button>&nbsp;";
      html += xTD + xTR;

      // and finally, close the table
      html += xTABLE;

      document.getElementById(datePickerDivID).innerHTML = html;
      // add an "iFrame shim" to allow the datepicker to display above selection lists
      adjustiFrame();
    }

    function closeDatePicker(dateFieldName,index) {
        var targetDateField = document.getElementsByName(dateFieldName).item(index);
        pickerDiv           = document.getElementById(datePickerDivID);
        iFrameDiv           = document.getElementById(iFrameDivID);
        form                = document.getElementById("assetForm");
        elements            = form.elements;
        dateFieldId         = index + "-" + dateFieldName;

        var nextElement = "";
        for(var s=0;s<elements.length;s++) {
            element = elements[s];
            if(element.id == dateFieldId) {
                if(s+1<elements.length) nextElement = elements[s+1];
            }


        }

        pickerDiv.style.visibility = "hidden";
    //    iFrameDiv.style.zIndex = pickerDiv.style.zIndex + 1;
        iFrameDiv.style.visibility = "hidden";
    //    pickerDiv.style.zIndex = -1;
    //    targetDateField.focus();
        nextElement.focus();
    }

    function closePicker(){

        pickerDiv           = document.getElementById(datePickerDivID);
        iFrameDiv           = document.getElementById(iFrameDivID);
        if(pickerDiv != null) pickerDiv.style.visibility = "hidden";
        if(iFrameDiv != null) iFrameDiv.style.visibility = "hidden";
    }


    /**
    Convenience function for writing the code for the buttons that bring us back or forward
    a month.
    */
    function getButtonCode(dateFieldName, index, dateVal, adjust, label)
    {
      var newMonth = (dateVal.getMonth() + adjust) % 12;
      var newYear = dateVal.getFullYear() + parseInt((dateVal.getMonth() + adjust) / 12);
      if (newMonth < 0) {
        newMonth += 12;
        newYear += -1;
      }

      return "<button class='dpButton' onClick='refreshDatePicker(\"" + dateFieldName + "\", " + index + ", " + newYear + ", " + newMonth + ");'>" + label + "</button>";
    }


    /**
    Convert a JavaScript Date object to a string, based on the dateFormat and dateSeparator
    variables at the beginning of this script library.
    */
    function getDateString(dateVal)
    {
      var dayString = "" + dateVal.getDate();
      var monthString = "" + (dateVal.getMonth()+1);
      dayString = dayString.substring(dayString.length - 2);
      monthString = monthString.substring(monthString.length - 2);

      switch (dateFormat) {
        case "dmy" :
          return dayString + dateSeparator + monthString + dateSeparator + dateVal.getFullYear();
        case "ymd" :
          return dateVal.getFullYear() + dateSeparator + monthString + dateSeparator + dayString;
        case "mdy" :
        default :
          return monthString + dateSeparator + dayString + dateSeparator + dateVal.getFullYear();
      }
    }


    /**
    Convert a string to a JavaScript Date object.
    */
    function getFieldDate(dateString)
    {
      var dateVal;
      var dArray;
      var d, m, y;

      try {
        dArray = splitDateString(dateString);
        if (dArray) {
          switch (dateFormat) {
            case "dmy" :
              d = parseInt(dArray[0], 10);
              m = parseInt(dArray[1], 10) - 1;
              y = parseInt(dArray[2], 10);
              break;
            case "ymd" :
              d = parseInt(dArray[2], 10);
              m = parseInt(dArray[1], 10) - 1;
              y = parseInt(dArray[0], 10);
              break;
            case "mdy" :
            default :
              d = parseInt(dArray[1], 10);
              m = parseInt(dArray[0], 10) - 1;
              y = parseInt(dArray[2], 10);
              break;
          }
          dateVal = new Date(y, m, d);
        } else {
          dateVal = new Date(dateString);
        }
      } catch(e) {
        dateVal = new Date();
      }

      return dateVal;
    }


    /**
    Try to split a date string into an array of elements, using common date separators.
    If the date is split, an array is returned; otherwise, we just return false.
    */
    function splitDateString(dateString)
    {
      var dArray;
      if (dateString.indexOf("/") >= 0)
        dArray = dateString.split("/");
      else if (dateString.indexOf(".") >= 0)
        dArray = dateString.split(".");
      else if (dateString.indexOf("-") >= 0)
        dArray = dateString.split("-");
      else if (dateString.indexOf("\\") >= 0)
        dArray = dateString.split("\\");
      else
        dArray = false;

      return dArray;
    }

    /**
    Update the field with the given dateFieldName with the dateString that has been passed,
    and hide the datepicker. If no dateString is passed, just close the datepicker without
    changing the field value.

    Also, if the page developer has defined a function called datePickerClosed anywhere on
    the page or in an imported library, we will attempt to run that function with the updated
    field as a parameter. This can be used for such things as date validation, setting default
    values for related fields, etc. For example, you might have a function like this to validate
    a start date field:

    function datePickerClosed(dateField)
    {
      var dateObj = getFieldDate(dateField.value);
      var today = new Date();
      today = new Date(today.getFullYear(), today.getMonth(), today.getDate());

      if (dateField.name == "StartDate") {
        if (dateObj < today) {
          // if the date is before today, alert the user and display the datepicker again
          alert("Please enter a date that is today or later");
          dateField.value = "";
          document.getElementById(datePickerDivID).style.visibility = "visible";
          adjustiFrame();
        } else {
          // if the date is okay, set the EndDate field to 7 days after the StartDate
          dateObj.setTime(dateObj.getTime() + (7 * 24 * 60 * 60 * 1000));
          var endDateField = document.getElementsByName("EndDate").item(0);
          endDateField.value = getDateString(dateObj);
        }
      }
    }

    */
    function updateDateField(dateFieldName,index, dateString)
    {
      var targetDateField = document.getElementById(index + "-" + dateFieldName);
      if (dateString)
          targetDateField.value = dateString;
          document.getElementById(datePickerDivID).style.visibility = "hidden";
          adjustiFrame();
          targetDateField.focus();

      // after the datepicker has closed, optionally run a user-defined function called
      // datePickerClosed, passing the field that was just updated as a parameter
      // (note that this will only run if the user actually selected a date from the datepicker)
    //  if ((dateString) && (typeof(datePickerClosed) == "function"))
    //    datePickerClosed(targetDateField);
    }

    function updateAllFields(dateFieldName, index, dateString) {

      targetDateFields = document.getElementsByName(dateFieldName);


      if (dateString) {

        for(var p=index;p<targetDateFields.length;p++) {

            var targetDateField = targetDateFields[p];
            targetDateField.value = dateString;

        }

      } else {

          dateString = targetDateFields[index].value;
          for(var p=index;p<targetDateFields.length;p++) {

            var targetDateField = targetDateFields[p];
            targetDateField.value = dateString;

        }

      }
        closeDatePicker(dateFieldName, index);

      // after the datepicker has closed, optionally run a user-defined function called
      // datePickerClosed, passing the field that was just updated as a parameter
      // (note that this will only run if the user actually selected a date from the datepicker)
    //  if ((dateString) && (typeof(datePickerClosed) == "function"))
    //    datePickerClosed(targetDateField, index);
    }


    /**
    Use an "iFrame shim" to deal with problems where the datepicker shows up behind
    selection list elements, if they're below the datepicker. The problem and solution are
    described at:

    http://dotnetjunkies.com/WebLog/jking/archive/2003/07/21/488.aspx
    http://dotnetjunkies.com/WebLog/jking/archive/2003/10/30/2975.aspx
    */
    function adjustiFrame(pickerDiv, iFrameDiv)
    {
      if (!document.getElementById(iFrameDivID)) {
        // don't use innerHTML to update the body, because it can cause global variables
        // that are currently pointing to objects on the page to have bad references
        //document.body.innerHTML += "<iframe id='" + iFrameDivID + "' src='javascript:false;' scrolling='no' frameborder='0'>";
        var newNode = document.createElement("iFrame");
        newNode.setAttribute("id", iFrameDivID);
        newNode.setAttribute("src", "javascript:false;");
        newNode.setAttribute("scrolling", "no");
        newNode.setAttribute("frameborder", "0");
        document.body.appendChild(newNode);
      }

      if (!pickerDiv)
        pickerDiv = document.getElementById(datePickerDivID);
      if (!iFrameDiv)
        iFrameDiv = document.getElementById(iFrameDivID);

      try {
        iFrameDiv.style.position = "absolute";
        iFrameDiv.style.width = pickerDiv.offsetWidth;
        iFrameDiv.style.height = pickerDiv.offsetHeight;
        iFrameDiv.style.top = pickerDiv.style.top;
        iFrameDiv.style.left = pickerDiv.style.left;
        iFrameDiv.style.zIndex = pickerDiv.style.zIndex - 1;
        iFrameDiv.style.visibility = pickerDiv.style.visibility;
      } catch(e) {
      }
    }
function DescAsset()
{
AssetArr = new String(sforceClient.DescribeSObject("Asset"));
tmpAssetArr=AssetArr.split("\n");
     var AssetArrLength=tmpAssetArr.length;
     var i=0;
     var j=0;
     do 
     {
	     var AssetVal=tmpAssetArr[i].substr(0,6);
          if(      (AssetVal=="label:")	||	(AssetVal=="value:") ||				(AssetVal=="precis"))
          {
		     arrDescResult[j]=tmpAssetArr[i];		
		     j++;
          }
          i++;
     }
     while (i<AssetArrLength);
}     

</script>
</head>
<body onload="initPage();">

<style type="text/css">
    <!--
            /* Required field fonts & BGCOLOR */
    .requiredInputs {
       font-family: 'Arial', 'Helvetica';
       font-weight: normal;
       font-size: 9pt;
       color: #FFFFFF;
       text-align: left;
       line-height: 16px;
       background-color: #990000;
       padding: 1px 4px 1px 4px;
    }

    /* User error message */
    .errorMsgs {
       font-family: 'Arial', 'Helvetica';
       font-weight: bold;
       font-size: 8pt;
       color: #990000;
    }
    /* Data Label Fonts & BGCOLOR */
    .dataLabels {
       font-family: 'Arial', 'Helvetica';
       font-weight: normal;
       font-size: 9pt;
       color: #000000;
       text-align: left;
       line-height: 16px;
       background-color: #DDDDDD;
	   padding: 1px 4px 1px 4px;
    }

  .dataField {
   font-family: 'Arial', 'Helvetica';
   font-weight: bold;
   font-size: 9pt;
   color: #000000;
   /*text-align: left;*/
   line-height: 16px;
   background-color: #EEEEEE;
   padding: 1px 4px 1px 4px;
}
            -->

    body {
        font-family: Verdana, Tahoma, Arial, Helvetica, sans-serif;
        font-size: .8em;
        }

    .dpDiv {
        }

    .dpTable {
        font-family: Tahoma, Arial, Helvetica, sans-serif;
        font-size: 12px;
        text-align: center;
        color: #505050;
        background-color: #EEEEEE;
        border: 1px solid #AAAAAA;
        }

    .dpTR {
        }

    .dpTitleTR {
        }

    .dpDayTR {
        }

    .dpTodayButtonTR {
        }

    .dpTD {
        cursor: pointer;
        }

    .dpDayHighlightTD {
        background-color: #CCCCCC;
        border: 1px solid #AAAAAA;
        cursor: pointer;
        }

    .dpTitleTD {
        }

    .dpButtonTD {
        }

    .dpTodayButtonTD {
        }

    .dpDayTD {
        background-color: #CCCCCC;
        border: 1px solid #AAAAAA;
        color: white;
        }

    .dpTitleText {
        font-size: 12px;
        color: gray;
        font-weight: bold;
        }

    .dpDayHighlight {
        color: 4060ff;
        font-weight: bold;
        }

    .dpButton {
        border-left: solid 1px #336699;
        border-top: solid 1px #336699;
        border-right: solid 1px #666666;
        border-bottom: solid 1px #666666;
        font-family: 'Arial', 'Helvetica';
        font-weight: bold;
        font-size: 8pt;
        color: #FFFFFF;
        cursor: hand;
        background-color: #003366;
        }

    .dpTodayButton {
        border-left: solid 1px #336699;
        border-top: solid 1px #336699;
        border-right: solid 1px #666666;
        border-bottom: solid 1px #666666;
        font-family: 'Arial', 'Helvetica';
        font-size: 10px;
        color: #FFFFFF;
        background-color: #003366;
        font-weight: bold;
        }

    </style>

<DIV id="divMain_top" style="POSITION: relative;" ms_positioning="GridLayout">
    <table border="0" cellpadding="0" cellspacing="0">
        <tr>
            <td class="pageTitle" nowrap><img src="/img/pricebooks_page_icon.gif" alt="Products" 
				title="Products" align="texttop" border="0" height="20" width="30">
				Create Assets from Opportunity Line Items:</td>
            <td align="right" width="100%">
                <table border="0" cellpadding="0" cellspacing="0">
                    <tr>
                        <td height="15" nowrap="nowrap" width="40">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
						<td height="15" nowrap="nowrap" width="40" >
						<input id="unitbased" type="button" class="button" 
							value="Show Single Asset Quantities" onClick="unitbased_flip();" >
						</td>
                    </tr>
                </table>
            </td>

            <td align="right" nowrap="nowrap" width="100%">&nbsp;</td>
        </tr>

        <tr><td class="moduleLine" colspan="3"><img src="/s.gif" height="2"></td></tr>
        <tr><td colspan="3"><img src="/s.gif"></td></tr>
        <tr><td class="bodySmallBold" align="left" bgcolor="#cccccc" height="15" colspan="3">&nbsp;�&nbsp;<a href=javascript:redirect() class="bodySmallBold">Back to Opportunity:  {!Opportunity.Name}</a></td></tr>
    </table>
	<span id="divMain"></span>
</DIV>
<DIV id="divErrorMsg"></DIV>
<DIV id="divDebugMsg"></DIV>
</body>
</html>